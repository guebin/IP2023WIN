[
  {
    "objectID": "1_1.html",
    "href": "1_1.html",
    "title": "Chap 1. 기초문법",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 30, 2023\n\n\nLesson 01: 파이썬의 자료형 I (int, float, bool, str)\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 02: 파이썬의 자료형 II (list, tuple)\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 03: 파이썬 자료형 심화개념\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 04: 파이썬의 자료형 III (dict, set)\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "3_3.html",
    "href": "3_3.html",
    "title": "Chap 9. 판다스 백엔드",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nFeb 1, 2023\n\n\nLesson 16: 고차원 자료의 시각화 (with plotnine)\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 17: 아이스크림을 많이 먹으면 걸리는 병\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 18: FIFA23 자료분석\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 19: 심슨의 역설\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "1_4.html",
    "href": "1_4.html",
    "title": "Chap 4. 간단한 데이터 조작",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 30, 2023\n\n\nLesson 09: 데이터 조작 연습 (문제)\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 09: 데이터 조작 연습 (풀이)\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "2023년도 동계 WORKSHOP\n파이썬을 이용한 통계자료분석\nguebin@jbnu.ac.kr\n자연과학대학 본관 205호"
  },
  {
    "objectID": "1_2.html",
    "href": "1_2.html",
    "title": "Chap 2. Numpy",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 30, 2023\n\n\nLesson 06: numpy 공부 1단계 ~ 2단계\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 07: numpy 공부 3단계 ~ 5단계\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2_2.html",
    "href": "2_2.html",
    "title": "Chap 6. 함수, 제어, 반복",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 31, 2023\n\n\nLesson 11: lambda, map\n\n\n최규빈\n\n\n\n\nJan 31, 2023\n\n\nLesson 12: pandas + lambda, map\n\n\n최규빈\n\n\n\n\nJan 31, 2023\n\n\nLesson 13: 데이터 전처리\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#애드워드-터프티",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#애드워드-터프티",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "애드워드 터프티",
    "text": "애드워드 터프티\n- 데이터 시각화계의 거장\n- 터프티의 이론중 백미: 엄격한 미니멀리즘\n\n최소한의 잉크로 많은 정보를 전달할 수 있다면 그것이 바로 좋은 그래프이다.\n작은 지면 내에서 잉크를 최대한 적게 써서 짧은 시간 안에 많은 영감을 주어야 한다.\n\n- 데이터-잉크비: 데이터를 표현하는데 들아가는 잉크의 양 / 그래픽을 인쇄하는데 들어가는 잉크의 총량\n- 차트정크 (나이젤홈즈의 그래프)\n\n\n“Lurking behind chartjunk is contempt both for information and for the audience. Chartjunk promoters imagine that numbers and details are boring, dull, and tedious, requiring ornament to enliven. Cosmetic decoration, which frequently distorts the data, will never salvage an underlying lack of content. If the numbers are boring, then you’ve got the wrong numbers (…) Worse is contempt for our audience, designing as if readers were obtuse and uncaring. In fact, consumers of graphics are often more intelligent about the information at hand than those who fabricate the data decoration (…) The operating moral premise of information design should be that our readers are alert and caring; they may be busy, eager to get on with it, but they are not stupid.”\n\n\n차트정크 = 대중을 멸시 + 데이터에 대한 모독\n차트정크 옹호가는 숫자와 데이터가 지루하여 활기가 필요하다고 생각하는 모양이다..\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 제 생각: 글쎄…"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#찰스미나드의-도표",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#찰스미나드의-도표",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "찰스미나드의 도표",
    "text": "찰스미나드의 도표\n\n인류역사상 가장 훌륭한 시각화\n\n\n- 터프티의 평\n\n지금까지 그려진 최고의 통계 그래픽일지도 모른다.\n여기에서는 군대의 크기, 2차원 평면상의 위치, 군대의 이동방향, 모스코바에서 퇴각하는 동안의 여러날짜, 온도 \\(\\to\\) 6차원의 변수\n백만번에 한번 이런 그림을 그릴수는 있겠지만 이러한 멋진 그래픽을 만드는 방법에 대한 원칙은 없다. \\(\\to\\) 미니멀리즘..\n\n- 왜 우수한 그래프일까?\n\n자료를 파악하는 기법은 최근까지도 산점도, 막대그래프, 라인플랏에 의존\n이러한 플랏의 단점은 고차원의 자료를 분석하기 어렵다는 것임\n미나드는 여러그램을 그리는 방법 대신에 한 그림에서 패널을 늘리는 방법을 선택함."
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#미나드처럼-그리는게-왜-어려운가",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#미나드처럼-그리는게-왜-어려운가",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "미나드처럼 그리는게 왜 어려운가?",
    "text": "미나드처럼 그리는게 왜 어려운가?\n- 몸무게, 키, 성별, 국적\n\ndf1=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/male1.csv')\ndf2=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/male2.csv')  \ndf3=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/female.csv') \ndf4=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/foreign.csv')\n\n- 미나드의 접근방법\n\n_df = pd.concat([pd.concat([df1,df2],axis=1).assign(g='m'),df3.assign(g='f')])\ndf = pd.concat([_df.assign(g2='korea'),df4.assign(g2='foreign')]).reset_index(drop=True)\ndf\n\n\n\n\n\n  \n    \n      \n      w\n      h\n      g\n      g2\n    \n  \n  \n    \n      0\n      72.788217\n      183.486773\n      m\n      korea\n    \n    \n      1\n      66.606430\n      173.599877\n      m\n      korea\n    \n    \n      2\n      69.806324\n      173.237903\n      m\n      korea\n    \n    \n      3\n      67.449439\n      173.223805\n      m\n      korea\n    \n    \n      4\n      70.463183\n      174.931946\n      m\n      korea\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1525\n      78.154632\n      188.324350\n      m\n      foreign\n    \n    \n      1526\n      74.754308\n      183.017979\n      f\n      foreign\n    \n    \n      1527\n      91.196208\n      190.100456\n      m\n      foreign\n    \n    \n      1528\n      87.770394\n      187.987255\n      m\n      foreign\n    \n    \n      1529\n      88.021995\n      193.456798\n      m\n      foreign\n    \n  \n\n1530 rows × 4 columns\n\n\n\n\nsns.scatterplot(data=df,x='w',y='h',hue='g',style='g2')\n\n<AxesSubplot:xlabel='w', ylabel='h'>\n\n\n\n\n\n- 어려운점: (1) 센스가 없어서 hue/style을 이용하여 그룹을 구분할 생각을 못함 (2) long df (=tidy data) 형태로 데이터를 정리할 생각을 못함 (3) long df 형태로 데이터를 변형하는 코드를 모름\n\n기획력부족 -> 훌륭한 시각화를 많이 볼 것\n데이터프레임에 대한 이해부족 -> tidydata에 대한 개념\n프로그래밍 능력 -> 코딩공부열심히 (pandas를 엄청 잘해야함)"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#data-설명",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#data-설명",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "data 설명",
    "text": "data 설명\n- displ: 자동차의 엔진크기\n- hwy: 연료의 효율, 동일한 연료로 얼마나 멀리 가느냐?\n- 자세한 설명은 R에서 ?mpg를 이용해 스스로 찾아볼 것"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#python에서-plotnine을-이용한-산점도",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#python에서-plotnine을-이용한-산점도",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "python에서: plotnine을 이용한 산점도",
    "text": "python에서: plotnine을 이용한 산점도\n\nggplot(data=mpg) + geom_point(mapping=aes(x='displ',y='hwy')) ## plotnine\n\n\n\n\n<ggplot: (8775336983373)>\n\n\n\n산점도 해석: 엔진크기가 클수록 효율이 낮음.\n\n- 빠르게 그리기: data=와 mapping=은 생략가능함\n\nggplot(mpg) + geom_point(aes(x='displ',y='hwy')) ## plotnine\n\n\n\n\n<ggplot: (8775336295029)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#객체지향적인-느낌으로-산점도-그리기",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#객체지향적인-느낌으로-산점도-그리기",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "객체지향적인 느낌으로 산점도 그리기",
    "text": "객체지향적인 느낌으로 산점도 그리기\nstep1: 도화지를 준비한다.\n\nfig = ggplot(data=mpg)\nfig\n\n\n\n\n<ggplot: (8775336276849)>\n\n\nstep2 변수와 에스테틱사이의 맵핑을 설정한다.\n\na1= aes(x='displ',y='hwy')\na1\n\n{'x': 'displ', 'y': 'hwy'}\n\n\nstep3 점들의 집합을 만든다. 즉 포인트 지옴을 만든다.\n\npoint1=geom_point(mapping=a1)\n\n\ngeom_point(): 점들을 그려! 어떻게?\na1에서 설정된 표를 보고\n\nstep4 도화지와 지옴을 합친다.\n\nfig+point1\n\n\n\n\n<ggplot: (8775335422437)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경",
    "text": "산점도 + 점크기변경\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',size='class'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8726734563561)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-투명도변경",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-투명도변경",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 투명도변경",
    "text": "산점도 + 투명도변경\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',alpha='class'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_alpha.py:70: PlotnineWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8726734989121)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-투명도점크기를-동시에-적용",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-투명도점크기를-동시에-적용",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 투명도/점크기를 동시에 적용",
    "text": "산점도 + 투명도/점크기를 동시에 적용\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',alpha='class',size='class'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_alpha.py:70: PlotnineWarning: Using alpha for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8726734522405)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-형태",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-형태",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 형태",
    "text": "산점도 + 형태\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',shape='class'))\n\n\n\n\n<ggplot: (8726734265229)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-색깔",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-색깔",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 색깔",
    "text": "산점도 + 색깔\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',color='class'))\n\n\n\n\n<ggplot: (8726734017473)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#객체지향적-느낌으로",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#객체지향적-느낌으로",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "객체지향적 느낌으로?",
    "text": "객체지향적 느낌으로?\n\na2 = aes(x='displ', y='hwy', color='class') \n\n\na1,a2\n\n({'x': 'displ', 'y': 'hwy'}, {'x': 'displ', 'y': 'hwy', 'color': 'class'})\n\n\n\npoint2=geom_point(a2)\n\n\nfig+point2\n\n\n\n\n<ggplot: (8775335353217)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-색깔-적합선",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-색깔-적합선",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 색깔 + 적합선",
    "text": "산점도 + 색깔 + 적합선\n- 일단 색깔이 없는 포인트 지옴부터 연습\n\nfig+point1\n\n\n\n\n<ggplot: (8775335332061)>\n\n\n\nline1 = geom_smooth(a1)\n\n\nfig+point1+line1\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8775334960069)>\n\n\n- point1(색깔없는 포인트 지옴)을 point2(색깔있는 포인트 지옴)으로 언제든지 바꿔치기 가능!\n\nfig+point2+line1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726732661565)>\n\n\n- 명령어로 한번에 그리기\n\nggplot(data=mpg) + \\\ngeom_point(mapping=aes(x='displ',y='hwy',color='class')) + \\\ngeom_smooth(mapping=aes(x='displ',y='hwy'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726732727485)>\n\n\n- 공통적인 맵핑규칙은 ggplot()쪽으로 빼기도 한다. (figure를 선언하는 곳에서 공통으로 선언함)\n\nggplot(data=mpg,mapping=aes(x='displ',y='hwy')) + \\\ngeom_point(mapping=aes(color='class')) + \\\ngeom_smooth()\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726733489953)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경-색깔",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경-색깔",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경 + 색깔",
    "text": "산점도 + 점크기변경 + 색깔\n- drv (전륜, 후륜, 4륜 구동)에 따라서 데이터를 시각화 하고 싶다.\n\nggplot(data=mpg, mapping=aes(x='displ',y='hwy')) + geom_point(mapping=aes(size='class',color='drv'),alpha=0.3)\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8726731152845)>\n\n\n\n모든 \\(x\\)에 대하여 붉은색 점들이 대부분 초록색과 보라색 점들에 비하여 아래쪽에 있음 \\(\\to\\) 4륜구동방식이 연비가 좋지 않음"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-객체지향버전",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-객체지향버전",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경 + 색깔 (객체지향버전)",
    "text": "산점도 + 점크기변경 + 색깔 (객체지향버전)\n- 맵핑규칙\n\na1,a2\n\n({'x': 'displ', 'y': 'hwy'}, {'x': 'displ', 'y': 'hwy', 'color': 'class'})\n\n\n\na3 = a2.copy() \n\n\na3['color'] = 'drv'\na3['size'] = 'class'\na3\n\n{'x': 'displ', 'y': 'hwy', 'color': 'drv', 'size': 'class'}\n\n\n\n아래와 같이 선언해도 괜찮음\n\na3= aes(x='displ',y='hwy',color='drv',size='class')\n\npoint3=geom_point(a3)\n\n\nfig+point3\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8775334891765)>\n\n\n\n그림의 전체적인 투명도를 조절하면 좋겠음\n\n\npoint3=geom_point(a3,alpha=0.2)\nfig+point3\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8775333161077)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-선추가",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-선추가",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경 + 색깔 + 선추가",
    "text": "산점도 + 점크기변경 + 색깔 + 선추가\n\nfig+point3+line1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726730575253)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-drv별로-선추가",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-drv별로-선추가",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경 + 색깔 + drv별로 선추가",
    "text": "산점도 + 점크기변경 + 색깔 + drv별로 선추가\n- 맵핑규칙\n\na1,a2,a3\n\n({'x': 'displ', 'y': 'hwy'},\n {'x': 'displ', 'y': 'hwy', 'color': 'class'},\n {'x': 'displ', 'y': 'hwy', 'color': 'drv', 'size': 'class'})\n\n\n\na4 = a2.copy() \na4['color']='drv'\na4\n\n{'x': 'displ', 'y': 'hwy', 'color': 'drv'}\n\n\n\nline2 = geom_smooth(a4)\n\n\nfig + point3 +line2\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8775336209333)>\n\n\n- 선의 색깔을 동일하게 하고 선의 타입을 변경하여 drv를 표시하고 싶다면?\n\na1,a2,a3,a4\n\n({'x': 'displ', 'y': 'hwy'},\n {'x': 'displ', 'y': 'hwy', 'color': 'class'},\n {'x': 'displ', 'y': 'hwy', 'color': 'drv', 'size': 'class'},\n {'x': 'displ', 'y': 'hwy', 'color': 'drv'})\n\n\n\na5=a1.copy()\na5['linetype']='drv' \na5\n\n{'x': 'displ', 'y': 'hwy', 'linetype': 'drv'}\n\n\n\nline3 = geom_smooth(a5,size=0.5,color='gray')\n\n\nfig+point3+line3\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726732637457)>\n\n\n- 전체적인 추세선도 추가하고 싶다면?\n\nfig+point3+line3+line1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726732939513)>\n\n\n- 그려보니까 역시 drv별로 그려지는 추세선은 색깔별로 구분하는게 좋겠음.\n\nline2 = geom_smooth(a4,size=0.5,linetype='dashed')\nfig+point3+line2+line1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726733678229)>\n\n\n- 고차원을 변수를 표현할 수 있는 무기는 다양하다.\n\n산점도(포인트지옴): 점의크기, 점의형태, 점의색깔, 점의투명도\n라인플랏(스무스지옴,라인지옴): 선의형태, 선의색깔, 선의굵기"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#toy-exam",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#toy-exam",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "Toy exam",
    "text": "Toy exam\n- 교재의 예제상황은 예를들면 아래와 같다.\n(숨은진짜상황1)\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(1) \ntemp= np.array([-10.2, -5.2, 0.1, 10.1, 12.2, 14.7, \n                25.4, 26.8, 28.9, 35.1, 32.2, 34.6])\neps= np.random.normal(size=12,scale=5)\nicecream= 20 + temp * 2 + eps\n\n\nplt.plot(temp,icecream,'.')\n\n\n\n\n\n온도와 아이스크림 판매량의 산점도\n\n(숨은진짜상황2)\n\\[\\text{소아마비 반응수치} = 30 + 0.5 \\times \\text{온도} + \\epsilon\\] - 좌변은 소아마비임을 나타내는 어떠한 반응수치라고 생각하자.\n\nnp.random.seed(2) \neps = np.random.normal(size=12,scale=5) \ndisease = 30+ temp* 0.5 + eps\n\n\nplt.plot(temp,disease,'.')\n\n\n\n\n\n온도와 소아마비의 산점도\n\n(우리가 데이터로부터 관측한 상황)\n- 아이스크림과 질병의 산점도를 그려보자.\n\nplt.plot(icecream,disease,'.')\n\n\n\n\n\n양의 상관관계에 있다.\n\n- 아이스크림 중 어떠한 물질이 소아마비를 일으키는것이 분명하므로 (인과성이 분명해보이니까) 아래와 같은 모형을 세우자. <– 여기서부터 틀렸음\n\\[{\\tt disease}_i =\\beta_0 +\\beta_1 {\\tt icecream}_i +\\epsilon_i,\\quad \\textbf{for} ~~ i=1,2,\\dots, 12\\]\n- 적절한 \\(\\beta_0\\)와 \\(\\beta_1\\)을 추정하면 우리는 아이스크림과 소아마비의 관계를 알 수 있다. <– 틀린주장\n\n틀린 모형\n도데체 우리가 뭘 잘못했는가?\n\n- 두 변수 사이에 상관관계가 있어도 실제 원인은 다른 변수에 숨겨져 있는 경우가 많다.\n(ex1)\n\n온도 \\(\\to\\) 익사\n온도 \\(\\to\\) 아이스크림\n아이스크림과 익사자도 양의 상관관계에 있을것이다.\n아이스크림을 먹이면 물에 빠져 죽는다 \\(\\to\\) 틀린주장\n사실 기온이 숨겨진 원인이다. 기온이 증가하면 아이스크림 판매량도 증가하고 폭염때문에 익사사고율도 높아지는 구조이다.\n\n(ex2)\n\n인구수 \\(\\to\\) 교회\n인구수 \\(\\to\\) 범죄건수\n지역별 교회와 범죄건수를 살펴보면 상관관계가 높게 나올것임\n교회를 지으면 범죄건수도 증가한다? \\(\\to\\) 틀린주장\n사실 인구가 숨겨진 요인임\n\n- ex2, ex1에 대하여 바른 분석을 하려면?\n\nex2: 인구가 비슷한 도시끼리 묶어서 비교해보면 교회와 범죄의 건수는 양의 상관관계에 있지 않을것임\nex1: 온도가 비슷한 그룹끼리 묶어보자.\n\n- 올바른 분석: 온도가 비슷한 그룹끼리 묶어서 그려보자. \\(\\to\\) 상관계수가 줄어들 것이다.\n\nplt.plot(icecream[:6],disease[:6],'.')\n\n\n\n\n\nplt.plot(icecream[6:],disease[6:],'.')\n\n\n\n\n\n진짜로 선형관계가 약해졌다.."
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#자료생성-좀-더-그럴듯한-자료-만들기",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#자료생성-좀-더-그럴듯한-자료-만들기",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "자료생성: 좀 더 그럴듯한 자료 (만들기)",
    "text": "자료생성: 좀 더 그럴듯한 자료 (만들기)\n- 지난 시간의 toy example은 데이터가 너무 작아서 억지스러움 \\(\\to\\) 기상자료개방포털, 회원가입해야 자료받을 수 있음.\n\n_df=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/temp.csv')\n_df\n\n\n\n\n\n  \n    \n      \n      지점번호\n      지점명\n      일시\n      평균기온(℃)\n      최고기온(℃)\n      최고기온시각\n      최저기온(℃)\n    \n  \n  \n    \n      0\n      146\n      전주\n      2020-01-01\n      -0.5\n      4.3\n      15:09\n      -6.4\n    \n    \n      1\n      146\n      전주\n      2020-01-02\n      1.4\n      6.5\n      14:12\n      -3.0\n    \n    \n      2\n      146\n      전주\n      2020-01-03\n      2.6\n      7.6\n      13:32\n      -0.5\n    \n    \n      3\n      146\n      전주\n      2020-01-04\n      2.0\n      7.7\n      13:51\n      -2.6\n    \n    \n      4\n      146\n      전주\n      2020-01-05\n      2.5\n      8.6\n      14:05\n      -3.2\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      651\n      146\n      전주\n      2021-10-13\n      19.9\n      25.5\n      14:29\n      15.6\n    \n    \n      652\n      146\n      전주\n      2021-10-14\n      20.4\n      25.5\n      13:36\n      17.0\n    \n    \n      653\n      146\n      전주\n      2021-10-15\n      18.3\n      22.0\n      13:47\n      15.7\n    \n    \n      654\n      146\n      전주\n      2021-10-16\n      12.8\n      17.4\n      0:01\n      6.5\n    \n    \n      655\n      146\n      전주\n      2021-10-17\n      6.7\n      12.4\n      15:18\n      2.2\n    \n  \n\n656 rows × 7 columns\n\n\n\n- 평균기온만 선택\n\npd.Series(_df.columns)\n\n0       지점번호\n1        지점명\n2         일시\n3    평균기온(℃)\n4    최고기온(℃)\n5     최고기온시각\n6    최저기온(℃)\ndtype: object\n\n\n\ntemp = np.array(_df.iloc[:,3])\ntemp[:5]\n\narray([-0.5,  1.4,  2.6,  2. ,  2.5])\n\n\n\n# 숨은진짜상황1: 온도 \\(\\to\\) 아이스크림 판매량\n- 아래와 같은 관계가 있다고 하자.\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(1)\neps = np.random.normal(size=len(temp), scale=10) \nicecream = 20 + 2*temp + eps\n\n\nplt.plot(temp,icecream,'o',alpha=0.3)\nplt.xlabel(\"temp\",size=15)\nplt.ylabel(\"icecream\",size=15)\n\nText(0, 0.5, 'icecream')\n\n\n\n\n\n\n\n# 숨은진짜상황1: 온도 \\(\\to\\) 아이스크림 판매량\n- 아래와 같은 관계가 있다고 하자.\n\\[\\text{소아마비 반응수치} = 30 + 0.5 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(2) \neps=np.random.normal(size=len(temp),scale=1)\ndisease= 30 + 0.5 * temp + eps\n\n\nplt.plot(temp,disease,'o',alpha=0.3)\nplt.xlabel(\"temp\",size=15)\nplt.ylabel(\"disease\",size=15)\n\nText(0, 0.5, 'disease')\n\n\n\n\n\n\n\n# 우리가 관측한 상황 (온도는 은닉되어있음)\n\nplt.plot(icecream,disease,'o',alpha=0.3)\nplt.xlabel(\"icecream\",size=15)\nplt.ylabel(\"disease\",size=15)\n\nText(0, 0.5, 'disease')\n\n\n\n\n\n\nnp.corrcoef(icecream,disease)\n\narray([[1.        , 0.86298975],\n       [0.86298975, 1.        ]])\n\n\n\n0.86정도.."
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#직관-여름만-뽑아서-plot-해보자.",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#직관-여름만-뽑아서-plot-해보자.",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "직관: 여름만 뽑아서 plot 해보자.",
    "text": "직관: 여름만 뽑아서 plot 해보자.\n- temp>25 (여름으로 간주) 인 관측치만 플랏\n\nplt.plot(icecream[temp>25],disease[temp>25], 'o', color='C1') ## 평균기온이 25도가 넘어가면 여름이라 생각 \n\n\n\n\n- 전체적인 산점도\n\nfig , ((ax1,ax2), (ax3,ax4)) = plt.subplots(2,2,figsize=(8,6)) \nax1.plot(temp,icecream,'o',alpha=0.2); ax1.set_xlabel('temp'); ax1.set_ylabel('icecream'); ax1.set_title(\"hidden1\")\nax2.plot(temp,disease,'o',alpha=0.2); ax2.set_xlabel('temp'); ax2.set_ylabel('disease'); ax2.set_title(\"hidden2\")\nax3.plot(icecream,disease,'o',alpha=0.2); ax3.set_xlabel('icecream'); ax3.set_ylabel('disease'); ax3.set_title(\"observed\")\nax4.plot(icecream,disease,'o',alpha=0.2); ax4.set_xlabel('icecream'); ax4.set_ylabel('disease'); ax4.set_title(\"observed\")\nax4.plot(icecream[temp>25],disease[temp>25],'o',label='temp>25')\nax4.legend()\nfig.tight_layout()"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#ggplot-온도구간을-세분화-하여-시각화",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#ggplot-온도구간을-세분화-하여-시각화",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "ggplot: 온도구간을 세분화 하여 시각화",
    "text": "ggplot: 온도구간을 세분화 하여 시각화\n- 목표: 모든 온도구간에 대하여 각각 색을 다르게 하여 그려보자.\n\n사실 지금 변수는 온도, 아이스크림판매량, 소아마비\n온도가 유사한 지역을 색으로 묶으면 3차원 플랏이 가능함\n\n\n# df로 자료정리\n- 일단 데이터 프레임을 정리하자.\n\ndf = pd.DataFrame({'temp':temp,'icecream':icecream,'disease':disease})\ndf\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n    \n  \n  \n    \n      0\n      -0.5\n      35.243454\n      29.333242\n    \n    \n      1\n      1.4\n      16.682436\n      30.643733\n    \n    \n      2\n      2.6\n      19.918282\n      29.163804\n    \n    \n      3\n      2.0\n      13.270314\n      32.640271\n    \n    \n      4\n      2.5\n      33.654076\n      29.456564\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      651\n      19.9\n      68.839992\n      39.633906\n    \n    \n      652\n      20.4\n      76.554679\n      38.920443\n    \n    \n      653\n      18.3\n      68.666079\n      39.882650\n    \n    \n      654\n      12.8\n      42.771364\n      36.613159\n    \n    \n      655\n      6.7\n      30.736731\n      34.902513\n    \n  \n\n656 rows × 3 columns\n\n\n\n\n\n# 구간세분화\n- 온도를 카테고리화 하자 \\(\\to\\) 적당한 구긴을 설정하기 위해서 히스토그램을 그려보자.\n\ndf.temp.hist() # ? 이거 14주차쯤 배우는데 미리 스포합니다.. 엄청 편해요 \n\n<AxesSubplot:>\n\n\n\n\n\n\nplt.hist(df.temp) # 원래는 이걸 배웠죠\n\n(array([  3.,   9.,  29.,  60.,  92.,  86.,  65.,  93., 139.,  80.]),\n array([-12.4 ,  -8.16,  -3.92,   0.32,   4.56,   8.8 ,  13.04,  17.28,\n         21.52,  25.76,  30.  ]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n- 구간은 5정도로 하면 적당할 것 같다.\n\ndef cut(x): # 이거보다 더 좋은 방법이 있을 것 같긴 한데요..\n    if x<0: \n        y='Temp: <0'\n    elif x<5: \n        y='Temp: 0~5'\n    elif x<10: \n        y='Temp: 5~10'\n    elif x<15: \n        y='Temp: 10~15'\n    elif x<20:\n        y='Temp: 15~20'\n    elif x<25: \n        y='Temp: 20~25'\n    else: \n        y='Temp: >30'\n    return y \n\n\ndf.assign(temp2 = list(map(cut,df.temp)))\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n      temp2\n    \n  \n  \n    \n      0\n      -0.5\n      35.243454\n      29.333242\n      Temp: <0\n    \n    \n      1\n      1.4\n      16.682436\n      30.643733\n      Temp: 0~5\n    \n    \n      2\n      2.6\n      19.918282\n      29.163804\n      Temp: 0~5\n    \n    \n      3\n      2.0\n      13.270314\n      32.640271\n      Temp: 0~5\n    \n    \n      4\n      2.5\n      33.654076\n      29.456564\n      Temp: 0~5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      651\n      19.9\n      68.839992\n      39.633906\n      Temp: 15~20\n    \n    \n      652\n      20.4\n      76.554679\n      38.920443\n      Temp: 20~25\n    \n    \n      653\n      18.3\n      68.666079\n      39.882650\n      Temp: 15~20\n    \n    \n      654\n      12.8\n      42.771364\n      36.613159\n      Temp: 10~15\n    \n    \n      655\n      6.7\n      30.736731\n      34.902513\n      Temp: 5~10\n    \n  \n\n656 rows × 4 columns\n\n\n\n\n\n# ggplot\n- 온도를 색으로 구분하면\n\nfig = ggplot(data=df.assign(temp2 = list(map(cut,df.temp))))\np1 = geom_point(aes(x='icecream',y='disease',colour='temp2'),alpha=0.5)\nfig + p1\n\n\n\n\n<ggplot: (8762005360345)>\n\n\n- 추세선을 추가하면\n\nl1 = geom_smooth(aes(x='icecream',y='disease',colour='temp2'))\n\n\nfig+p1+l1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8762010169613)>\n\n\n\n각 온도별로 추세선은 거의 기울기가 0이다. \\(\\to\\) 온도가 비슷한 구간별로 묶어서 보니까 상관관계가 없다는 거!\n아이스크림 판매량과 소아마비의 corr은 유의미해보이지만, 온도를 통제하였을 경우 아이스크림 판매량과 소아마비의 partial corr은 유의미해보이지 않음.\n\n\n\n# 해석\n- 해피앤딩: 온도를 통제하니까 아이스크림과 질병은 관련이 없어보인다. \\(\\to\\) 아이스크림을 먹으면 소아마비를 유발한다는 이상한 결론이 나올뻔 했지만 우리는 온도라는 흑막을 잘 찾았고 결과적으로 “온도->아이스크림판매량,소아마비” 이라는 합리적인 진리를 얻을 수 있었다.\n\n온도와 같은 변수를 은닉변수라고 한다.\n\n- 또 다른 흑막? 고려할 흑막이 온도뿐이라는 보장이 어디있지? 사실 흑막2, 흑막3이 있어서 그런 흑막들을 고려하다보니까 아이스크림과 소아마비사이의 상관관계가 다시 보이면 어떡하지?\n\n이러한 이유 때문에 상관계수로 인과성을 유추하는건 사실상 불가능.\n그런데 이론적으로는 “세상의 모든 은닉변수를 통제하였을 경우에도 corr(X,Y)의 값이 1에 가깝다면 그때는 인과성이 있다고 봐도 무방함, (물론 이 경우에도 무엇이 원인인지는 통계적으로 따지는것이 불가)” 이라고 주장할 수 있다. 즉 모든 흑막을 제거한다면 “상관성=인과성”이다.\n\n- 실험계획법, 인과추론: 세상의 모든 흑막을 제거하는건 상식적으로 불가능\n\n피셔의주장(실험계획법): 그런데 실험계획을 잘하면 흑막을 제거한 효과가 있음 (무작위로 사람뽑아서 담배를 피우게 한다든가)\n인과추론: 실험계획이 사실상 불가능한 경우가 있음 \\(\\to\\) 모인 데이터에서 최대한 흑막2,3,4,.. 등이 비슷한 그룹끼리 “매칭”을 시킨다!"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#그냥-궁금해서-진짜-만약에-아이스크림과-소아마비가-관련있는-경우라면",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson17.html#그냥-궁금해서-진짜-만약에-아이스크림과-소아마비가-관련있는-경우라면",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "그냥 궁금해서: 진짜 만약에 아이스크림과 소아마비가 관련있는 경우라면?",
    "text": "그냥 궁금해서: 진짜 만약에 아이스크림과 소아마비가 관련있는 경우라면?\n- 온도는 아이스크림 판매에 여전히 영향을 주지만\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(1)\neps=np.random.normal(size=len(temp), scale=10) \nicecream = 20 + 2 * temp + eps \n\n- 수영장이 원인이 아니라 진짜 아이스크림을 먹고 소아마비에 걸린상황이라면?\n\\[\\text{소아마비 반응수치} = 30 + 0 \\times \\text{온도} + 0.15 \\times \\text{아이스크림 판매량} + \\epsilon\\]\n\nnp.random.seed(2) \neps = np.random.normal(size=len(temp),scale=2)\ndisease= 30+ 0*temp + 0.15*icecream + eps\n\n\ndf2=pd.DataFrame({'temp':temp,'icecream':icecream,'disease':disease})\ndf2.assign(temp2=list(map(cut,df2.temp)))\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n      temp2\n    \n  \n  \n    \n      0\n      -0.5\n      35.243454\n      34.453002\n      Temp: <0\n    \n    \n      1\n      1.4\n      16.682436\n      32.389832\n      Temp: 0~5\n    \n    \n      2\n      2.6\n      19.918282\n      28.715350\n      Temp: 0~5\n    \n    \n      3\n      2.0\n      13.270314\n      35.271089\n      Temp: 0~5\n    \n    \n      4\n      2.5\n      33.654076\n      31.461240\n      Temp: 0~5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      651\n      19.9\n      68.839992\n      39.693811\n      Temp: 15~20\n    \n    \n      652\n      20.4\n      76.554679\n      38.924088\n      Temp: 20~25\n    \n    \n      653\n      18.3\n      68.666079\n      41.765212\n      Temp: 15~20\n    \n    \n      654\n      12.8\n      42.771364\n      36.842022\n      Temp: 10~15\n    \n    \n      655\n      6.7\n      30.736731\n      37.715537\n      Temp: 5~10\n    \n  \n\n656 rows × 4 columns\n\n\n\n\nggplot(data=df2.assign(temp2=list(map(cut,df2.temp))))+\\\ngeom_point(aes(x='icecream',y='disease',colour='temp2'),alpha=0.2)+\\\ngeom_smooth(aes(x='icecream',y='disease',colour='temp2'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8762005194073)>\n\n\n\n이번엔 partial corr도 유의미하게 나옴\n\n- 단순 corr을 봐서는 “온도->아이스크림,소아마비” 인지, “온도->아이스크림->소아마비” 인지 알기 어렵다.\n\ndf.corr()\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n    \n  \n  \n    \n      temp\n      1.000000\n      0.884366\n      0.975609\n    \n    \n      icecream\n      0.884366\n      1.000000\n      0.862990\n    \n    \n      disease\n      0.975609\n      0.862990\n      1.000000\n    \n  \n\n\n\n\n\ndf2.corr()\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n    \n  \n  \n    \n      temp\n      1.000000\n      0.884366\n      0.725505\n    \n    \n      icecream\n      0.884366\n      1.000000\n      0.830539\n    \n    \n      disease\n      0.725505\n      0.830539\n      1.000000"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson18.html#fifa23-data",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson18.html#fifa23-data",
    "title": "Lesson 18: FIFA23 자료분석",
    "section": "FIFA23 data",
    "text": "FIFA23 data\n- FIFA23라는 축구게임이 있음\n- 게임에 실제 선수들이 나오면서 선수들의 능력치가 세밀하게 구현되어 있음\n- 선수들 능력치에 대한 데이터셋은 캐글에 공개되어 있음 - https://www.kaggle.com/datasets/bryanb/fifa-player-stats-database?select=FIFA23_official_data.csv"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson18.html#데이터살펴보기",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson18.html#데이터살펴보기",
    "title": "Lesson 18: FIFA23 자료분석",
    "section": "데이터살펴보기",
    "text": "데이터살펴보기\n- 일단 살펴보기\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n    \n  \n\n5 rows × 29 columns\n\n\n\n트랜스포즈하여 보는 것이 편할때도 있음\n\ndf.T\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      ...\n      17650\n      17651\n      17652\n      17653\n      17654\n      17655\n      17656\n      17657\n      17658\n      17659\n    \n  \n  \n    \n      ID\n      209658\n      212198\n      224334\n      192985\n      224232\n      212622\n      197445\n      187961\n      208333\n      210514\n      ...\n      256879\n      269546\n      267647\n      253186\n      267461\n      269526\n      267946\n      270567\n      256624\n      256376\n    \n    \n      Name\n      L. Goretzka\n      Bruno Fernandes\n      M. Acuña\n      K. De Bruyne\n      N. Barella\n      J. Kimmich\n      D. Alaba\n      22 Paulinho\n      E. Can\n      João Cancelo\n      ...\n      22 G. Leijon\n      Wu Fei\n      22 E. Grosz\n      22 S. Booth\n      22 L. Grimpe\n      Deng Xiongtao\n      22 Lim Jun Sub\n      A. Demir\n      21 S. Czajor\n      21 F. Jakobsson\n    \n    \n      Age\n      27\n      27\n      30\n      31\n      25\n      27\n      30\n      32\n      28\n      28\n      ...\n      19\n      32\n      18\n      20\n      17\n      19\n      17\n      25\n      18\n      20\n    \n    \n      Photo\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      https://cdn.sofifa.net/players/212/622/23_60.png\n      https://cdn.sofifa.net/players/197/445/23_60.png\n      https://cdn.sofifa.net/players/187/961/22_60.png\n      https://cdn.sofifa.net/players/208/333/23_60.png\n      https://cdn.sofifa.net/players/210/514/23_60.png\n      ...\n      https://cdn.sofifa.net/players/256/879/22_60.png\n      https://cdn.sofifa.net/players/269/546/23_60.png\n      https://cdn.sofifa.net/players/267/647/22_60.png\n      https://cdn.sofifa.net/players/253/186/22_60.png\n      https://cdn.sofifa.net/players/267/461/22_60.png\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      https://cdn.sofifa.net/players/256/376/21_60.png\n    \n    \n      Nationality\n      Germany\n      Portugal\n      Argentina\n      Belgium\n      Italy\n      Germany\n      Austria\n      Brazil\n      Germany\n      Portugal\n      ...\n      Sweden\n      China PR\n      Romania\n      England\n      Germany\n      China PR\n      Korea Republic\n      Turkey\n      Poland\n      Sweden\n    \n    \n      Flag\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/pt.png\n      https://cdn.sofifa.net/flags/ar.png\n      https://cdn.sofifa.net/flags/be.png\n      https://cdn.sofifa.net/flags/it.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/at.png\n      https://cdn.sofifa.net/flags/br.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/pt.png\n      ...\n      https://cdn.sofifa.net/flags/se.png\n      https://cdn.sofifa.net/flags/cn.png\n      https://cdn.sofifa.net/flags/ro.png\n      https://cdn.sofifa.net/flags/gb-eng.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/cn.png\n      https://cdn.sofifa.net/flags/kr.png\n      https://cdn.sofifa.net/flags/tr.png\n      https://cdn.sofifa.net/flags/pl.png\n      https://cdn.sofifa.net/flags/se.png\n    \n    \n      Overall\n      87\n      86\n      85\n      91\n      86\n      89\n      86\n      83\n      82\n      88\n      ...\n      52\n      51\n      52\n      51\n      54\n      48\n      48\n      51\n      50\n      50\n    \n    \n      Potential\n      88\n      87\n      85\n      91\n      89\n      90\n      86\n      83\n      82\n      88\n      ...\n      62\n      51\n      70\n      60\n      68\n      61\n      64\n      56\n      65\n      61\n    \n    \n      Club\n      FC Bayern München\n      Manchester United\n      Sevilla FC\n      Manchester City\n      Inter\n      FC Bayern München\n      Real Madrid CF\n      Al Ahli\n      Borussia Dortmund\n      Manchester City\n      ...\n      Örebro SK\n      Wuhan Three Towns\n      Gaz Metan Mediaş\n      Crewe Alexandra\n      RB Leipzig\n      Meizhou Hakka\n      Jeju United FC\n      Ümraniyespor\n      Fleetwood Town\n      IFK Norrköping\n    \n    \n      Club Logo\n      https://cdn.sofifa.net/teams/21/30.png\n      https://cdn.sofifa.net/teams/11/30.png\n      https://cdn.sofifa.net/teams/481/30.png\n      https://cdn.sofifa.net/teams/10/30.png\n      https://cdn.sofifa.net/teams/44/30.png\n      https://cdn.sofifa.net/teams/21/30.png\n      https://cdn.sofifa.net/teams/243/30.png\n      https://cdn.sofifa.net/teams/112387/30.png\n      https://cdn.sofifa.net/teams/22/30.png\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      https://cdn.sofifa.net/teams/705/30.png\n      https://cdn.sofifa.net/teams/116361/30.png\n      https://cdn.sofifa.net/teams/112637/30.png\n      https://cdn.sofifa.net/teams/121/30.png\n      https://cdn.sofifa.net/teams/112172/30.png\n      https://cdn.sofifa.net/teams/114628/30.png\n      https://cdn.sofifa.net/teams/1478/30.png\n      https://cdn.sofifa.net/teams/113796/30.png\n      https://cdn.sofifa.net/teams/112260/30.png\n      https://cdn.sofifa.net/teams/702/30.png\n    \n    \n      Value\n      €91M\n      €78.5M\n      €46.5M\n      €107.5M\n      €89.5M\n      €105.5M\n      €55.5M\n      €28.5M\n      €30.5M\n      €82.5M\n      ...\n      €150K\n      €30K\n      €180K\n      €110K\n      €210K\n      €100K\n      €100K\n      €70K\n      €90K\n      €90K\n    \n    \n      Wage\n      €115K\n      €190K\n      €46K\n      €350K\n      €110K\n      €130K\n      €220K\n      €61K\n      €63K\n      €250K\n      ...\n      €500\n      €2K\n      €500\n      €850\n      €500\n      €500\n      €500\n      €2K\n      €500\n      €500\n    \n    \n      Special\n      2312\n      2305\n      2303\n      2303\n      2296\n      2283\n      2277\n      2273\n      2271\n      2262\n      ...\n      779\n      777\n      775\n      768\n      767\n      762\n      761\n      759\n      758\n      749\n    \n    \n      Preferred Foot\n      Right\n      Right\n      Left\n      Right\n      Right\n      Right\n      Left\n      Right\n      Right\n      Right\n      ...\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Left\n    \n    \n      International Reputation\n      4.0\n      3.0\n      2.0\n      4.0\n      3.0\n      4.0\n      4.0\n      3.0\n      3.0\n      3.0\n      ...\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      Weak Foot\n      4.0\n      3.0\n      3.0\n      5.0\n      3.0\n      4.0\n      4.0\n      4.0\n      4.0\n      4.0\n      ...\n      3.0\n      2.0\n      2.0\n      2.0\n      3.0\n      3.0\n      2.0\n      2.0\n      2.0\n      2.0\n    \n    \n      Skill Moves\n      3.0\n      4.0\n      3.0\n      4.0\n      3.0\n      3.0\n      3.0\n      4.0\n      3.0\n      4.0\n      ...\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      Work Rate\n      High/ Medium\n      High/ High\n      High/ High\n      High/ High\n      High/ High\n      High/ Medium\n      Medium/ Medium\n      High/ High\n      Medium/ High\n      High/ Medium\n      ...\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n    \n    \n      Body Type\n      Unique\n      Unique\n      Stocky (170-185)\n      Unique\n      Normal (170-)\n      Normal (170-185)\n      Normal (170-185)\n      Normal (170-185)\n      Stocky (185+)\n      Unique\n      ...\n      Normal (185+)\n      Normal (185+)\n      Lean (185+)\n      Lean (185+)\n      Lean (185+)\n      Normal (185+)\n      Lean (185+)\n      Lean (185+)\n      Normal (185+)\n      Normal (185+)\n    \n    \n      Real Face\n      Yes\n      Yes\n      No\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      ...\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n    \n    \n      Position\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos15\">LCM\n      <span class=\"pos pos7\">LB\n      <span class=\"pos pos13\">RCM\n      <span class=\"pos pos13\">RCM\n      <span class=\"pos pos9\">RDM\n      <span class=\"pos pos6\">LCB\n      <span class=\"pos pos15\">LCM\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos7\">LB\n      ...\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n    \n    \n      Joined\n      Jul 1, 2018\n      Jan 30, 2020\n      Sep 14, 2020\n      Aug 30, 2015\n      Sep 1, 2020\n      Jul 1, 2015\n      Jul 1, 2021\n      Jul 22, 2021\n      Feb 18, 2020\n      Aug 7, 2019\n      ...\n      Jun 14, 2020\n      Feb 15, 2019\n      Jul 1, 2020\n      Jul 1, 2019\n      Feb 7, 2022\n      Apr 11, 2022\n      Jan 1, 2022\n      Jun 6, 2021\n      Jan 1, 2020\n      Jan 8, 2020\n    \n    \n      Loaned From\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      Contract Valid Until\n      2026\n      2026\n      2024\n      2025\n      2026\n      2025\n      2026\n      2024\n      2024\n      2027\n      ...\n      2022\n      2022\n      2022\n      2022\n      2023\n      2027\n      2026\n      2023\n      2021\n      2021\n    \n    \n      Height\n      189cm\n      179cm\n      172cm\n      181cm\n      172cm\n      177cm\n      180cm\n      183cm\n      186cm\n      182cm\n      ...\n      188cm\n      186cm\n      190cm\n      195cm\n      186cm\n      190cm\n      195cm\n      190cm\n      187cm\n      186cm\n    \n    \n      Weight\n      82kg\n      69kg\n      69kg\n      70kg\n      68kg\n      75kg\n      78kg\n      80kg\n      86kg\n      74kg\n      ...\n      81kg\n      78kg\n      70kg\n      80kg\n      78kg\n      78kg\n      84kg\n      82kg\n      79kg\n      78kg\n    \n    \n      Release Clause\n      €157M\n      €155M\n      €97.7M\n      €198.9M\n      €154.4M\n      €182M\n      €113.8M\n      €48.5M\n      €51.9M\n      €152.6M\n      ...\n      €218K\n      €47K\n      €356K\n      €215K\n      €488K\n      €218K\n      €188K\n      €142K\n      €214K\n      €131K\n    \n    \n      Kit Number\n      8.0\n      8.0\n      19.0\n      17.0\n      23.0\n      6.0\n      4.0\n      15.0\n      23.0\n      7.0\n      ...\n      33.0\n      1.0\n      99.0\n      27.0\n      43.0\n      35.0\n      21.0\n      12.0\n      40.0\n      30.0\n    \n    \n      Best Overall Rating\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n29 rows × 17660 columns\n\n\n\n- column이름조사\n\ndf.keys()\n\nIndex(['ID', 'Name', 'Age', 'Photo', 'Nationality', 'Flag', 'Overall',\n       'Potential', 'Club', 'Club Logo', 'Value', 'Wage', 'Special',\n       'Preferred Foot', 'International Reputation', 'Weak Foot',\n       'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position',\n       'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight',\n       'Release Clause', 'Kit Number', 'Best Overall Rating'],\n      dtype='object')\n\n\n\n이름에 space가 있어서 좀 거슬림\n\n- 각 column 별로 자료형조사\n\npd.DataFrame({'colname':df.keys(), 'dtype':[df[key].dtype for key in df.keys()]})\n\n\n\n\n\n  \n    \n      \n      colname\n      dtype\n    \n  \n  \n    \n      0\n      ID\n      int64\n    \n    \n      1\n      Name\n      object\n    \n    \n      2\n      Age\n      int64\n    \n    \n      3\n      Photo\n      object\n    \n    \n      4\n      Nationality\n      object\n    \n    \n      5\n      Flag\n      object\n    \n    \n      6\n      Overall\n      int64\n    \n    \n      7\n      Potential\n      int64\n    \n    \n      8\n      Club\n      object\n    \n    \n      9\n      Club Logo\n      object\n    \n    \n      10\n      Value\n      object\n    \n    \n      11\n      Wage\n      object\n    \n    \n      12\n      Special\n      int64\n    \n    \n      13\n      Preferred Foot\n      object\n    \n    \n      14\n      International Reputation\n      float64\n    \n    \n      15\n      Weak Foot\n      float64\n    \n    \n      16\n      Skill Moves\n      float64\n    \n    \n      17\n      Work Rate\n      object\n    \n    \n      18\n      Body Type\n      object\n    \n    \n      19\n      Real Face\n      object\n    \n    \n      20\n      Position\n      object\n    \n    \n      21\n      Joined\n      object\n    \n    \n      22\n      Loaned From\n      object\n    \n    \n      23\n      Contract Valid Until\n      object\n    \n    \n      24\n      Height\n      object\n    \n    \n      25\n      Weight\n      object\n    \n    \n      26\n      Release Clause\n      object\n    \n    \n      27\n      Kit Number\n      float64\n    \n    \n      28\n      Best Overall Rating\n      object\n    \n  \n\n\n\n\n- 결측치조사\n\npd.DataFrame({'colname':df.keys(), \n              'dtype':[df[key].dtype for key in df.keys()],\n              'na':[df[key].isna().sum() for key in df.keys()]\n             })\n\n\n\n\n\n  \n    \n      \n      colname\n      dtype\n      na\n    \n  \n  \n    \n      0\n      ID\n      int64\n      0\n    \n    \n      1\n      Name\n      object\n      0\n    \n    \n      2\n      Age\n      int64\n      0\n    \n    \n      3\n      Photo\n      object\n      0\n    \n    \n      4\n      Nationality\n      object\n      0\n    \n    \n      5\n      Flag\n      object\n      0\n    \n    \n      6\n      Overall\n      int64\n      0\n    \n    \n      7\n      Potential\n      int64\n      0\n    \n    \n      8\n      Club\n      object\n      211\n    \n    \n      9\n      Club Logo\n      object\n      0\n    \n    \n      10\n      Value\n      object\n      0\n    \n    \n      11\n      Wage\n      object\n      0\n    \n    \n      12\n      Special\n      int64\n      0\n    \n    \n      13\n      Preferred Foot\n      object\n      0\n    \n    \n      14\n      International Reputation\n      float64\n      0\n    \n    \n      15\n      Weak Foot\n      float64\n      0\n    \n    \n      16\n      Skill Moves\n      float64\n      0\n    \n    \n      17\n      Work Rate\n      object\n      0\n    \n    \n      18\n      Body Type\n      object\n      38\n    \n    \n      19\n      Real Face\n      object\n      38\n    \n    \n      20\n      Position\n      object\n      35\n    \n    \n      21\n      Joined\n      object\n      1098\n    \n    \n      22\n      Loaned From\n      object\n      16966\n    \n    \n      23\n      Contract Valid Until\n      object\n      361\n    \n    \n      24\n      Height\n      object\n      0\n    \n    \n      25\n      Weight\n      object\n      0\n    \n    \n      26\n      Release Clause\n      object\n      1151\n    \n    \n      27\n      Kit Number\n      float64\n      35\n    \n    \n      28\n      Best Overall Rating\n      object\n      17639\n    \n  \n\n\n\n\n(퀴즈) 열의선택: 결측치가 10000개 이상인 열을 보고싶다면?\n\ndf.loc[:,[df[key].isna().sum()>10000 for key in df.keys()]]\n\n\n\n\n\n  \n    \n      \n      Loaned From\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n    \n    \n      1\n      NaN\n      NaN\n    \n    \n      2\n      NaN\n      NaN\n    \n    \n      3\n      NaN\n      NaN\n    \n    \n      4\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      17655\n      NaN\n      NaN\n    \n    \n      17656\n      NaN\n      NaN\n    \n    \n      17657\n      NaN\n      NaN\n    \n    \n      17658\n      NaN\n      NaN\n    \n    \n      17659\n      NaN\n      NaN\n    \n  \n\n17660 rows × 2 columns\n\n\n\n- .info()\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 17660 entries, 0 to 17659\nData columns (total 29 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   ID                        17660 non-null  int64  \n 1   Name                      17660 non-null  object \n 2   Age                       17660 non-null  int64  \n 3   Photo                     17660 non-null  object \n 4   Nationality               17660 non-null  object \n 5   Flag                      17660 non-null  object \n 6   Overall                   17660 non-null  int64  \n 7   Potential                 17660 non-null  int64  \n 8   Club                      17449 non-null  object \n 9   Club Logo                 17660 non-null  object \n 10  Value                     17660 non-null  object \n 11  Wage                      17660 non-null  object \n 12  Special                   17660 non-null  int64  \n 13  Preferred Foot            17660 non-null  object \n 14  International Reputation  17660 non-null  float64\n 15  Weak Foot                 17660 non-null  float64\n 16  Skill Moves               17660 non-null  float64\n 17  Work Rate                 17660 non-null  object \n 18  Body Type                 17622 non-null  object \n 19  Real Face                 17622 non-null  object \n 20  Position                  17625 non-null  object \n 21  Joined                    16562 non-null  object \n 22  Loaned From               694 non-null    object \n 23  Contract Valid Until      17299 non-null  object \n 24  Height                    17660 non-null  object \n 25  Weight                    17660 non-null  object \n 26  Release Clause            16509 non-null  object \n 27  Kit Number                17625 non-null  float64\n 28  Best Overall Rating       21 non-null     object \ndtypes: float64(4), int64(5), object(20)\nmemory usage: 3.9+ MB\n\n\n- .describe(): 숫자들이 저장된 column에 대하여 기본통계량 조사\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      ID\n      Age\n      Overall\n      Potential\n      Special\n      International Reputation\n      Weak Foot\n      Skill Moves\n      Kit Number\n    \n  \n  \n    \n      count\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17625.000000\n    \n    \n      mean\n      246319.424462\n      23.127746\n      63.369592\n      70.981200\n      1537.915855\n      1.106285\n      2.900340\n      2.297169\n      25.037957\n    \n    \n      std\n      31487.892861\n      4.639821\n      8.036268\n      6.529836\n      285.893809\n      0.407021\n      0.663523\n      0.754264\n      19.154116\n    \n    \n      min\n      16.000000\n      15.000000\n      43.000000\n      42.000000\n      749.000000\n      1.000000\n      1.000000\n      1.000000\n      1.000000\n    \n    \n      25%\n      240732.500000\n      20.000000\n      58.000000\n      67.000000\n      1387.000000\n      1.000000\n      3.000000\n      2.000000\n      11.000000\n    \n    \n      50%\n      257041.000000\n      22.000000\n      63.000000\n      71.000000\n      1548.000000\n      1.000000\n      3.000000\n      2.000000\n      22.000000\n    \n    \n      75%\n      263027.500000\n      26.000000\n      69.000000\n      75.000000\n      1727.000000\n      1.000000\n      3.000000\n      3.000000\n      32.000000\n    \n    \n      max\n      271340.000000\n      54.000000\n      91.000000\n      95.000000\n      2312.000000\n      5.000000\n      5.000000\n      5.000000\n      99.000000\n    \n  \n\n\n\n\n- pandas_profiling.ProfileReport()을 이용한 전체적인 조사\n\n# pandas_profiling.ProfileReport(df).to_file('fifa2023_reprot.html')\n\n- 특정열을 중심으로 정렬하여 보기\n\ndf.sort_values(by='Overall',ascending=False).reset_index()\n\n\n\n\n\n  \n    \n      \n      index\n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      41\n      188545\n      R. Lewandowski\n      33\n      https://cdn.sofifa.net/players/188/545/23_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      91\n      91\n      FC Barcelona\n      ...\n      Yes\n      <span class=\"pos pos25\">ST\n      Jul 18, 2022\n      NaN\n      2025\n      185cm\n      81kg\n      €172.2M\n      9.0\n      NaN\n    \n    \n      1\n      124\n      165153\n      K. Benzema\n      34\n      https://cdn.sofifa.net/players/165/153/23_60.png\n      France\n      https://cdn.sofifa.net/flags/fr.png\n      91\n      91\n      Real Madrid CF\n      ...\n      Yes\n      <span class=\"pos pos21\">CF\n      Jul 9, 2009\n      NaN\n      2023\n      185cm\n      81kg\n      €131.2M\n      9.0\n      NaN\n    \n    \n      2\n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n    \n    \n      3\n      56\n      158023\n      L. Messi\n      35\n      https://cdn.sofifa.net/players/158/023/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      91\n      91\n      Paris Saint-Germain\n      ...\n      Yes\n      <span class=\"pos pos23\">RW\n      Aug 10, 2021\n      NaN\n      2023\n      169cm\n      67kg\n      €99.9M\n      30.0\n      NaN\n    \n    \n      4\n      75\n      231747\n      K. Mbappé\n      23\n      https://cdn.sofifa.net/players/231/747/23_60.png\n      France\n      https://cdn.sofifa.net/flags/fr.png\n      91\n      95\n      Paris Saint-Germain\n      ...\n      Yes\n      <span class=\"pos pos25\">ST\n      Jul 1, 2018\n      NaN\n      2025\n      182cm\n      73kg\n      €366.7M\n      7.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      15513\n      266751\n      22 Jung Ho Yeon\n      20\n      https://cdn.sofifa.net/players/266/751/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      45\n      53\n      GwangJu FC\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 20, 2022\n      NaN\n      2026\n      180cm\n      73kg\n      €145K\n      23.0\n      NaN\n    \n    \n      17656\n      16215\n      268279\n      22 J. Looschen\n      24\n      https://cdn.sofifa.net/players/268/279/22_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      44\n      47\n      SV Meppen\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Mar 19, 2022\n      NaN\n      2026\n      178cm\n      78kg\n      €92K\n      42.0\n      NaN\n    \n    \n      17657\n      16042\n      255283\n      20 Kim Yeong Geun\n      22\n      https://cdn.sofifa.net/players/255/283/20_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      44\n      49\n      Gyeongnam FC\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 9, 2020\n      NaN\n      2020\n      174cm\n      71kg\n      €53K\n      43.0\n      NaN\n    \n    \n      17658\n      14634\n      269038\n      22 Zhang Wenxuan\n      16\n      https://cdn.sofifa.net/players/269/038/22_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      44\n      59\n      Guangzhou FC\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      May 1, 2022\n      NaN\n      2022\n      175cm\n      70kg\n      €239K\n      29.0\n      NaN\n    \n    \n      17659\n      17618\n      168933\n      07 I. Paskov\n      33\n      https://cdn.sofifa.net/players/168/933/07_60.png\n      Bulgaria\n      https://cdn.sofifa.net/flags/bg.png\n      43\n      42\n      NaN\n      ...\n      NaN\n      <span class=\"pos pos28\">SUB\n      NaN\n      NaN\n      NaN\n      184cm\n      79kg\n      NaN\n      24.0\n      NaN\n    \n  \n\n17660 rows × 30 columns\n\n\n\n- 특정열을 중심으로 그룹화하여 보기 (\\(\\star\\))\n\ndf.Nationality.unique() # 데이터셋에 포함된 나라들 출력\n\narray(['Germany', 'Portugal', 'Argentina', 'Belgium', 'Italy', 'Austria',\n       'Brazil', 'Croatia', 'Serbia', 'Spain', 'Netherlands', 'France',\n       'Colombia', 'England', 'Uruguay', 'Morocco', 'Egypt', 'Algeria',\n       'Ukraine', 'United States', \"Côte d'Ivoire\", 'Poland', 'Chile',\n       'Senegal', 'Central African Republic', 'Denmark', 'Nigeria',\n       'Mexico', 'Turkey', 'Canada', 'Wales', 'Scotland', 'Romania',\n       'Czech Republic', 'Ghana', 'Korea Republic',\n       'Bosnia and Herzegovina', 'Mali', 'Slovakia', 'Armenia', 'Norway',\n       'Switzerland', 'Cameroon', 'Peru', 'Jamaica', 'Zambia', 'Guinea',\n       'Sweden', 'North Macedonia', 'Russia', 'Tunisia', 'Malta',\n       'Angola', 'Republic of Ireland', 'Ecuador', 'Benin', 'Paraguay',\n       'Montenegro', 'Australia', 'Comoros', 'Gabon', 'Iceland',\n       'Slovenia', 'Japan', 'Israel', 'China PR', 'Venezuela', 'Liberia',\n       'Greece', 'Bulgaria', 'Honduras', 'Saudi Arabia', 'Curacao',\n       'Northern Ireland', 'Guinea Bissau', 'Kosovo', 'Hungary',\n       'Finland', 'Costa Rica', 'Albania', 'Congo DR', 'Iran',\n       'Mozambique', 'Suriname', 'Cape Verde Islands', 'Bolivia',\n       'Madagascar', 'New Zealand', 'Burkina Faso', 'Dominican Republic',\n       'Kazakhstan', 'Syria', 'Luxembourg', 'Kenya', 'Zimbabwe', 'Haiti',\n       'Uzbekistan', 'South Africa', 'Cyprus', 'Qatar',\n       'Equatorial Guinea', 'Libya', 'Thailand', 'Togo',\n       'Trinidad and Tobago', 'Liechtenstein', 'Gambia', 'Georgia',\n       'Philippines', 'Burundi', 'United Arab Emirates', 'Grenada',\n       'Iraq', 'Panama', 'Malaysia', 'Moldova', 'Congo', 'India',\n       'Jordan', 'Kuwait', 'Antigua and Barbuda', 'Cuba', 'Vietnam',\n       'Korea DPR', 'Uganda', 'Lithuania', 'Estonia', 'Montserrat',\n       'Sierra Leone', 'Afghanistan', 'New Caledonia', 'Belarus', 'Laos',\n       'Saint Lucia', 'Bhutan', 'Guyana', 'Mauritania', 'Faroe Islands',\n       'Namibia', 'Niger', 'Palestine', 'Sudan', 'Azerbaijan',\n       'Hong Kong', 'Gibraltar', 'Tanzania', 'Latvia', 'Chinese Taipei',\n       'Singapore', 'Lebanon', 'El Salvador', 'Indonesia', 'Guatemala',\n       'Papua New Guinea', 'Puerto Rico', 'Malawi', 'South Sudan',\n       'Ethiopia', 'San Marino', 'Andorra', 'Saint Kitts and Nevis'],\n      dtype=object)\n\n\n\ndf.groupby(by='Nationality')[['Overall']].agg({np.mean,len}).sort_values(('Overall', 'mean'),ascending=False)\n\n\n\n\n\n  \n    \n      \n      Overall\n    \n    \n      \n      mean\n      len\n    \n    \n      Nationality\n      \n      \n    \n  \n  \n    \n      Philippines\n      74.000000\n      1\n    \n    \n      Namibia\n      72.000000\n      1\n    \n    \n      Mozambique\n      72.000000\n      2\n    \n    \n      Kuwait\n      71.000000\n      1\n    \n    \n      Brazil\n      70.556586\n      539\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      San Marino\n      53.000000\n      1\n    \n    \n      China PR\n      52.230769\n      325\n    \n    \n      South Sudan\n      52.000000\n      5\n    \n    \n      India\n      51.994681\n      188\n    \n    \n      Saint Kitts and Nevis\n      51.000000\n      1\n    \n  \n\n161 rows × 2 columns\n\n\n\n\ngroupby는 나중에 다시 설명 합니다."
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson18.html#데이터정리하기",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson18.html#데이터정리하기",
    "title": "Lesson 18: FIFA23 자료분석",
    "section": "데이터정리하기",
    "text": "데이터정리하기\n- 칼럼이름변경\n\ndf.set_axis(pd.Index(map(lambda x: x.replace(' ','_'), df.columns)), axis=1)\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club_Logo\n      ...\n      Real_Face\n      Position\n      Joined\n      Loaned_From\n      Contract_Valid_Until\n      Height\n      Weight\n      Release_Clause\n      Kit_Number\n      Best_Overall_Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n- 결측치제거\n\ndf.drop(columns=['Loaned From', 'Best Overall Rating']).dropna()\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Work Rate\n      Body Type\n      Real Face\n      Position\n      Joined\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      High/ Medium\n      Unique\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      High/ High\n      Stocky (170-185)\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      High/ High\n      Normal (170-)\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n    \n  \n\n16364 rows × 27 columns\n\n\n\n- Height, Weight의 자료형을 float형으로 수정하기\n\ndf.assign(\n    Height= list(map(lambda x: float(x[:-2]), df.Height)),\n    Weight= list(map(lambda x: float(x[:-2]), df.Weight))\n)\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189.0\n      82.0\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179.0\n      69.0\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172.0\n      69.0\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181.0\n      70.0\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172.0\n      68.0\n      €154.4M\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190.0\n      78.0\n      €218K\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195.0\n      84.0\n      €188K\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190.0\n      82.0\n      €142K\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187.0\n      79.0\n      €214K\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186.0\n      78.0\n      €131K\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n- Release Clause의 자료형을 float으로 수정하기\n\ndf['Release Clause']\n\n0          €157M\n1          €155M\n2         €97.7M\n3        €198.9M\n4        €154.4M\n          ...   \n17655      €218K\n17656      €188K\n17657      €142K\n17658      €214K\n17659      €131K\nName: Release Clause, Length: 17660, dtype: object\n\n\n\n_f = lambda x: float(x[1:-1])*1000 if x[-1]=='K' else float(x[1:-1])*1000000\n\n\n_f('€157M')\n\n157000000.0\n\n\n\n_f('€131K')\n\n131000.0\n\n\n(시도1–실패)\n\nlist(map(_f,df['Release Clause']))\n\nTypeError: 'float' object is not subscriptable\n\n\n(시도1이 실패한 이유)\n\ndf['Release Clause'].isna().sum() # 이 column에는 1151개의 결측치가 존재\n\n1151\n\n\n(nan에 대한 예비학습)\n\ndf.loc[df['Release Clause'].isna(), 'Release Clause']\n\n18       NaN\n34       NaN\n38       NaN\n49       NaN\n50       NaN\n        ... \n17378    NaN\n17386    NaN\n17535    NaN\n17590    NaN\n17618    NaN\nName: Release Clause, Length: 1151, dtype: object\n\n\n\ndf.loc[18, 'Release Clause']\n\nnan\n\n\n\npd.isna(df.loc[18, 'Release Clause'])\n\nTrue\n\n\n\ntype(df.loc[18, 'Release Clause'])\n\nfloat\n\n\n\ndf.loc[18, 'Release Clause'][-1]\n\nTypeError: 'float' object is not subscriptable\n\n\n(시도2–성공)\n\ndf.rename(columns={'Release Clause':'ReleaseClause'})\\\n.assign(ReleaseClause = list(map(lambda x: _f(x) if pd.isna(x)==False else x , df['Release Clause'])))\\\n.rename(columns={'ReleaseClause':'Release Clause'})\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      157000000.0\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      155000000.0\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      97700000.0\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      198900000.0\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      154400000.0\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190cm\n      78kg\n      218000.0\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195cm\n      84kg\n      188000.0\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190cm\n      82kg\n      142000.0\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187cm\n      79kg\n      214000.0\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186cm\n      78kg\n      131000.0\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n(시도3–성공) 그냥 결측치를 제거하고 변형해도 무방..\n\ndf2 = df.drop(columns=['Loaned From', 'Best Overall Rating']).dropna()\ndf2['Release Clause'] = list(map(lambda x: _f(x) if pd.isna(x)==False else x , df2['Release Clause']))\ndf2\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Work Rate\n      Body Type\n      Real Face\n      Position\n      Joined\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      High/ Medium\n      Unique\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      2026\n      189cm\n      82kg\n      157000000.0\n      8.0\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      2026\n      179cm\n      69kg\n      155000000.0\n      8.0\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      High/ High\n      Stocky (170-185)\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      2024\n      172cm\n      69kg\n      97700000.0\n      19.0\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      2025\n      181cm\n      70kg\n      198900000.0\n      17.0\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      High/ High\n      Normal (170-)\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      2026\n      172cm\n      68kg\n      154400000.0\n      23.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      2027\n      190cm\n      78kg\n      218000.0\n      35.0\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      2026\n      195cm\n      84kg\n      188000.0\n      21.0\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      2023\n      190cm\n      82kg\n      142000.0\n      12.0\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      2021\n      187cm\n      79kg\n      214000.0\n      40.0\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      2021\n      186cm\n      78kg\n      131000.0\n      30.0\n    \n  \n\n16364 rows × 27 columns\n\n\n\n\n분석의 편의를 위하여 (1) colnames를 변경하고 (2) 결측치를 제거하고 (3) 몇 가지 전 처리를 추가로 진행한 뒤 df2를 만들어서 분석하는게 좋음"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson18.html#데이터분석시각화",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson18.html#데이터분석시각화",
    "title": "Lesson 18: FIFA23 자료분석",
    "section": "데이터분석+시각화",
    "text": "데이터분석+시각화\n- Overall vs Potential\n\nggplot(data=df) + geom_point(aes(x='Overall',y='Potential'))\n\n\n\n\n<ggplot: (8772275859669)>\n\n\n\n뭔가 Potential > Overall 인 관계가 성립하는 듯 하다. \\(\\to\\) 우리가 생각하는 포텐셜의 의미는 사실 Potential2 = Potential - Overall 에 더 가깝다. \\(\\to\\) Potential2 = Potential - Overall 인 변수를 새로 만들고 시각화 해보자.\n\n- Potential2 = Potential - Overall 를 계산하여 새로운 열을 추가하자.\n\ndf.eval('Potential2 = Potential - Overall')\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n      Potential2\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n      NaN\n      1\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n      NaN\n      1\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n      NaN\n      0\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n      0\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n      3\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n      13\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n      16\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n      5\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n      15\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n      11\n    \n  \n\n17660 rows × 30 columns\n\n\n\n- 수정된 데이터프레임으로 다시 시각화를 하자.\n\nggplot(data=df.eval('Potential2 = Potential - Overall'))\\\n+ geom_point(aes(x='Overall',y='Potential2'),alpha=0.01)\n\n\n\n\n<ggplot: (8772307230189)>\n\n\n- 일부점들이 겹치므로 position = ’jitter’를 사용하여 점들을 흩뿌리자.\n\nggplot(data=df.eval('Potential2 = Potential - Overall'))\\\n+ geom_point(aes(x='Overall',y='Potential2'),alpha=0.05,position='jitter')\n\n\n\n\n<ggplot: (8772275596573)>\n\n\n- 해석 - 해석1: Overall, Potential2는 음의 상관관계가 있다. - 해석2: 0근처에 데이터가 많음 \\(\\to\\) 이미 은퇴한 선수들이 아닐까? - 해석3: Overall의 값이 작을수록 Potential2의 분산이 크다.\n- 은퇴한 선수들은 제외하고 시각화하자.\n\nggplot(data=df.eval('Potential2 = Potential - Overall').query('Potential2 > 1'))\\\n+ geom_point(aes(x='Overall',y='Potential2'),alpha=0.05,position='jitter')\n\n\n\n\n<ggplot: (8772275556513)>\n\n\n- Overall에 따라서 구간을 나누고 그 구간에 대응하는 boxplot을 그리자.\n\ndf.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.Overall.describe()\n\ncount    13644.000000\nmean        61.415347\nstd          7.247821\nmin         44.000000\n25%         56.000000\n50%         61.000000\n75%         66.000000\nmax         91.000000\nName: Overall, dtype: float64\n\n\n\ndef f(x):\n    if x>66: \n        y='66<'\n    elif x>61:\n        y='61~66'\n    elif x>56:\n        y='56~61'\n    else:\n        y='<56' \n    return y\n\n\nggplot(data=df.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall))))\\\n    + geom_boxplot(aes(x='Overall_grouped',y='Potential2',color='Overall_grouped'))\n\n\n\n\n<ggplot: (8772275730901)>\n\n\n\nOverall_grouped = “<56” 에 대응하는 점들을 모두 뽑아서 mean(Overall)를 계산하고 그 값을 Overall_grouped = “<56” 에 대응하는 박스플랏의 x축위치로 설정\nOverall_grouped = “56~61” 에 대응하는 점들을 모두 뽑아서 mean(Overall)를 계산하고 그 값을 Overall_grouped = “56~61” 에 대응하는 박스플랏의 x축위치로 설정\nOverall_grouped = “61~66” 에 대응하는 점들을 모두 뽑아서 mean(Overall)를 계산하고 그 값을 Overall_grouped = “61~66” 에 대응하는 박스플랏의 x축위치로 설정\nOverall_grouped = “66<” 에 대응하는 점들을 모두 뽑아서 mean(Overall)를 계산하고 그 값을 Overall_grouped = “66<” 에 대응하는 박스플랏의 x축위치로 설정\n\n\ndf.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall)))\\\n.query(\"Overall_grouped == '66<'\").Overall.mean()\n\n71.8127687727423\n\n\n(방법1)\n\ndef g(x):\n    if x=='66<': \n        y= 71.8127687727423\n    elif x=='61~66':\n        y= 63.773918342474104\n    elif x=='56~61':\n        y= 59.155840684309005\n    else:\n        y= 52.87743190661479\n    return y\n\n\ndf.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall)))\\\n.assign(Overall_x= lambda df: list(map(g,df.Overall_grouped)))\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n      Potential2\n      Overall_grouped\n      Overall_x\n    \n  \n  \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      10\n      228251\n      L. Pellegrini\n      26\n      https://cdn.sofifa.net/players/228/251/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      84\n      87\n      Roma\n      https://cdn.sofifa.net/teams/52/30.png\n      ...\n      NaN\n      2026\n      186cm\n      77kg\n      €97.6M\n      7.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      13\n      225193\n      Merino\n      26\n      https://cdn.sofifa.net/players/225/193/23_60.png\n      Spain\n      https://cdn.sofifa.net/flags/es.png\n      83\n      86\n      Real Sociedad\n      https://cdn.sofifa.net/teams/457/30.png\n      ...\n      NaN\n      2025\n      189cm\n      83kg\n      €102.2M\n      8.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      17\n      228702\n      F. de Jong\n      25\n      https://cdn.sofifa.net/players/228/702/23_60.png\n      Netherlands\n      https://cdn.sofifa.net/flags/nl.png\n      87\n      92\n      FC Barcelona\n      https://cdn.sofifa.net/teams/241/30.png\n      ...\n      NaN\n      2026\n      180cm\n      74kg\n      €247.6M\n      21.0\n      NaN\n      5\n      66<\n      71.812769\n    \n    \n      21\n      231281\n      T. Alexander-Arnold\n      23\n      https://cdn.sofifa.net/players/231/281/23_60.png\n      England\n      https://cdn.sofifa.net/flags/gb-eng.png\n      87\n      90\n      Liverpool\n      https://cdn.sofifa.net/teams/9/30.png\n      ...\n      NaN\n      2025\n      180cm\n      69kg\n      €193.5M\n      66.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n      13\n      <56\n      52.877432\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n      16\n      <56\n      52.877432\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n      5\n      <56\n      52.877432\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n      15\n      <56\n      52.877432\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n      11\n      <56\n      52.877432\n    \n  \n\n13644 rows × 32 columns\n\n\n\n\ndf2= df.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall)))\\\n.assign(Overall_x= lambda df: list(map(g,df.Overall_grouped)))\ndf2\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n      Potential2\n      Overall_grouped\n      Overall_x\n    \n  \n  \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      10\n      228251\n      L. Pellegrini\n      26\n      https://cdn.sofifa.net/players/228/251/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      84\n      87\n      Roma\n      https://cdn.sofifa.net/teams/52/30.png\n      ...\n      NaN\n      2026\n      186cm\n      77kg\n      €97.6M\n      7.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      13\n      225193\n      Merino\n      26\n      https://cdn.sofifa.net/players/225/193/23_60.png\n      Spain\n      https://cdn.sofifa.net/flags/es.png\n      83\n      86\n      Real Sociedad\n      https://cdn.sofifa.net/teams/457/30.png\n      ...\n      NaN\n      2025\n      189cm\n      83kg\n      €102.2M\n      8.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      17\n      228702\n      F. de Jong\n      25\n      https://cdn.sofifa.net/players/228/702/23_60.png\n      Netherlands\n      https://cdn.sofifa.net/flags/nl.png\n      87\n      92\n      FC Barcelona\n      https://cdn.sofifa.net/teams/241/30.png\n      ...\n      NaN\n      2026\n      180cm\n      74kg\n      €247.6M\n      21.0\n      NaN\n      5\n      66<\n      71.812769\n    \n    \n      21\n      231281\n      T. Alexander-Arnold\n      23\n      https://cdn.sofifa.net/players/231/281/23_60.png\n      England\n      https://cdn.sofifa.net/flags/gb-eng.png\n      87\n      90\n      Liverpool\n      https://cdn.sofifa.net/teams/9/30.png\n      ...\n      NaN\n      2025\n      180cm\n      69kg\n      €193.5M\n      66.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n      13\n      <56\n      52.877432\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n      16\n      <56\n      52.877432\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n      5\n      <56\n      52.877432\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n      15\n      <56\n      52.877432\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n      11\n      <56\n      52.877432\n    \n  \n\n13644 rows × 32 columns\n\n\n\n\nggplot(data=df2)\\\n+geom_point(aes(x='Overall',y='Potential2',color='Overall_grouped'),position='jitter',alpha=0.05)\\\n+geom_boxplot(aes(x='Overall_x',y='Potential2',color='Overall_grouped'))\n\n\n\n\n<ggplot: (8772275710537)>\n\n\n(방법2)\n\n_df = df.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall)))\n\n\ndf3=_df.groupby(by=\"Overall_grouped\").agg({'Overall':np.mean}).reset_index()\\\n.rename(columns={'Overall':'Overall_x'}).merge(_df)\n\n\nggplot(data=df3)\\\n+geom_point(aes(x='Overall',y='Potential2',color='Overall_grouped'),position='jitter',alpha=0.05)\\\n+geom_boxplot(aes(x='Overall_x',y='Potential2',color='Overall_grouped'))\n\n\n\n\n<ggplot: (8772275671993)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col",
    "text": "geom_col\n- 예시1: 한국과 일본의 평균능력치 비교\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean}).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      Overall\n    \n  \n  \n    \n      0\n      Japan\n      66.478873\n    \n    \n      1\n      Korea Republic\n      65.457627\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',y='Overall'))\n\n\n\n\n<ggplot: (8739001076625)>\n\n\n- 예시2: 한국과 일본의 평균능력치 비교 (색상변경)\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean}).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      Overall\n    \n  \n  \n    \n      0\n      Japan\n      66.478873\n    \n    \n      1\n      Korea Republic\n      65.457627\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',y='Overall',fill='Nationality'))\n#ggplot(data)+geom_col(aes(x='Nationality',y='Overall',color='Nationality'))\n\n\n\n\n<ggplot: (8739001430581)>\n\n\n- 예시3: 한국과 일본의 평균연령 비교\n\ndata=df.groupby('Nationality').agg({'Age':np.mean}).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      Age\n    \n  \n  \n    \n      0\n      Japan\n      26.084507\n    \n    \n      1\n      Korea Republic\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',y='Age',fill='Nationality'))\n\n\n\n\n<ggplot: (8739000939717)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col-positiondodge",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col-positiondodge",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col + position=‘dodge’",
    "text": "geom_col + position=‘dodge’\n- 예시1: 한국과 일본의 평균연령+평균능력치 비교\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean,'Age':np.mean})\\\n.stack().reset_index().rename({0:'value'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      level_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      66.478873\n    \n    \n      1\n      Japan\n      Age\n      26.084507\n    \n    \n      2\n      Korea Republic\n      Overall\n      65.457627\n    \n    \n      3\n      Korea Republic\n      Age\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='level_1',fill='Nationality',y='value'),position='dodge')\n\n\n\n\n<ggplot: (8739004389489)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col-coord_flip",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col-coord_flip",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col + coord_flip()",
    "text": "geom_col + coord_flip()\n- 예시1: 한국과 일본의 평균연령+평균능력치 비교 (90도회전)\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean,'Age':np.mean})\\\n.stack().reset_index().rename({0:'value'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      level_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      66.478873\n    \n    \n      1\n      Japan\n      Age\n      26.084507\n    \n    \n      2\n      Korea Republic\n      Overall\n      65.457627\n    \n    \n      3\n      Korea Republic\n      Age\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='level_1',fill='Nationality',y='value'),position='dodge')\\\n+coord_flip()\n\n\n\n\n<ggplot: (8739001299161)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col-facet_wrapvar",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col-facet_wrapvar",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col + facet_wrap(var)",
    "text": "geom_col + facet_wrap(var)\n- 예시1: 한국과 일본의 평균연령+평균능력치 비교 (면분할)\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean,'Age':np.mean})\\\n.stack().reset_index().rename({0:'value'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      level_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      66.478873\n    \n    \n      1\n      Japan\n      Age\n      26.084507\n    \n    \n      2\n      Korea Republic\n      Overall\n      65.457627\n    \n    \n      3\n      Korea Republic\n      Age\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',fill='Nationality',y='value'),position='dodge')\\\n+facet_wrap('level_1')\n\n\n\n\n<ggplot: (8739001171105)>\n\n\n- 예시2: 한국과 일본의 평균연령+평균능력치 비교 (면분할)\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean,'Age':np.mean})\\\n.stack().reset_index().rename({0:'value'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      level_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      66.478873\n    \n    \n      1\n      Japan\n      Age\n      26.084507\n    \n    \n      2\n      Korea Republic\n      Overall\n      65.457627\n    \n    \n      3\n      Korea Republic\n      Age\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='level_1',fill='Nationality',y='value'),position='dodge')\\\n+facet_wrap('Nationality')\n\n\n\n\n<ggplot: (8739005005861)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col-facet_gridvar_y-var_x",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_col-facet_gridvar_y-var_x",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col + facet_grid(‘var_y ~ var_x’)",
    "text": "geom_col + facet_grid(‘var_y ~ var_x’)\n- 예시1: 한국과 일본의 평균연령+평균능력치+최대능력치 비교 (면분할)\n\ndata=df.groupby('Nationality').agg({'Overall':[np.mean,np.max],'Age':np.mean})\\\n.melt(ignore_index=False).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      variable_0\n      variable_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      mean\n      66.478873\n    \n    \n      1\n      Korea Republic\n      Overall\n      mean\n      65.457627\n    \n    \n      2\n      Japan\n      Overall\n      amax\n      79.000000\n    \n    \n      3\n      Korea Republic\n      Overall\n      amax\n      89.000000\n    \n    \n      4\n      Japan\n      Age\n      mean\n      26.084507\n    \n    \n      5\n      Korea Republic\n      Age\n      mean\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(fill='Nationality',x='Nationality',y='value'),position='dodge')\\\n+facet_grid('variable_1~variable_0')\n\n\n\n\n<ggplot: (8739001454385)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_bar-vs-geom_col",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_bar-vs-geom_col",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_bar vs geom_col",
    "text": "geom_bar vs geom_col\n- 예시1: 한국과 일본의 단순 선수 숫자 비교 (with goem_col)\n\ndata=df.groupby('Nationality').agg({'Age':'count'}).reset_index().rename({'Age':'count'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      count\n    \n  \n  \n    \n      0\n      Japan\n      284\n    \n    \n      1\n      Korea Republic\n      177\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',fill='Nationality',y='count'))\n\n\n\n\n<ggplot: (8739001309845)>\n\n\n- 예시2: 한국과 일본의 단순 선수 숫자 비교 (with goem_bar)\n\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality'))\n\n\n\n\n<ggplot: (8739003315533)>\n\n\n\n특징1: 원래 데이터프레임 그대로 하는게 아니라 뭔가 변형된 값이 출력 (정확하게는 groupby + count가 변형요소)\n특징2: y는 당연히 count이므로 y를 명시할 필요가 없음. (잘 생각해보면 명시하고 싶어도 명시할 수 없음, y는 groupby + count 에 의해서 계산된 값이고 df자체에는 존재하지 않음)\n\n- 이렇게 약속된 변형은 stat='count' 옵션 때문에 가능함\n\nstat=’count’는 그룹바이이후에 count를 하라는 의미\n\n\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality'),stat='count')\n\n\n\n\n<ggplot: (8739005443049)>\n\n\n- stat='identity' 로 옵션을 바꾸면 약속된 변환이 수행되지 않음\n\nstat=’identity’는 아무 변환도 하지말라는 의미\n\n\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality'),stat='identity')\n\nKeyError: 'y'\n\n\n\n에러가난다.\n\n(참고) 사실 아래의 3개의 코드가 모두 같다. <– 수업시간에 설명 X\n\nggplot(df)+geom_bar(aes(x='Nationality',y='..count..',fill='Nationality'),stat='count')\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality'),stat='count') # y='..count..' 생략,\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality')) # y='..count..' 생략, stat='count' 생략\n\n\n\n\n<ggplot: (8739004080929)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_bar의-불편한점",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#geom_bar의-불편한점",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_bar()의 불편한점",
    "text": "geom_bar()의 불편한점\n- 사실 편하라고 만든것 같은데, 그닥 편하지 않음.\n\n편하라고 만든 점1: groupby를 자동으로 해줘서 groupby를 못하는 유저들이 사용하기 편리하게 함 -> 그런데 우리는 groupby 잘함\n편하라고 만든 점2: groupby이후 count연산을 알아서 해줌 -> 그런데 count연산만 알아서해주고 그 이외의 연산은 잘 지원안됨\n\n- 결론: groupby + count 조합에서만 편리하고 나머지는 편하지 않다.\n- 불편한 예시: 나라별 overall의 평균을 geom_bar()로 플랏해보라.\n\ndata= df.groupby('Nationality').agg({'Overall':np.mean}).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      Overall\n    \n  \n  \n    \n      0\n      Japan\n      66.478873\n    \n    \n      1\n      Korea Republic\n      65.457627\n    \n  \n\n\n\n\n\nggplot(data)+geom_bar(aes(x='Nationality',y='Overall',fill='Nationality'),stat='identity')\nggplot(data)+geom_col(aes(x='Nationality',y='Overall',fill='Nationality'))\n\n\n\n\n<ggplot: (8738999896737)>"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#시각화1-전체합격률",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#시각화1-전체합격률",
    "title": "Lesson 19: 심슨의 역설",
    "section": "시각화1: 전체합격률",
    "text": "시각화1: 전체합격률\n- df1\n\ndf.groupby(['gender','result']).agg({'count':np.sum}).reset_index()\n\n\n\n\n\n  \n    \n      \n      gender\n      result\n      count\n    \n  \n  \n    \n      0\n      female\n      fail\n      1063\n    \n    \n      1\n      female\n      pass\n      772\n    \n    \n      2\n      male\n      fail\n      1291\n    \n    \n      3\n      male\n      pass\n      1400\n    \n  \n\n\n\n\n- df2\n\ndf.groupby('gender').agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1)\n\n\n\n\n\n  \n    \n      \n      gender\n      count2\n    \n  \n  \n    \n      0\n      female\n      1835\n    \n    \n      1\n      male\n      2691\n    \n  \n\n\n\n\n- merge: 두개의 데이터프레임을 합친다\n\ndf.groupby(['gender','result']).agg({'count':np.sum}).reset_index()\\\n.merge(df.groupby('gender').agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\n\n\n\n\n\n  \n    \n      \n      gender\n      result\n      count\n      count2\n    \n  \n  \n    \n      0\n      female\n      fail\n      1063\n      1835\n    \n    \n      1\n      female\n      pass\n      772\n      1835\n    \n    \n      2\n      male\n      fail\n      1291\n      2691\n    \n    \n      3\n      male\n      pass\n      1400\n      2691\n    \n  \n\n\n\n\n- 비율계산\n\ndf.groupby(['gender','result']).agg({'count':np.sum}).reset_index()\\\n.merge(df.groupby('gender').agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\\\n.eval('rate = count/count2')\n\n\n\n\n\n  \n    \n      \n      gender\n      result\n      count\n      count2\n      rate\n    \n  \n  \n    \n      0\n      female\n      fail\n      1063\n      1835\n      0.579292\n    \n    \n      1\n      female\n      pass\n      772\n      1835\n      0.420708\n    \n    \n      2\n      male\n      fail\n      1291\n      2691\n      0.479747\n    \n    \n      3\n      male\n      pass\n      1400\n      2691\n      0.520253\n    \n  \n\n\n\n\n- 시각화\n\ndata1= df.groupby(['gender','result']).agg({'count':np.sum}).reset_index()\\\n.merge(df.groupby('gender').agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\\\n.eval('rate = count/count2')\nggplot(data1.query('result==\"pass\"'))+geom_col(aes(x='gender',fill='gender',y='rate'))\n\n\n\n\n<ggplot: (8789343060161)>\n\n\n- 결론: 남자의 합격률이 더 높다. \\(\\to\\) 성차별이 있어보인다(?)"
  },
  {
    "objectID": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#시각화2-학과별-합격률",
    "href": "posts/Day3/08_ggplot2/2023-02-01-Lesson19.html#시각화2-학과별-합격률",
    "title": "Lesson 19: 심슨의 역설",
    "section": "시각화2: 학과별 합격률",
    "text": "시각화2: 학과별 합격률\n- df2\n\ndf.groupby(['department','gender']).agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1)\n\n\n\n\n\n  \n    \n      \n      department\n      gender\n      count2\n    \n  \n  \n    \n      0\n      A\n      female\n      108\n    \n    \n      1\n      A\n      male\n      825\n    \n    \n      2\n      B\n      female\n      25\n    \n    \n      3\n      B\n      male\n      560\n    \n    \n      4\n      C\n      female\n      593\n    \n    \n      5\n      C\n      male\n      325\n    \n    \n      6\n      D\n      female\n      375\n    \n    \n      7\n      D\n      male\n      417\n    \n    \n      8\n      E\n      female\n      393\n    \n    \n      9\n      E\n      male\n      191\n    \n    \n      10\n      F\n      female\n      341\n    \n    \n      11\n      F\n      male\n      373\n    \n  \n\n\n\n\n- merge\n\ndf.merge(df.groupby(['department','gender']).agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\\\n.eval('rate = count/count2')\n\n\n\n\n\n  \n    \n      \n      department\n      result\n      gender\n      count\n      count2\n      rate\n    \n  \n  \n    \n      0\n      A\n      fail\n      female\n      19\n      108\n      0.175926\n    \n    \n      1\n      A\n      pass\n      female\n      89\n      108\n      0.824074\n    \n    \n      2\n      A\n      fail\n      male\n      314\n      825\n      0.380606\n    \n    \n      3\n      A\n      pass\n      male\n      511\n      825\n      0.619394\n    \n    \n      4\n      B\n      fail\n      female\n      7\n      25\n      0.280000\n    \n    \n      5\n      B\n      pass\n      female\n      18\n      25\n      0.720000\n    \n    \n      6\n      B\n      fail\n      male\n      208\n      560\n      0.371429\n    \n    \n      7\n      B\n      pass\n      male\n      352\n      560\n      0.628571\n    \n    \n      8\n      C\n      fail\n      female\n      391\n      593\n      0.659359\n    \n    \n      9\n      C\n      pass\n      female\n      202\n      593\n      0.340641\n    \n    \n      10\n      C\n      fail\n      male\n      204\n      325\n      0.627692\n    \n    \n      11\n      C\n      pass\n      male\n      121\n      325\n      0.372308\n    \n    \n      12\n      D\n      fail\n      female\n      244\n      375\n      0.650667\n    \n    \n      13\n      D\n      pass\n      female\n      131\n      375\n      0.349333\n    \n    \n      14\n      D\n      fail\n      male\n      279\n      417\n      0.669065\n    \n    \n      15\n      D\n      pass\n      male\n      138\n      417\n      0.330935\n    \n    \n      16\n      E\n      fail\n      female\n      299\n      393\n      0.760814\n    \n    \n      17\n      E\n      pass\n      female\n      94\n      393\n      0.239186\n    \n    \n      18\n      E\n      fail\n      male\n      137\n      191\n      0.717277\n    \n    \n      19\n      E\n      pass\n      male\n      54\n      191\n      0.282723\n    \n    \n      20\n      F\n      fail\n      female\n      103\n      341\n      0.302053\n    \n    \n      21\n      F\n      pass\n      female\n      238\n      341\n      0.697947\n    \n    \n      22\n      F\n      fail\n      male\n      149\n      373\n      0.399464\n    \n    \n      23\n      F\n      pass\n      male\n      224\n      373\n      0.600536\n    \n  \n\n\n\n\n- 시각화\n\ndata2=df.merge(df.groupby(['department','gender']).agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\\\n.eval('rate = count/count2')\nggplot(data2.query('result==\"pass\"'))+geom_col(aes(x='gender',fill='gender',y='rate'))\\\n+facet_wrap('department')\n\n\n\n\n<ggplot: (8789343111249)>\n\n\n\n학과별로 살펴보니 오히려 A,B,F,D의 경우 여성의 합격률이 높다.\n\n- 교재에서 설명한 이유: 여성이 합격률이 낮은 학과에만 많이 지원하였기 때문\n\nggplot(data2.query('result==\"pass\"'))+geom_col(aes(x='department',y='count2',fill='gender'),position='dodge')\n\n\n\n\n<ggplot: (8789343070225)>\n\n\n\n살펴보니 합격률이 높은 A,B학과의 경우 상대적으로 남성이 많이 지원하였음. 합격률이 낮은 C,D학과는 상대적으로 여성이 많이 지원함. D,F의 지원수는 비슷"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#애드워드-터프티",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#애드워드-터프티",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "애드워드 터프티",
    "text": "애드워드 터프티\n- 데이터 시각화계의 거장\n- 터프티의 이론중 백미: 엄격한 미니멀리즘\n\n최소한의 잉크로 많은 정보를 전달할 수 있다면 그것이 바로 좋은 그래프이다.\n작은 지면 내에서 잉크를 최대한 적게 써서 짧은 시간 안에 많은 영감을 주어야 한다.\n\n- 데이터-잉크비: 데이터를 표현하는데 들아가는 잉크의 양 / 그래픽을 인쇄하는데 들어가는 잉크의 총량\n- 차트정크 (나이젤홈즈의 그래프)\n\n\n“Lurking behind chartjunk is contempt both for information and for the audience. Chartjunk promoters imagine that numbers and details are boring, dull, and tedious, requiring ornament to enliven. Cosmetic decoration, which frequently distorts the data, will never salvage an underlying lack of content. If the numbers are boring, then you’ve got the wrong numbers (…) Worse is contempt for our audience, designing as if readers were obtuse and uncaring. In fact, consumers of graphics are often more intelligent about the information at hand than those who fabricate the data decoration (…) The operating moral premise of information design should be that our readers are alert and caring; they may be busy, eager to get on with it, but they are not stupid.”\n\n\n차트정크 = 대중을 멸시 + 데이터에 대한 모독\n차트정크 옹호가는 숫자와 데이터가 지루하여 활기가 필요하다고 생각하는 모양이다..\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 제 생각: 글쎄…"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#찰스미나드의-도표",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#찰스미나드의-도표",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "찰스미나드의 도표",
    "text": "찰스미나드의 도표\n\n인류역사상 가장 훌륭한 시각화\n\n\n- 터프티의 평\n\n지금까지 그려진 최고의 통계 그래픽일지도 모른다.\n여기에서는 군대의 크기, 2차원 평면상의 위치, 군대의 이동방향, 모스코바에서 퇴각하는 동안의 여러날짜, 온도 \\(\\to\\) 6차원의 변수\n백만번에 한번 이런 그림을 그릴수는 있겠지만 이러한 멋진 그래픽을 만드는 방법에 대한 원칙은 없다. \\(\\to\\) 미니멀리즘..\n\n- 왜 우수한 그래프일까?\n\n자료를 파악하는 기법은 최근까지도 산점도, 막대그래프, 라인플랏에 의존\n이러한 플랏의 단점은 고차원의 자료를 분석하기 어렵다는 것임\n미나드는 여러그램을 그리는 방법 대신에 한 그림에서 패널을 늘리는 방법을 선택함."
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#미나드처럼-그리는게-왜-어려운가",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#미나드처럼-그리는게-왜-어려운가",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "미나드처럼 그리는게 왜 어려운가?",
    "text": "미나드처럼 그리는게 왜 어려운가?\n- 몸무게, 키, 성별, 국적\n\ndf1=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/male1.csv')\ndf2=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/male2.csv')  \ndf3=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/female.csv') \ndf4=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/foreign.csv')\n\n- 미나드의 접근방법\n\n_df = pd.concat([pd.concat([df1,df2],axis=1).assign(g='m'),df3.assign(g='f')])\ndf = pd.concat([_df.assign(g2='korea'),df4.assign(g2='foreign')]).reset_index(drop=True)\ndf\n\n\n\n\n\n  \n    \n      \n      w\n      h\n      g\n      g2\n    \n  \n  \n    \n      0\n      72.788217\n      183.486773\n      m\n      korea\n    \n    \n      1\n      66.606430\n      173.599877\n      m\n      korea\n    \n    \n      2\n      69.806324\n      173.237903\n      m\n      korea\n    \n    \n      3\n      67.449439\n      173.223805\n      m\n      korea\n    \n    \n      4\n      70.463183\n      174.931946\n      m\n      korea\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1525\n      78.154632\n      188.324350\n      m\n      foreign\n    \n    \n      1526\n      74.754308\n      183.017979\n      f\n      foreign\n    \n    \n      1527\n      91.196208\n      190.100456\n      m\n      foreign\n    \n    \n      1528\n      87.770394\n      187.987255\n      m\n      foreign\n    \n    \n      1529\n      88.021995\n      193.456798\n      m\n      foreign\n    \n  \n\n1530 rows × 4 columns\n\n\n\n\nsns.scatterplot(data=df,x='w',y='h',hue='g',style='g2')\n\n<AxesSubplot:xlabel='w', ylabel='h'>\n\n\n\n\n\n- 어려운점: (1) 센스가 없어서 hue/style을 이용하여 그룹을 구분할 생각을 못함 (2) long df (=tidy data) 형태로 데이터를 정리할 생각을 못함 (3) long df 형태로 데이터를 변형하는 코드를 모름\n\n기획력부족 -> 훌륭한 시각화를 많이 볼 것\n데이터프레임에 대한 이해부족 -> tidydata에 대한 개념\n프로그래밍 능력 -> 코딩공부열심히 (pandas를 엄청 잘해야함)"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#data-설명",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#data-설명",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "data 설명",
    "text": "data 설명\n- displ: 자동차의 엔진크기\n- hwy: 연료의 효율, 동일한 연료로 얼마나 멀리 가느냐?\n- 자세한 설명은 R에서 ?mpg를 이용해 스스로 찾아볼 것"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#python에서-plotnine을-이용한-산점도",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#python에서-plotnine을-이용한-산점도",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "python에서: plotnine을 이용한 산점도",
    "text": "python에서: plotnine을 이용한 산점도\n\nggplot(data=mpg) + geom_point(mapping=aes(x='displ',y='hwy')) ## plotnine\n\n\n\n\n<ggplot: (8775336983373)>\n\n\n\n산점도 해석: 엔진크기가 클수록 효율이 낮음.\n\n- 빠르게 그리기: data=와 mapping=은 생략가능함\n\nggplot(mpg) + geom_point(aes(x='displ',y='hwy')) ## plotnine\n\n\n\n\n<ggplot: (8775336295029)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#객체지향적인-느낌으로-산점도-그리기",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#객체지향적인-느낌으로-산점도-그리기",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "객체지향적인 느낌으로 산점도 그리기",
    "text": "객체지향적인 느낌으로 산점도 그리기\nstep1: 도화지를 준비한다.\n\nfig = ggplot(data=mpg)\nfig\n\n\n\n\n<ggplot: (8775336276849)>\n\n\nstep2 변수와 에스테틱사이의 맵핑을 설정한다.\n\na1= aes(x='displ',y='hwy')\na1\n\n{'x': 'displ', 'y': 'hwy'}\n\n\nstep3 점들의 집합을 만든다. 즉 포인트 지옴을 만든다.\n\npoint1=geom_point(mapping=a1)\n\n\ngeom_point(): 점들을 그려! 어떻게?\na1에서 설정된 표를 보고\n\nstep4 도화지와 지옴을 합친다.\n\nfig+point1\n\n\n\n\n<ggplot: (8775335422437)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경",
    "text": "산점도 + 점크기변경\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',size='class'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8726734563561)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-투명도변경",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-투명도변경",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 투명도변경",
    "text": "산점도 + 투명도변경\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',alpha='class'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_alpha.py:70: PlotnineWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8726734989121)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-투명도점크기를-동시에-적용",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-투명도점크기를-동시에-적용",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 투명도/점크기를 동시에 적용",
    "text": "산점도 + 투명도/점크기를 동시에 적용\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',alpha='class',size='class'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_alpha.py:70: PlotnineWarning: Using alpha for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8726734522405)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-형태",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-형태",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 형태",
    "text": "산점도 + 형태\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',shape='class'))\n\n\n\n\n<ggplot: (8726734265229)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-색깔",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-색깔",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 색깔",
    "text": "산점도 + 색깔\n\nggplot(data=mpg) + geom_point(mapping = aes(x='displ',y='hwy',color='class'))\n\n\n\n\n<ggplot: (8726734017473)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#객체지향적-느낌으로",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#객체지향적-느낌으로",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "객체지향적 느낌으로?",
    "text": "객체지향적 느낌으로?\n\na2 = aes(x='displ', y='hwy', color='class') \n\n\na1,a2\n\n({'x': 'displ', 'y': 'hwy'}, {'x': 'displ', 'y': 'hwy', 'color': 'class'})\n\n\n\npoint2=geom_point(a2)\n\n\nfig+point2\n\n\n\n\n<ggplot: (8775335353217)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-색깔-적합선",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-색깔-적합선",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 색깔 + 적합선",
    "text": "산점도 + 색깔 + 적합선\n- 일단 색깔이 없는 포인트 지옴부터 연습\n\nfig+point1\n\n\n\n\n<ggplot: (8775335332061)>\n\n\n\nline1 = geom_smooth(a1)\n\n\nfig+point1+line1\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8775334960069)>\n\n\n- point1(색깔없는 포인트 지옴)을 point2(색깔있는 포인트 지옴)으로 언제든지 바꿔치기 가능!\n\nfig+point2+line1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726732661565)>\n\n\n- 명령어로 한번에 그리기\n\nggplot(data=mpg) + \\\ngeom_point(mapping=aes(x='displ',y='hwy',color='class')) + \\\ngeom_smooth(mapping=aes(x='displ',y='hwy'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726732727485)>\n\n\n- 공통적인 맵핑규칙은 ggplot()쪽으로 빼기도 한다. (figure를 선언하는 곳에서 공통으로 선언함)\n\nggplot(data=mpg,mapping=aes(x='displ',y='hwy')) + \\\ngeom_point(mapping=aes(color='class')) + \\\ngeom_smooth()\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726733489953)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경-색깔",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경-색깔",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경 + 색깔",
    "text": "산점도 + 점크기변경 + 색깔\n- drv (전륜, 후륜, 4륜 구동)에 따라서 데이터를 시각화 하고 싶다.\n\nggplot(data=mpg, mapping=aes(x='displ',y='hwy')) + geom_point(mapping=aes(size='class',color='drv'),alpha=0.3)\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8726731152845)>\n\n\n\n모든 \\(x\\)에 대하여 붉은색 점들이 대부분 초록색과 보라색 점들에 비하여 아래쪽에 있음 \\(\\to\\) 4륜구동방식이 연비가 좋지 않음"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-객체지향버전",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-객체지향버전",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경 + 색깔 (객체지향버전)",
    "text": "산점도 + 점크기변경 + 색깔 (객체지향버전)\n- 맵핑규칙\n\na1,a2\n\n({'x': 'displ', 'y': 'hwy'}, {'x': 'displ', 'y': 'hwy', 'color': 'class'})\n\n\n\na3 = a2.copy() \n\n\na3['color'] = 'drv'\na3['size'] = 'class'\na3\n\n{'x': 'displ', 'y': 'hwy', 'color': 'drv', 'size': 'class'}\n\n\n\n아래와 같이 선언해도 괜찮음\n\na3= aes(x='displ',y='hwy',color='drv',size='class')\n\npoint3=geom_point(a3)\n\n\nfig+point3\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8775334891765)>\n\n\n\n그림의 전체적인 투명도를 조절하면 좋겠음\n\n\npoint3=geom_point(a3,alpha=0.2)\nfig+point3\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n<ggplot: (8775333161077)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-선추가",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-선추가",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경 + 색깔 + 선추가",
    "text": "산점도 + 점크기변경 + 색깔 + 선추가\n\nfig+point3+line1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726730575253)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-drv별로-선추가",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson16.html#산점도-점크기변경-색깔-drv별로-선추가",
    "title": "Lesson 16: 고차원 자료의 시각화 (with plotnine)",
    "section": "산점도 + 점크기변경 + 색깔 + drv별로 선추가",
    "text": "산점도 + 점크기변경 + 색깔 + drv별로 선추가\n- 맵핑규칙\n\na1,a2,a3\n\n({'x': 'displ', 'y': 'hwy'},\n {'x': 'displ', 'y': 'hwy', 'color': 'class'},\n {'x': 'displ', 'y': 'hwy', 'color': 'drv', 'size': 'class'})\n\n\n\na4 = a2.copy() \na4['color']='drv'\na4\n\n{'x': 'displ', 'y': 'hwy', 'color': 'drv'}\n\n\n\nline2 = geom_smooth(a4)\n\n\nfig + point3 +line2\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8775336209333)>\n\n\n- 선의 색깔을 동일하게 하고 선의 타입을 변경하여 drv를 표시하고 싶다면?\n\na1,a2,a3,a4\n\n({'x': 'displ', 'y': 'hwy'},\n {'x': 'displ', 'y': 'hwy', 'color': 'class'},\n {'x': 'displ', 'y': 'hwy', 'color': 'drv', 'size': 'class'},\n {'x': 'displ', 'y': 'hwy', 'color': 'drv'})\n\n\n\na5=a1.copy()\na5['linetype']='drv' \na5\n\n{'x': 'displ', 'y': 'hwy', 'linetype': 'drv'}\n\n\n\nline3 = geom_smooth(a5,size=0.5,color='gray')\n\n\nfig+point3+line3\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726732637457)>\n\n\n- 전체적인 추세선도 추가하고 싶다면?\n\nfig+point3+line3+line1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726732939513)>\n\n\n- 그려보니까 역시 drv별로 그려지는 추세선은 색깔별로 구분하는게 좋겠음.\n\nline2 = geom_smooth(a4,size=0.5,linetype='dashed')\nfig+point3+line2+line1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/scales/scale_size.py:50: PlotnineWarning: Using size for a discrete variable is not advised.\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8726733678229)>\n\n\n- 고차원을 변수를 표현할 수 있는 무기는 다양하다.\n\n산점도(포인트지옴): 점의크기, 점의형태, 점의색깔, 점의투명도\n라인플랏(스무스지옴,라인지옴): 선의형태, 선의색깔, 선의굵기"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#toy-exam",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#toy-exam",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "Toy exam",
    "text": "Toy exam\n- 교재의 예제상황은 예를들면 아래와 같다.\n(숨은진짜상황1)\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(1) \ntemp= np.array([-10.2, -5.2, 0.1, 10.1, 12.2, 14.7, \n                25.4, 26.8, 28.9, 35.1, 32.2, 34.6])\neps= np.random.normal(size=12,scale=5)\nicecream= 20 + temp * 2 + eps\n\n\nplt.plot(temp,icecream,'.')\n\n\n\n\n\n온도와 아이스크림 판매량의 산점도\n\n(숨은진짜상황2)\n\\[\\text{소아마비 반응수치} = 30 + 0.5 \\times \\text{온도} + \\epsilon\\] - 좌변은 소아마비임을 나타내는 어떠한 반응수치라고 생각하자.\n\nnp.random.seed(2) \neps = np.random.normal(size=12,scale=5) \ndisease = 30+ temp* 0.5 + eps\n\n\nplt.plot(temp,disease,'.')\n\n\n\n\n\n온도와 소아마비의 산점도\n\n(우리가 데이터로부터 관측한 상황)\n- 아이스크림과 질병의 산점도를 그려보자.\n\nplt.plot(icecream,disease,'.')\n\n\n\n\n\n양의 상관관계에 있다.\n\n- 아이스크림 중 어떠한 물질이 소아마비를 일으키는것이 분명하므로 (인과성이 분명해보이니까) 아래와 같은 모형을 세우자. <– 여기서부터 틀렸음\n\\[{\\tt disease}_i =\\beta_0 +\\beta_1 {\\tt icecream}_i +\\epsilon_i,\\quad \\textbf{for} ~~ i=1,2,\\dots, 12\\]\n- 적절한 \\(\\beta_0\\)와 \\(\\beta_1\\)을 추정하면 우리는 아이스크림과 소아마비의 관계를 알 수 있다. <– 틀린주장\n\n틀린 모형\n도데체 우리가 뭘 잘못했는가?\n\n- 두 변수 사이에 상관관계가 있어도 실제 원인은 다른 변수에 숨겨져 있는 경우가 많다.\n(ex1)\n\n온도 \\(\\to\\) 익사\n온도 \\(\\to\\) 아이스크림\n아이스크림과 익사자도 양의 상관관계에 있을것이다.\n아이스크림을 먹이면 물에 빠져 죽는다 \\(\\to\\) 틀린주장\n사실 기온이 숨겨진 원인이다. 기온이 증가하면 아이스크림 판매량도 증가하고 폭염때문에 익사사고율도 높아지는 구조이다.\n\n(ex2)\n\n인구수 \\(\\to\\) 교회\n인구수 \\(\\to\\) 범죄건수\n지역별 교회와 범죄건수를 살펴보면 상관관계가 높게 나올것임\n교회를 지으면 범죄건수도 증가한다? \\(\\to\\) 틀린주장\n사실 인구가 숨겨진 요인임\n\n- ex2, ex1에 대하여 바른 분석을 하려면?\n\nex2: 인구가 비슷한 도시끼리 묶어서 비교해보면 교회와 범죄의 건수는 양의 상관관계에 있지 않을것임\nex1: 온도가 비슷한 그룹끼리 묶어보자.\n\n- 올바른 분석: 온도가 비슷한 그룹끼리 묶어서 그려보자. \\(\\to\\) 상관계수가 줄어들 것이다.\n\nplt.plot(icecream[:6],disease[:6],'.')\n\n\n\n\n\nplt.plot(icecream[6:],disease[6:],'.')\n\n\n\n\n\n진짜로 선형관계가 약해졌다.."
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#자료생성-좀-더-그럴듯한-자료-만들기",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#자료생성-좀-더-그럴듯한-자료-만들기",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "자료생성: 좀 더 그럴듯한 자료 (만들기)",
    "text": "자료생성: 좀 더 그럴듯한 자료 (만들기)\n- 지난 시간의 toy example은 데이터가 너무 작아서 억지스러움 \\(\\to\\) 기상자료개방포털, 회원가입해야 자료받을 수 있음.\n\n_df=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/temp.csv')\n_df\n\n\n\n\n\n  \n    \n      \n      지점번호\n      지점명\n      일시\n      평균기온(℃)\n      최고기온(℃)\n      최고기온시각\n      최저기온(℃)\n    \n  \n  \n    \n      0\n      146\n      전주\n      2020-01-01\n      -0.5\n      4.3\n      15:09\n      -6.4\n    \n    \n      1\n      146\n      전주\n      2020-01-02\n      1.4\n      6.5\n      14:12\n      -3.0\n    \n    \n      2\n      146\n      전주\n      2020-01-03\n      2.6\n      7.6\n      13:32\n      -0.5\n    \n    \n      3\n      146\n      전주\n      2020-01-04\n      2.0\n      7.7\n      13:51\n      -2.6\n    \n    \n      4\n      146\n      전주\n      2020-01-05\n      2.5\n      8.6\n      14:05\n      -3.2\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      651\n      146\n      전주\n      2021-10-13\n      19.9\n      25.5\n      14:29\n      15.6\n    \n    \n      652\n      146\n      전주\n      2021-10-14\n      20.4\n      25.5\n      13:36\n      17.0\n    \n    \n      653\n      146\n      전주\n      2021-10-15\n      18.3\n      22.0\n      13:47\n      15.7\n    \n    \n      654\n      146\n      전주\n      2021-10-16\n      12.8\n      17.4\n      0:01\n      6.5\n    \n    \n      655\n      146\n      전주\n      2021-10-17\n      6.7\n      12.4\n      15:18\n      2.2\n    \n  \n\n656 rows × 7 columns\n\n\n\n- 평균기온만 선택\n\npd.Series(_df.columns)\n\n0       지점번호\n1        지점명\n2         일시\n3    평균기온(℃)\n4    최고기온(℃)\n5     최고기온시각\n6    최저기온(℃)\ndtype: object\n\n\n\ntemp = np.array(_df.iloc[:,3])\ntemp[:5]\n\narray([-0.5,  1.4,  2.6,  2. ,  2.5])\n\n\n\n# 숨은진짜상황1: 온도 \\(\\to\\) 아이스크림 판매량\n- 아래와 같은 관계가 있다고 하자.\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(1)\neps = np.random.normal(size=len(temp), scale=10) \nicecream = 20 + 2*temp + eps\n\n\nplt.plot(temp,icecream,'o',alpha=0.3)\nplt.xlabel(\"temp\",size=15)\nplt.ylabel(\"icecream\",size=15)\n\nText(0, 0.5, 'icecream')\n\n\n\n\n\n\n\n# 숨은진짜상황1: 온도 \\(\\to\\) 아이스크림 판매량\n- 아래와 같은 관계가 있다고 하자.\n\\[\\text{소아마비 반응수치} = 30 + 0.5 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(2) \neps=np.random.normal(size=len(temp),scale=1)\ndisease= 30 + 0.5 * temp + eps\n\n\nplt.plot(temp,disease,'o',alpha=0.3)\nplt.xlabel(\"temp\",size=15)\nplt.ylabel(\"disease\",size=15)\n\nText(0, 0.5, 'disease')\n\n\n\n\n\n\n\n# 우리가 관측한 상황 (온도는 은닉되어있음)\n\nplt.plot(icecream,disease,'o',alpha=0.3)\nplt.xlabel(\"icecream\",size=15)\nplt.ylabel(\"disease\",size=15)\n\nText(0, 0.5, 'disease')\n\n\n\n\n\n\nnp.corrcoef(icecream,disease)\n\narray([[1.        , 0.86298975],\n       [0.86298975, 1.        ]])\n\n\n\n0.86정도.."
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#직관-여름만-뽑아서-plot-해보자.",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#직관-여름만-뽑아서-plot-해보자.",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "직관: 여름만 뽑아서 plot 해보자.",
    "text": "직관: 여름만 뽑아서 plot 해보자.\n- temp>25 (여름으로 간주) 인 관측치만 플랏\n\nplt.plot(icecream[temp>25],disease[temp>25], 'o', color='C1') ## 평균기온이 25도가 넘어가면 여름이라 생각 \n\n\n\n\n- 전체적인 산점도\n\nfig , ((ax1,ax2), (ax3,ax4)) = plt.subplots(2,2,figsize=(8,6)) \nax1.plot(temp,icecream,'o',alpha=0.2); ax1.set_xlabel('temp'); ax1.set_ylabel('icecream'); ax1.set_title(\"hidden1\")\nax2.plot(temp,disease,'o',alpha=0.2); ax2.set_xlabel('temp'); ax2.set_ylabel('disease'); ax2.set_title(\"hidden2\")\nax3.plot(icecream,disease,'o',alpha=0.2); ax3.set_xlabel('icecream'); ax3.set_ylabel('disease'); ax3.set_title(\"observed\")\nax4.plot(icecream,disease,'o',alpha=0.2); ax4.set_xlabel('icecream'); ax4.set_ylabel('disease'); ax4.set_title(\"observed\")\nax4.plot(icecream[temp>25],disease[temp>25],'o',label='temp>25')\nax4.legend()\nfig.tight_layout()"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#ggplot-온도구간을-세분화-하여-시각화",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#ggplot-온도구간을-세분화-하여-시각화",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "ggplot: 온도구간을 세분화 하여 시각화",
    "text": "ggplot: 온도구간을 세분화 하여 시각화\n- 목표: 모든 온도구간에 대하여 각각 색을 다르게 하여 그려보자.\n\n사실 지금 변수는 온도, 아이스크림판매량, 소아마비\n온도가 유사한 지역을 색으로 묶으면 3차원 플랏이 가능함\n\n\n# df로 자료정리\n- 일단 데이터 프레임을 정리하자.\n\ndf = pd.DataFrame({'temp':temp,'icecream':icecream,'disease':disease})\ndf\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n    \n  \n  \n    \n      0\n      -0.5\n      35.243454\n      29.333242\n    \n    \n      1\n      1.4\n      16.682436\n      30.643733\n    \n    \n      2\n      2.6\n      19.918282\n      29.163804\n    \n    \n      3\n      2.0\n      13.270314\n      32.640271\n    \n    \n      4\n      2.5\n      33.654076\n      29.456564\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      651\n      19.9\n      68.839992\n      39.633906\n    \n    \n      652\n      20.4\n      76.554679\n      38.920443\n    \n    \n      653\n      18.3\n      68.666079\n      39.882650\n    \n    \n      654\n      12.8\n      42.771364\n      36.613159\n    \n    \n      655\n      6.7\n      30.736731\n      34.902513\n    \n  \n\n656 rows × 3 columns\n\n\n\n\n\n# 구간세분화\n- 온도를 카테고리화 하자 \\(\\to\\) 적당한 구긴을 설정하기 위해서 히스토그램을 그려보자.\n\ndf.temp.hist() # ? 이거 14주차쯤 배우는데 미리 스포합니다.. 엄청 편해요 \n\n<AxesSubplot:>\n\n\n\n\n\n\nplt.hist(df.temp) # 원래는 이걸 배웠죠\n\n(array([  3.,   9.,  29.,  60.,  92.,  86.,  65.,  93., 139.,  80.]),\n array([-12.4 ,  -8.16,  -3.92,   0.32,   4.56,   8.8 ,  13.04,  17.28,\n         21.52,  25.76,  30.  ]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n- 구간은 5정도로 하면 적당할 것 같다.\n\ndef cut(x): # 이거보다 더 좋은 방법이 있을 것 같긴 한데요..\n    if x<0: \n        y='Temp: <0'\n    elif x<5: \n        y='Temp: 0~5'\n    elif x<10: \n        y='Temp: 5~10'\n    elif x<15: \n        y='Temp: 10~15'\n    elif x<20:\n        y='Temp: 15~20'\n    elif x<25: \n        y='Temp: 20~25'\n    else: \n        y='Temp: >30'\n    return y \n\n\ndf.assign(temp2 = list(map(cut,df.temp)))\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n      temp2\n    \n  \n  \n    \n      0\n      -0.5\n      35.243454\n      29.333242\n      Temp: <0\n    \n    \n      1\n      1.4\n      16.682436\n      30.643733\n      Temp: 0~5\n    \n    \n      2\n      2.6\n      19.918282\n      29.163804\n      Temp: 0~5\n    \n    \n      3\n      2.0\n      13.270314\n      32.640271\n      Temp: 0~5\n    \n    \n      4\n      2.5\n      33.654076\n      29.456564\n      Temp: 0~5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      651\n      19.9\n      68.839992\n      39.633906\n      Temp: 15~20\n    \n    \n      652\n      20.4\n      76.554679\n      38.920443\n      Temp: 20~25\n    \n    \n      653\n      18.3\n      68.666079\n      39.882650\n      Temp: 15~20\n    \n    \n      654\n      12.8\n      42.771364\n      36.613159\n      Temp: 10~15\n    \n    \n      655\n      6.7\n      30.736731\n      34.902513\n      Temp: 5~10\n    \n  \n\n656 rows × 4 columns\n\n\n\n\n\n# ggplot\n- 온도를 색으로 구분하면\n\nfig = ggplot(data=df.assign(temp2 = list(map(cut,df.temp))))\np1 = geom_point(aes(x='icecream',y='disease',colour='temp2'),alpha=0.5)\nfig + p1\n\n\n\n\n<ggplot: (8762005360345)>\n\n\n- 추세선을 추가하면\n\nl1 = geom_smooth(aes(x='icecream',y='disease',colour='temp2'))\n\n\nfig+p1+l1\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8762010169613)>\n\n\n\n각 온도별로 추세선은 거의 기울기가 0이다. \\(\\to\\) 온도가 비슷한 구간별로 묶어서 보니까 상관관계가 없다는 거!\n아이스크림 판매량과 소아마비의 corr은 유의미해보이지만, 온도를 통제하였을 경우 아이스크림 판매량과 소아마비의 partial corr은 유의미해보이지 않음.\n\n\n\n# 해석\n- 해피앤딩: 온도를 통제하니까 아이스크림과 질병은 관련이 없어보인다. \\(\\to\\) 아이스크림을 먹으면 소아마비를 유발한다는 이상한 결론이 나올뻔 했지만 우리는 온도라는 흑막을 잘 찾았고 결과적으로 “온도->아이스크림판매량,소아마비” 이라는 합리적인 진리를 얻을 수 있었다.\n\n온도와 같은 변수를 은닉변수라고 한다.\n\n- 또 다른 흑막? 고려할 흑막이 온도뿐이라는 보장이 어디있지? 사실 흑막2, 흑막3이 있어서 그런 흑막들을 고려하다보니까 아이스크림과 소아마비사이의 상관관계가 다시 보이면 어떡하지?\n\n이러한 이유 때문에 상관계수로 인과성을 유추하는건 사실상 불가능.\n그런데 이론적으로는 “세상의 모든 은닉변수를 통제하였을 경우에도 corr(X,Y)의 값이 1에 가깝다면 그때는 인과성이 있다고 봐도 무방함, (물론 이 경우에도 무엇이 원인인지는 통계적으로 따지는것이 불가)” 이라고 주장할 수 있다. 즉 모든 흑막을 제거한다면 “상관성=인과성”이다.\n\n- 실험계획법, 인과추론: 세상의 모든 흑막을 제거하는건 상식적으로 불가능\n\n피셔의주장(실험계획법): 그런데 실험계획을 잘하면 흑막을 제거한 효과가 있음 (무작위로 사람뽑아서 담배를 피우게 한다든가)\n인과추론: 실험계획이 사실상 불가능한 경우가 있음 \\(\\to\\) 모인 데이터에서 최대한 흑막2,3,4,.. 등이 비슷한 그룹끼리 “매칭”을 시킨다!"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#그냥-궁금해서-진짜-만약에-아이스크림과-소아마비가-관련있는-경우라면",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson17.html#그냥-궁금해서-진짜-만약에-아이스크림과-소아마비가-관련있는-경우라면",
    "title": "Lesson 17: 아이스크림을 많이 먹으면 걸리는 병",
    "section": "그냥 궁금해서: 진짜 만약에 아이스크림과 소아마비가 관련있는 경우라면?",
    "text": "그냥 궁금해서: 진짜 만약에 아이스크림과 소아마비가 관련있는 경우라면?\n- 온도는 아이스크림 판매에 여전히 영향을 주지만\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(1)\neps=np.random.normal(size=len(temp), scale=10) \nicecream = 20 + 2 * temp + eps \n\n- 수영장이 원인이 아니라 진짜 아이스크림을 먹고 소아마비에 걸린상황이라면?\n\\[\\text{소아마비 반응수치} = 30 + 0 \\times \\text{온도} + 0.15 \\times \\text{아이스크림 판매량} + \\epsilon\\]\n\nnp.random.seed(2) \neps = np.random.normal(size=len(temp),scale=2)\ndisease= 30+ 0*temp + 0.15*icecream + eps\n\n\ndf2=pd.DataFrame({'temp':temp,'icecream':icecream,'disease':disease})\ndf2.assign(temp2=list(map(cut,df2.temp)))\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n      temp2\n    \n  \n  \n    \n      0\n      -0.5\n      35.243454\n      34.453002\n      Temp: <0\n    \n    \n      1\n      1.4\n      16.682436\n      32.389832\n      Temp: 0~5\n    \n    \n      2\n      2.6\n      19.918282\n      28.715350\n      Temp: 0~5\n    \n    \n      3\n      2.0\n      13.270314\n      35.271089\n      Temp: 0~5\n    \n    \n      4\n      2.5\n      33.654076\n      31.461240\n      Temp: 0~5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      651\n      19.9\n      68.839992\n      39.693811\n      Temp: 15~20\n    \n    \n      652\n      20.4\n      76.554679\n      38.924088\n      Temp: 20~25\n    \n    \n      653\n      18.3\n      68.666079\n      41.765212\n      Temp: 15~20\n    \n    \n      654\n      12.8\n      42.771364\n      36.842022\n      Temp: 10~15\n    \n    \n      655\n      6.7\n      30.736731\n      37.715537\n      Temp: 5~10\n    \n  \n\n656 rows × 4 columns\n\n\n\n\nggplot(data=df2.assign(temp2=list(map(cut,df2.temp))))+\\\ngeom_point(aes(x='icecream',y='disease',colour='temp2'),alpha=0.2)+\\\ngeom_smooth(aes(x='icecream',y='disease',colour='temp2'))\n\n/home/cgb4/anaconda3/envs/py37/lib/python3.7/site-packages/plotnine/stats/smoothers.py:311: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings.\n\n\n\n\n\n<ggplot: (8762005194073)>\n\n\n\n이번엔 partial corr도 유의미하게 나옴\n\n- 단순 corr을 봐서는 “온도->아이스크림,소아마비” 인지, “온도->아이스크림->소아마비” 인지 알기 어렵다.\n\ndf.corr()\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n    \n  \n  \n    \n      temp\n      1.000000\n      0.884366\n      0.975609\n    \n    \n      icecream\n      0.884366\n      1.000000\n      0.862990\n    \n    \n      disease\n      0.975609\n      0.862990\n      1.000000\n    \n  \n\n\n\n\n\ndf2.corr()\n\n\n\n\n\n  \n    \n      \n      temp\n      icecream\n      disease\n    \n  \n  \n    \n      temp\n      1.000000\n      0.884366\n      0.725505\n    \n    \n      icecream\n      0.884366\n      1.000000\n      0.830539\n    \n    \n      disease\n      0.725505\n      0.830539\n      1.000000"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson18.html#fifa23-data",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson18.html#fifa23-data",
    "title": "Lesson 18: FIFA23 자료분석",
    "section": "FIFA23 data",
    "text": "FIFA23 data\n- FIFA23라는 축구게임이 있음\n- 게임에 실제 선수들이 나오면서 선수들의 능력치가 세밀하게 구현되어 있음\n- 선수들 능력치에 대한 데이터셋은 캐글에 공개되어 있음 - https://www.kaggle.com/datasets/bryanb/fifa-player-stats-database?select=FIFA23_official_data.csv"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson18.html#데이터살펴보기",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson18.html#데이터살펴보기",
    "title": "Lesson 18: FIFA23 자료분석",
    "section": "데이터살펴보기",
    "text": "데이터살펴보기\n- 일단 살펴보기\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n    \n  \n\n5 rows × 29 columns\n\n\n\n트랜스포즈하여 보는 것이 편할때도 있음\n\ndf.T\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      ...\n      17650\n      17651\n      17652\n      17653\n      17654\n      17655\n      17656\n      17657\n      17658\n      17659\n    \n  \n  \n    \n      ID\n      209658\n      212198\n      224334\n      192985\n      224232\n      212622\n      197445\n      187961\n      208333\n      210514\n      ...\n      256879\n      269546\n      267647\n      253186\n      267461\n      269526\n      267946\n      270567\n      256624\n      256376\n    \n    \n      Name\n      L. Goretzka\n      Bruno Fernandes\n      M. Acuña\n      K. De Bruyne\n      N. Barella\n      J. Kimmich\n      D. Alaba\n      22 Paulinho\n      E. Can\n      João Cancelo\n      ...\n      22 G. Leijon\n      Wu Fei\n      22 E. Grosz\n      22 S. Booth\n      22 L. Grimpe\n      Deng Xiongtao\n      22 Lim Jun Sub\n      A. Demir\n      21 S. Czajor\n      21 F. Jakobsson\n    \n    \n      Age\n      27\n      27\n      30\n      31\n      25\n      27\n      30\n      32\n      28\n      28\n      ...\n      19\n      32\n      18\n      20\n      17\n      19\n      17\n      25\n      18\n      20\n    \n    \n      Photo\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      https://cdn.sofifa.net/players/212/622/23_60.png\n      https://cdn.sofifa.net/players/197/445/23_60.png\n      https://cdn.sofifa.net/players/187/961/22_60.png\n      https://cdn.sofifa.net/players/208/333/23_60.png\n      https://cdn.sofifa.net/players/210/514/23_60.png\n      ...\n      https://cdn.sofifa.net/players/256/879/22_60.png\n      https://cdn.sofifa.net/players/269/546/23_60.png\n      https://cdn.sofifa.net/players/267/647/22_60.png\n      https://cdn.sofifa.net/players/253/186/22_60.png\n      https://cdn.sofifa.net/players/267/461/22_60.png\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      https://cdn.sofifa.net/players/256/376/21_60.png\n    \n    \n      Nationality\n      Germany\n      Portugal\n      Argentina\n      Belgium\n      Italy\n      Germany\n      Austria\n      Brazil\n      Germany\n      Portugal\n      ...\n      Sweden\n      China PR\n      Romania\n      England\n      Germany\n      China PR\n      Korea Republic\n      Turkey\n      Poland\n      Sweden\n    \n    \n      Flag\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/pt.png\n      https://cdn.sofifa.net/flags/ar.png\n      https://cdn.sofifa.net/flags/be.png\n      https://cdn.sofifa.net/flags/it.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/at.png\n      https://cdn.sofifa.net/flags/br.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/pt.png\n      ...\n      https://cdn.sofifa.net/flags/se.png\n      https://cdn.sofifa.net/flags/cn.png\n      https://cdn.sofifa.net/flags/ro.png\n      https://cdn.sofifa.net/flags/gb-eng.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/cn.png\n      https://cdn.sofifa.net/flags/kr.png\n      https://cdn.sofifa.net/flags/tr.png\n      https://cdn.sofifa.net/flags/pl.png\n      https://cdn.sofifa.net/flags/se.png\n    \n    \n      Overall\n      87\n      86\n      85\n      91\n      86\n      89\n      86\n      83\n      82\n      88\n      ...\n      52\n      51\n      52\n      51\n      54\n      48\n      48\n      51\n      50\n      50\n    \n    \n      Potential\n      88\n      87\n      85\n      91\n      89\n      90\n      86\n      83\n      82\n      88\n      ...\n      62\n      51\n      70\n      60\n      68\n      61\n      64\n      56\n      65\n      61\n    \n    \n      Club\n      FC Bayern München\n      Manchester United\n      Sevilla FC\n      Manchester City\n      Inter\n      FC Bayern München\n      Real Madrid CF\n      Al Ahli\n      Borussia Dortmund\n      Manchester City\n      ...\n      Örebro SK\n      Wuhan Three Towns\n      Gaz Metan Mediaş\n      Crewe Alexandra\n      RB Leipzig\n      Meizhou Hakka\n      Jeju United FC\n      Ümraniyespor\n      Fleetwood Town\n      IFK Norrköping\n    \n    \n      Club Logo\n      https://cdn.sofifa.net/teams/21/30.png\n      https://cdn.sofifa.net/teams/11/30.png\n      https://cdn.sofifa.net/teams/481/30.png\n      https://cdn.sofifa.net/teams/10/30.png\n      https://cdn.sofifa.net/teams/44/30.png\n      https://cdn.sofifa.net/teams/21/30.png\n      https://cdn.sofifa.net/teams/243/30.png\n      https://cdn.sofifa.net/teams/112387/30.png\n      https://cdn.sofifa.net/teams/22/30.png\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      https://cdn.sofifa.net/teams/705/30.png\n      https://cdn.sofifa.net/teams/116361/30.png\n      https://cdn.sofifa.net/teams/112637/30.png\n      https://cdn.sofifa.net/teams/121/30.png\n      https://cdn.sofifa.net/teams/112172/30.png\n      https://cdn.sofifa.net/teams/114628/30.png\n      https://cdn.sofifa.net/teams/1478/30.png\n      https://cdn.sofifa.net/teams/113796/30.png\n      https://cdn.sofifa.net/teams/112260/30.png\n      https://cdn.sofifa.net/teams/702/30.png\n    \n    \n      Value\n      €91M\n      €78.5M\n      €46.5M\n      €107.5M\n      €89.5M\n      €105.5M\n      €55.5M\n      €28.5M\n      €30.5M\n      €82.5M\n      ...\n      €150K\n      €30K\n      €180K\n      €110K\n      €210K\n      €100K\n      €100K\n      €70K\n      €90K\n      €90K\n    \n    \n      Wage\n      €115K\n      €190K\n      €46K\n      €350K\n      €110K\n      €130K\n      €220K\n      €61K\n      €63K\n      €250K\n      ...\n      €500\n      €2K\n      €500\n      €850\n      €500\n      €500\n      €500\n      €2K\n      €500\n      €500\n    \n    \n      Special\n      2312\n      2305\n      2303\n      2303\n      2296\n      2283\n      2277\n      2273\n      2271\n      2262\n      ...\n      779\n      777\n      775\n      768\n      767\n      762\n      761\n      759\n      758\n      749\n    \n    \n      Preferred Foot\n      Right\n      Right\n      Left\n      Right\n      Right\n      Right\n      Left\n      Right\n      Right\n      Right\n      ...\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Left\n    \n    \n      International Reputation\n      4.0\n      3.0\n      2.0\n      4.0\n      3.0\n      4.0\n      4.0\n      3.0\n      3.0\n      3.0\n      ...\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      Weak Foot\n      4.0\n      3.0\n      3.0\n      5.0\n      3.0\n      4.0\n      4.0\n      4.0\n      4.0\n      4.0\n      ...\n      3.0\n      2.0\n      2.0\n      2.0\n      3.0\n      3.0\n      2.0\n      2.0\n      2.0\n      2.0\n    \n    \n      Skill Moves\n      3.0\n      4.0\n      3.0\n      4.0\n      3.0\n      3.0\n      3.0\n      4.0\n      3.0\n      4.0\n      ...\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      Work Rate\n      High/ Medium\n      High/ High\n      High/ High\n      High/ High\n      High/ High\n      High/ Medium\n      Medium/ Medium\n      High/ High\n      Medium/ High\n      High/ Medium\n      ...\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n    \n    \n      Body Type\n      Unique\n      Unique\n      Stocky (170-185)\n      Unique\n      Normal (170-)\n      Normal (170-185)\n      Normal (170-185)\n      Normal (170-185)\n      Stocky (185+)\n      Unique\n      ...\n      Normal (185+)\n      Normal (185+)\n      Lean (185+)\n      Lean (185+)\n      Lean (185+)\n      Normal (185+)\n      Lean (185+)\n      Lean (185+)\n      Normal (185+)\n      Normal (185+)\n    \n    \n      Real Face\n      Yes\n      Yes\n      No\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      ...\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n    \n    \n      Position\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos15\">LCM\n      <span class=\"pos pos7\">LB\n      <span class=\"pos pos13\">RCM\n      <span class=\"pos pos13\">RCM\n      <span class=\"pos pos9\">RDM\n      <span class=\"pos pos6\">LCB\n      <span class=\"pos pos15\">LCM\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos7\">LB\n      ...\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n    \n    \n      Joined\n      Jul 1, 2018\n      Jan 30, 2020\n      Sep 14, 2020\n      Aug 30, 2015\n      Sep 1, 2020\n      Jul 1, 2015\n      Jul 1, 2021\n      Jul 22, 2021\n      Feb 18, 2020\n      Aug 7, 2019\n      ...\n      Jun 14, 2020\n      Feb 15, 2019\n      Jul 1, 2020\n      Jul 1, 2019\n      Feb 7, 2022\n      Apr 11, 2022\n      Jan 1, 2022\n      Jun 6, 2021\n      Jan 1, 2020\n      Jan 8, 2020\n    \n    \n      Loaned From\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      Contract Valid Until\n      2026\n      2026\n      2024\n      2025\n      2026\n      2025\n      2026\n      2024\n      2024\n      2027\n      ...\n      2022\n      2022\n      2022\n      2022\n      2023\n      2027\n      2026\n      2023\n      2021\n      2021\n    \n    \n      Height\n      189cm\n      179cm\n      172cm\n      181cm\n      172cm\n      177cm\n      180cm\n      183cm\n      186cm\n      182cm\n      ...\n      188cm\n      186cm\n      190cm\n      195cm\n      186cm\n      190cm\n      195cm\n      190cm\n      187cm\n      186cm\n    \n    \n      Weight\n      82kg\n      69kg\n      69kg\n      70kg\n      68kg\n      75kg\n      78kg\n      80kg\n      86kg\n      74kg\n      ...\n      81kg\n      78kg\n      70kg\n      80kg\n      78kg\n      78kg\n      84kg\n      82kg\n      79kg\n      78kg\n    \n    \n      Release Clause\n      €157M\n      €155M\n      €97.7M\n      €198.9M\n      €154.4M\n      €182M\n      €113.8M\n      €48.5M\n      €51.9M\n      €152.6M\n      ...\n      €218K\n      €47K\n      €356K\n      €215K\n      €488K\n      €218K\n      €188K\n      €142K\n      €214K\n      €131K\n    \n    \n      Kit Number\n      8.0\n      8.0\n      19.0\n      17.0\n      23.0\n      6.0\n      4.0\n      15.0\n      23.0\n      7.0\n      ...\n      33.0\n      1.0\n      99.0\n      27.0\n      43.0\n      35.0\n      21.0\n      12.0\n      40.0\n      30.0\n    \n    \n      Best Overall Rating\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n29 rows × 17660 columns\n\n\n\n- column이름조사\n\ndf.keys()\n\nIndex(['ID', 'Name', 'Age', 'Photo', 'Nationality', 'Flag', 'Overall',\n       'Potential', 'Club', 'Club Logo', 'Value', 'Wage', 'Special',\n       'Preferred Foot', 'International Reputation', 'Weak Foot',\n       'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position',\n       'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight',\n       'Release Clause', 'Kit Number', 'Best Overall Rating'],\n      dtype='object')\n\n\n\n이름에 space가 있어서 좀 거슬림\n\n- 각 column 별로 자료형조사\n\npd.DataFrame({'colname':df.keys(), 'dtype':[df[key].dtype for key in df.keys()]})\n\n\n\n\n\n  \n    \n      \n      colname\n      dtype\n    \n  \n  \n    \n      0\n      ID\n      int64\n    \n    \n      1\n      Name\n      object\n    \n    \n      2\n      Age\n      int64\n    \n    \n      3\n      Photo\n      object\n    \n    \n      4\n      Nationality\n      object\n    \n    \n      5\n      Flag\n      object\n    \n    \n      6\n      Overall\n      int64\n    \n    \n      7\n      Potential\n      int64\n    \n    \n      8\n      Club\n      object\n    \n    \n      9\n      Club Logo\n      object\n    \n    \n      10\n      Value\n      object\n    \n    \n      11\n      Wage\n      object\n    \n    \n      12\n      Special\n      int64\n    \n    \n      13\n      Preferred Foot\n      object\n    \n    \n      14\n      International Reputation\n      float64\n    \n    \n      15\n      Weak Foot\n      float64\n    \n    \n      16\n      Skill Moves\n      float64\n    \n    \n      17\n      Work Rate\n      object\n    \n    \n      18\n      Body Type\n      object\n    \n    \n      19\n      Real Face\n      object\n    \n    \n      20\n      Position\n      object\n    \n    \n      21\n      Joined\n      object\n    \n    \n      22\n      Loaned From\n      object\n    \n    \n      23\n      Contract Valid Until\n      object\n    \n    \n      24\n      Height\n      object\n    \n    \n      25\n      Weight\n      object\n    \n    \n      26\n      Release Clause\n      object\n    \n    \n      27\n      Kit Number\n      float64\n    \n    \n      28\n      Best Overall Rating\n      object\n    \n  \n\n\n\n\n- 결측치조사\n\npd.DataFrame({'colname':df.keys(), \n              'dtype':[df[key].dtype for key in df.keys()],\n              'na':[df[key].isna().sum() for key in df.keys()]\n             })\n\n\n\n\n\n  \n    \n      \n      colname\n      dtype\n      na\n    \n  \n  \n    \n      0\n      ID\n      int64\n      0\n    \n    \n      1\n      Name\n      object\n      0\n    \n    \n      2\n      Age\n      int64\n      0\n    \n    \n      3\n      Photo\n      object\n      0\n    \n    \n      4\n      Nationality\n      object\n      0\n    \n    \n      5\n      Flag\n      object\n      0\n    \n    \n      6\n      Overall\n      int64\n      0\n    \n    \n      7\n      Potential\n      int64\n      0\n    \n    \n      8\n      Club\n      object\n      211\n    \n    \n      9\n      Club Logo\n      object\n      0\n    \n    \n      10\n      Value\n      object\n      0\n    \n    \n      11\n      Wage\n      object\n      0\n    \n    \n      12\n      Special\n      int64\n      0\n    \n    \n      13\n      Preferred Foot\n      object\n      0\n    \n    \n      14\n      International Reputation\n      float64\n      0\n    \n    \n      15\n      Weak Foot\n      float64\n      0\n    \n    \n      16\n      Skill Moves\n      float64\n      0\n    \n    \n      17\n      Work Rate\n      object\n      0\n    \n    \n      18\n      Body Type\n      object\n      38\n    \n    \n      19\n      Real Face\n      object\n      38\n    \n    \n      20\n      Position\n      object\n      35\n    \n    \n      21\n      Joined\n      object\n      1098\n    \n    \n      22\n      Loaned From\n      object\n      16966\n    \n    \n      23\n      Contract Valid Until\n      object\n      361\n    \n    \n      24\n      Height\n      object\n      0\n    \n    \n      25\n      Weight\n      object\n      0\n    \n    \n      26\n      Release Clause\n      object\n      1151\n    \n    \n      27\n      Kit Number\n      float64\n      35\n    \n    \n      28\n      Best Overall Rating\n      object\n      17639\n    \n  \n\n\n\n\n(퀴즈) 열의선택: 결측치가 10000개 이상인 열을 보고싶다면?\n\ndf.loc[:,[df[key].isna().sum()>10000 for key in df.keys()]]\n\n\n\n\n\n  \n    \n      \n      Loaned From\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n    \n    \n      1\n      NaN\n      NaN\n    \n    \n      2\n      NaN\n      NaN\n    \n    \n      3\n      NaN\n      NaN\n    \n    \n      4\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      17655\n      NaN\n      NaN\n    \n    \n      17656\n      NaN\n      NaN\n    \n    \n      17657\n      NaN\n      NaN\n    \n    \n      17658\n      NaN\n      NaN\n    \n    \n      17659\n      NaN\n      NaN\n    \n  \n\n17660 rows × 2 columns\n\n\n\n- .info()\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 17660 entries, 0 to 17659\nData columns (total 29 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   ID                        17660 non-null  int64  \n 1   Name                      17660 non-null  object \n 2   Age                       17660 non-null  int64  \n 3   Photo                     17660 non-null  object \n 4   Nationality               17660 non-null  object \n 5   Flag                      17660 non-null  object \n 6   Overall                   17660 non-null  int64  \n 7   Potential                 17660 non-null  int64  \n 8   Club                      17449 non-null  object \n 9   Club Logo                 17660 non-null  object \n 10  Value                     17660 non-null  object \n 11  Wage                      17660 non-null  object \n 12  Special                   17660 non-null  int64  \n 13  Preferred Foot            17660 non-null  object \n 14  International Reputation  17660 non-null  float64\n 15  Weak Foot                 17660 non-null  float64\n 16  Skill Moves               17660 non-null  float64\n 17  Work Rate                 17660 non-null  object \n 18  Body Type                 17622 non-null  object \n 19  Real Face                 17622 non-null  object \n 20  Position                  17625 non-null  object \n 21  Joined                    16562 non-null  object \n 22  Loaned From               694 non-null    object \n 23  Contract Valid Until      17299 non-null  object \n 24  Height                    17660 non-null  object \n 25  Weight                    17660 non-null  object \n 26  Release Clause            16509 non-null  object \n 27  Kit Number                17625 non-null  float64\n 28  Best Overall Rating       21 non-null     object \ndtypes: float64(4), int64(5), object(20)\nmemory usage: 3.9+ MB\n\n\n- .describe(): 숫자들이 저장된 column에 대하여 기본통계량 조사\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      ID\n      Age\n      Overall\n      Potential\n      Special\n      International Reputation\n      Weak Foot\n      Skill Moves\n      Kit Number\n    \n  \n  \n    \n      count\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17660.000000\n      17625.000000\n    \n    \n      mean\n      246319.424462\n      23.127746\n      63.369592\n      70.981200\n      1537.915855\n      1.106285\n      2.900340\n      2.297169\n      25.037957\n    \n    \n      std\n      31487.892861\n      4.639821\n      8.036268\n      6.529836\n      285.893809\n      0.407021\n      0.663523\n      0.754264\n      19.154116\n    \n    \n      min\n      16.000000\n      15.000000\n      43.000000\n      42.000000\n      749.000000\n      1.000000\n      1.000000\n      1.000000\n      1.000000\n    \n    \n      25%\n      240732.500000\n      20.000000\n      58.000000\n      67.000000\n      1387.000000\n      1.000000\n      3.000000\n      2.000000\n      11.000000\n    \n    \n      50%\n      257041.000000\n      22.000000\n      63.000000\n      71.000000\n      1548.000000\n      1.000000\n      3.000000\n      2.000000\n      22.000000\n    \n    \n      75%\n      263027.500000\n      26.000000\n      69.000000\n      75.000000\n      1727.000000\n      1.000000\n      3.000000\n      3.000000\n      32.000000\n    \n    \n      max\n      271340.000000\n      54.000000\n      91.000000\n      95.000000\n      2312.000000\n      5.000000\n      5.000000\n      5.000000\n      99.000000\n    \n  \n\n\n\n\n- pandas_profiling.ProfileReport()을 이용한 전체적인 조사\n\n# pandas_profiling.ProfileReport(df).to_file('fifa2023_reprot.html')\n\n- 특정열을 중심으로 정렬하여 보기\n\ndf.sort_values(by='Overall',ascending=False).reset_index()\n\n\n\n\n\n  \n    \n      \n      index\n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      41\n      188545\n      R. Lewandowski\n      33\n      https://cdn.sofifa.net/players/188/545/23_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      91\n      91\n      FC Barcelona\n      ...\n      Yes\n      <span class=\"pos pos25\">ST\n      Jul 18, 2022\n      NaN\n      2025\n      185cm\n      81kg\n      €172.2M\n      9.0\n      NaN\n    \n    \n      1\n      124\n      165153\n      K. Benzema\n      34\n      https://cdn.sofifa.net/players/165/153/23_60.png\n      France\n      https://cdn.sofifa.net/flags/fr.png\n      91\n      91\n      Real Madrid CF\n      ...\n      Yes\n      <span class=\"pos pos21\">CF\n      Jul 9, 2009\n      NaN\n      2023\n      185cm\n      81kg\n      €131.2M\n      9.0\n      NaN\n    \n    \n      2\n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n    \n    \n      3\n      56\n      158023\n      L. Messi\n      35\n      https://cdn.sofifa.net/players/158/023/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      91\n      91\n      Paris Saint-Germain\n      ...\n      Yes\n      <span class=\"pos pos23\">RW\n      Aug 10, 2021\n      NaN\n      2023\n      169cm\n      67kg\n      €99.9M\n      30.0\n      NaN\n    \n    \n      4\n      75\n      231747\n      K. Mbappé\n      23\n      https://cdn.sofifa.net/players/231/747/23_60.png\n      France\n      https://cdn.sofifa.net/flags/fr.png\n      91\n      95\n      Paris Saint-Germain\n      ...\n      Yes\n      <span class=\"pos pos25\">ST\n      Jul 1, 2018\n      NaN\n      2025\n      182cm\n      73kg\n      €366.7M\n      7.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      15513\n      266751\n      22 Jung Ho Yeon\n      20\n      https://cdn.sofifa.net/players/266/751/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      45\n      53\n      GwangJu FC\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 20, 2022\n      NaN\n      2026\n      180cm\n      73kg\n      €145K\n      23.0\n      NaN\n    \n    \n      17656\n      16215\n      268279\n      22 J. Looschen\n      24\n      https://cdn.sofifa.net/players/268/279/22_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      44\n      47\n      SV Meppen\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Mar 19, 2022\n      NaN\n      2026\n      178cm\n      78kg\n      €92K\n      42.0\n      NaN\n    \n    \n      17657\n      16042\n      255283\n      20 Kim Yeong Geun\n      22\n      https://cdn.sofifa.net/players/255/283/20_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      44\n      49\n      Gyeongnam FC\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 9, 2020\n      NaN\n      2020\n      174cm\n      71kg\n      €53K\n      43.0\n      NaN\n    \n    \n      17658\n      14634\n      269038\n      22 Zhang Wenxuan\n      16\n      https://cdn.sofifa.net/players/269/038/22_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      44\n      59\n      Guangzhou FC\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      May 1, 2022\n      NaN\n      2022\n      175cm\n      70kg\n      €239K\n      29.0\n      NaN\n    \n    \n      17659\n      17618\n      168933\n      07 I. Paskov\n      33\n      https://cdn.sofifa.net/players/168/933/07_60.png\n      Bulgaria\n      https://cdn.sofifa.net/flags/bg.png\n      43\n      42\n      NaN\n      ...\n      NaN\n      <span class=\"pos pos28\">SUB\n      NaN\n      NaN\n      NaN\n      184cm\n      79kg\n      NaN\n      24.0\n      NaN\n    \n  \n\n17660 rows × 30 columns\n\n\n\n- 특정열을 중심으로 그룹화하여 보기 (\\(\\star\\))\n\ndf.Nationality.unique() # 데이터셋에 포함된 나라들 출력\n\narray(['Germany', 'Portugal', 'Argentina', 'Belgium', 'Italy', 'Austria',\n       'Brazil', 'Croatia', 'Serbia', 'Spain', 'Netherlands', 'France',\n       'Colombia', 'England', 'Uruguay', 'Morocco', 'Egypt', 'Algeria',\n       'Ukraine', 'United States', \"Côte d'Ivoire\", 'Poland', 'Chile',\n       'Senegal', 'Central African Republic', 'Denmark', 'Nigeria',\n       'Mexico', 'Turkey', 'Canada', 'Wales', 'Scotland', 'Romania',\n       'Czech Republic', 'Ghana', 'Korea Republic',\n       'Bosnia and Herzegovina', 'Mali', 'Slovakia', 'Armenia', 'Norway',\n       'Switzerland', 'Cameroon', 'Peru', 'Jamaica', 'Zambia', 'Guinea',\n       'Sweden', 'North Macedonia', 'Russia', 'Tunisia', 'Malta',\n       'Angola', 'Republic of Ireland', 'Ecuador', 'Benin', 'Paraguay',\n       'Montenegro', 'Australia', 'Comoros', 'Gabon', 'Iceland',\n       'Slovenia', 'Japan', 'Israel', 'China PR', 'Venezuela', 'Liberia',\n       'Greece', 'Bulgaria', 'Honduras', 'Saudi Arabia', 'Curacao',\n       'Northern Ireland', 'Guinea Bissau', 'Kosovo', 'Hungary',\n       'Finland', 'Costa Rica', 'Albania', 'Congo DR', 'Iran',\n       'Mozambique', 'Suriname', 'Cape Verde Islands', 'Bolivia',\n       'Madagascar', 'New Zealand', 'Burkina Faso', 'Dominican Republic',\n       'Kazakhstan', 'Syria', 'Luxembourg', 'Kenya', 'Zimbabwe', 'Haiti',\n       'Uzbekistan', 'South Africa', 'Cyprus', 'Qatar',\n       'Equatorial Guinea', 'Libya', 'Thailand', 'Togo',\n       'Trinidad and Tobago', 'Liechtenstein', 'Gambia', 'Georgia',\n       'Philippines', 'Burundi', 'United Arab Emirates', 'Grenada',\n       'Iraq', 'Panama', 'Malaysia', 'Moldova', 'Congo', 'India',\n       'Jordan', 'Kuwait', 'Antigua and Barbuda', 'Cuba', 'Vietnam',\n       'Korea DPR', 'Uganda', 'Lithuania', 'Estonia', 'Montserrat',\n       'Sierra Leone', 'Afghanistan', 'New Caledonia', 'Belarus', 'Laos',\n       'Saint Lucia', 'Bhutan', 'Guyana', 'Mauritania', 'Faroe Islands',\n       'Namibia', 'Niger', 'Palestine', 'Sudan', 'Azerbaijan',\n       'Hong Kong', 'Gibraltar', 'Tanzania', 'Latvia', 'Chinese Taipei',\n       'Singapore', 'Lebanon', 'El Salvador', 'Indonesia', 'Guatemala',\n       'Papua New Guinea', 'Puerto Rico', 'Malawi', 'South Sudan',\n       'Ethiopia', 'San Marino', 'Andorra', 'Saint Kitts and Nevis'],\n      dtype=object)\n\n\n\ndf.groupby(by='Nationality')[['Overall']].agg({np.mean,len}).sort_values(('Overall', 'mean'),ascending=False)\n\n\n\n\n\n  \n    \n      \n      Overall\n    \n    \n      \n      mean\n      len\n    \n    \n      Nationality\n      \n      \n    \n  \n  \n    \n      Philippines\n      74.000000\n      1\n    \n    \n      Namibia\n      72.000000\n      1\n    \n    \n      Mozambique\n      72.000000\n      2\n    \n    \n      Kuwait\n      71.000000\n      1\n    \n    \n      Brazil\n      70.556586\n      539\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      San Marino\n      53.000000\n      1\n    \n    \n      China PR\n      52.230769\n      325\n    \n    \n      South Sudan\n      52.000000\n      5\n    \n    \n      India\n      51.994681\n      188\n    \n    \n      Saint Kitts and Nevis\n      51.000000\n      1\n    \n  \n\n161 rows × 2 columns\n\n\n\n\ngroupby는 나중에 다시 설명 합니다."
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson18.html#데이터정리하기",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson18.html#데이터정리하기",
    "title": "Lesson 18: FIFA23 자료분석",
    "section": "데이터정리하기",
    "text": "데이터정리하기\n- 칼럼이름변경\n\ndf.set_axis(pd.Index(map(lambda x: x.replace(' ','_'), df.columns)), axis=1)\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club_Logo\n      ...\n      Real_Face\n      Position\n      Joined\n      Loaned_From\n      Contract_Valid_Until\n      Height\n      Weight\n      Release_Clause\n      Kit_Number\n      Best_Overall_Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n- 결측치제거\n\ndf.drop(columns=['Loaned From', 'Best Overall Rating']).dropna()\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Work Rate\n      Body Type\n      Real Face\n      Position\n      Joined\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      High/ Medium\n      Unique\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      High/ High\n      Stocky (170-185)\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      High/ High\n      Normal (170-)\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n    \n  \n\n16364 rows × 27 columns\n\n\n\n- Height, Weight의 자료형을 float형으로 수정하기\n\ndf.assign(\n    Height= list(map(lambda x: float(x[:-2]), df.Height)),\n    Weight= list(map(lambda x: float(x[:-2]), df.Weight))\n)\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189.0\n      82.0\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179.0\n      69.0\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172.0\n      69.0\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181.0\n      70.0\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172.0\n      68.0\n      €154.4M\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190.0\n      78.0\n      €218K\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195.0\n      84.0\n      €188K\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190.0\n      82.0\n      €142K\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187.0\n      79.0\n      €214K\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186.0\n      78.0\n      €131K\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n- Release Clause의 자료형을 float으로 수정하기\n\ndf['Release Clause']\n\n0          €157M\n1          €155M\n2         €97.7M\n3        €198.9M\n4        €154.4M\n          ...   \n17655      €218K\n17656      €188K\n17657      €142K\n17658      €214K\n17659      €131K\nName: Release Clause, Length: 17660, dtype: object\n\n\n\n_f = lambda x: float(x[1:-1])*1000 if x[-1]=='K' else float(x[1:-1])*1000000\n\n\n_f('€157M')\n\n157000000.0\n\n\n\n_f('€131K')\n\n131000.0\n\n\n(시도1–실패)\n\nlist(map(_f,df['Release Clause']))\n\nTypeError: 'float' object is not subscriptable\n\n\n(시도1이 실패한 이유)\n\ndf['Release Clause'].isna().sum() # 이 column에는 1151개의 결측치가 존재\n\n1151\n\n\n(nan에 대한 예비학습)\n\ndf.loc[df['Release Clause'].isna(), 'Release Clause']\n\n18       NaN\n34       NaN\n38       NaN\n49       NaN\n50       NaN\n        ... \n17378    NaN\n17386    NaN\n17535    NaN\n17590    NaN\n17618    NaN\nName: Release Clause, Length: 1151, dtype: object\n\n\n\ndf.loc[18, 'Release Clause']\n\nnan\n\n\n\npd.isna(df.loc[18, 'Release Clause'])\n\nTrue\n\n\n\ntype(df.loc[18, 'Release Clause'])\n\nfloat\n\n\n\ndf.loc[18, 'Release Clause'][-1]\n\nTypeError: 'float' object is not subscriptable\n\n\n(시도2–성공)\n\ndf.rename(columns={'Release Clause':'ReleaseClause'})\\\n.assign(ReleaseClause = list(map(lambda x: _f(x) if pd.isna(x)==False else x , df['Release Clause'])))\\\n.rename(columns={'ReleaseClause':'Release Clause'})\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      157000000.0\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      155000000.0\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      97700000.0\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      198900000.0\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      154400000.0\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190cm\n      78kg\n      218000.0\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195cm\n      84kg\n      188000.0\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190cm\n      82kg\n      142000.0\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187cm\n      79kg\n      214000.0\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186cm\n      78kg\n      131000.0\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n(시도3–성공) 그냥 결측치를 제거하고 변형해도 무방..\n\ndf2 = df.drop(columns=['Loaned From', 'Best Overall Rating']).dropna()\ndf2['Release Clause'] = list(map(lambda x: _f(x) if pd.isna(x)==False else x , df2['Release Clause']))\ndf2\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Work Rate\n      Body Type\n      Real Face\n      Position\n      Joined\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      High/ Medium\n      Unique\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      2026\n      189cm\n      82kg\n      157000000.0\n      8.0\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      2026\n      179cm\n      69kg\n      155000000.0\n      8.0\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      High/ High\n      Stocky (170-185)\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      2024\n      172cm\n      69kg\n      97700000.0\n      19.0\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      2025\n      181cm\n      70kg\n      198900000.0\n      17.0\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      High/ High\n      Normal (170-)\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      2026\n      172cm\n      68kg\n      154400000.0\n      23.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      2027\n      190cm\n      78kg\n      218000.0\n      35.0\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      2026\n      195cm\n      84kg\n      188000.0\n      21.0\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      2023\n      190cm\n      82kg\n      142000.0\n      12.0\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      2021\n      187cm\n      79kg\n      214000.0\n      40.0\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      2021\n      186cm\n      78kg\n      131000.0\n      30.0\n    \n  \n\n16364 rows × 27 columns\n\n\n\n\n분석의 편의를 위하여 (1) colnames를 변경하고 (2) 결측치를 제거하고 (3) 몇 가지 전 처리를 추가로 진행한 뒤 df2를 만들어서 분석하는게 좋음"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson18.html#데이터분석시각화",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson18.html#데이터분석시각화",
    "title": "Lesson 18: FIFA23 자료분석",
    "section": "데이터분석+시각화",
    "text": "데이터분석+시각화\n- Overall vs Potential\n\nggplot(data=df) + geom_point(aes(x='Overall',y='Potential'))\n\n\n\n\n<ggplot: (8772275859669)>\n\n\n\n뭔가 Potential > Overall 인 관계가 성립하는 듯 하다. \\(\\to\\) 우리가 생각하는 포텐셜의 의미는 사실 Potential2 = Potential - Overall 에 더 가깝다. \\(\\to\\) Potential2 = Potential - Overall 인 변수를 새로 만들고 시각화 해보자.\n\n- Potential2 = Potential - Overall 를 계산하여 새로운 열을 추가하자.\n\ndf.eval('Potential2 = Potential - Overall')\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n      Potential2\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n      NaN\n      1\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n      NaN\n      1\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n      NaN\n      0\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n      0\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n      3\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n      13\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n      16\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n      5\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n      15\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n      11\n    \n  \n\n17660 rows × 30 columns\n\n\n\n- 수정된 데이터프레임으로 다시 시각화를 하자.\n\nggplot(data=df.eval('Potential2 = Potential - Overall'))\\\n+ geom_point(aes(x='Overall',y='Potential2'),alpha=0.01)\n\n\n\n\n<ggplot: (8772307230189)>\n\n\n- 일부점들이 겹치므로 position = ’jitter’를 사용하여 점들을 흩뿌리자.\n\nggplot(data=df.eval('Potential2 = Potential - Overall'))\\\n+ geom_point(aes(x='Overall',y='Potential2'),alpha=0.05,position='jitter')\n\n\n\n\n<ggplot: (8772275596573)>\n\n\n- 해석 - 해석1: Overall, Potential2는 음의 상관관계가 있다. - 해석2: 0근처에 데이터가 많음 \\(\\to\\) 이미 은퇴한 선수들이 아닐까? - 해석3: Overall의 값이 작을수록 Potential2의 분산이 크다.\n- 은퇴한 선수들은 제외하고 시각화하자.\n\nggplot(data=df.eval('Potential2 = Potential - Overall').query('Potential2 > 1'))\\\n+ geom_point(aes(x='Overall',y='Potential2'),alpha=0.05,position='jitter')\n\n\n\n\n<ggplot: (8772275556513)>\n\n\n- Overall에 따라서 구간을 나누고 그 구간에 대응하는 boxplot을 그리자.\n\ndf.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.Overall.describe()\n\ncount    13644.000000\nmean        61.415347\nstd          7.247821\nmin         44.000000\n25%         56.000000\n50%         61.000000\n75%         66.000000\nmax         91.000000\nName: Overall, dtype: float64\n\n\n\ndef f(x):\n    if x>66: \n        y='66<'\n    elif x>61:\n        y='61~66'\n    elif x>56:\n        y='56~61'\n    else:\n        y='<56' \n    return y\n\n\nggplot(data=df.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall))))\\\n    + geom_boxplot(aes(x='Overall_grouped',y='Potential2',color='Overall_grouped'))\n\n\n\n\n<ggplot: (8772275730901)>\n\n\n\nOverall_grouped = “<56” 에 대응하는 점들을 모두 뽑아서 mean(Overall)를 계산하고 그 값을 Overall_grouped = “<56” 에 대응하는 박스플랏의 x축위치로 설정\nOverall_grouped = “56~61” 에 대응하는 점들을 모두 뽑아서 mean(Overall)를 계산하고 그 값을 Overall_grouped = “56~61” 에 대응하는 박스플랏의 x축위치로 설정\nOverall_grouped = “61~66” 에 대응하는 점들을 모두 뽑아서 mean(Overall)를 계산하고 그 값을 Overall_grouped = “61~66” 에 대응하는 박스플랏의 x축위치로 설정\nOverall_grouped = “66<” 에 대응하는 점들을 모두 뽑아서 mean(Overall)를 계산하고 그 값을 Overall_grouped = “66<” 에 대응하는 박스플랏의 x축위치로 설정\n\n\ndf.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall)))\\\n.query(\"Overall_grouped == '66<'\").Overall.mean()\n\n71.8127687727423\n\n\n(방법1)\n\ndef g(x):\n    if x=='66<': \n        y= 71.8127687727423\n    elif x=='61~66':\n        y= 63.773918342474104\n    elif x=='56~61':\n        y= 59.155840684309005\n    else:\n        y= 52.87743190661479\n    return y\n\n\ndf.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall)))\\\n.assign(Overall_x= lambda df: list(map(g,df.Overall_grouped)))\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n      Potential2\n      Overall_grouped\n      Overall_x\n    \n  \n  \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      10\n      228251\n      L. Pellegrini\n      26\n      https://cdn.sofifa.net/players/228/251/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      84\n      87\n      Roma\n      https://cdn.sofifa.net/teams/52/30.png\n      ...\n      NaN\n      2026\n      186cm\n      77kg\n      €97.6M\n      7.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      13\n      225193\n      Merino\n      26\n      https://cdn.sofifa.net/players/225/193/23_60.png\n      Spain\n      https://cdn.sofifa.net/flags/es.png\n      83\n      86\n      Real Sociedad\n      https://cdn.sofifa.net/teams/457/30.png\n      ...\n      NaN\n      2025\n      189cm\n      83kg\n      €102.2M\n      8.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      17\n      228702\n      F. de Jong\n      25\n      https://cdn.sofifa.net/players/228/702/23_60.png\n      Netherlands\n      https://cdn.sofifa.net/flags/nl.png\n      87\n      92\n      FC Barcelona\n      https://cdn.sofifa.net/teams/241/30.png\n      ...\n      NaN\n      2026\n      180cm\n      74kg\n      €247.6M\n      21.0\n      NaN\n      5\n      66<\n      71.812769\n    \n    \n      21\n      231281\n      T. Alexander-Arnold\n      23\n      https://cdn.sofifa.net/players/231/281/23_60.png\n      England\n      https://cdn.sofifa.net/flags/gb-eng.png\n      87\n      90\n      Liverpool\n      https://cdn.sofifa.net/teams/9/30.png\n      ...\n      NaN\n      2025\n      180cm\n      69kg\n      €193.5M\n      66.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n      13\n      <56\n      52.877432\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n      16\n      <56\n      52.877432\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n      5\n      <56\n      52.877432\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n      15\n      <56\n      52.877432\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n      11\n      <56\n      52.877432\n    \n  \n\n13644 rows × 32 columns\n\n\n\n\ndf2= df.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall)))\\\n.assign(Overall_x= lambda df: list(map(g,df.Overall_grouped)))\ndf2\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n      Potential2\n      Overall_grouped\n      Overall_x\n    \n  \n  \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      10\n      228251\n      L. Pellegrini\n      26\n      https://cdn.sofifa.net/players/228/251/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      84\n      87\n      Roma\n      https://cdn.sofifa.net/teams/52/30.png\n      ...\n      NaN\n      2026\n      186cm\n      77kg\n      €97.6M\n      7.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      13\n      225193\n      Merino\n      26\n      https://cdn.sofifa.net/players/225/193/23_60.png\n      Spain\n      https://cdn.sofifa.net/flags/es.png\n      83\n      86\n      Real Sociedad\n      https://cdn.sofifa.net/teams/457/30.png\n      ...\n      NaN\n      2025\n      189cm\n      83kg\n      €102.2M\n      8.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      17\n      228702\n      F. de Jong\n      25\n      https://cdn.sofifa.net/players/228/702/23_60.png\n      Netherlands\n      https://cdn.sofifa.net/flags/nl.png\n      87\n      92\n      FC Barcelona\n      https://cdn.sofifa.net/teams/241/30.png\n      ...\n      NaN\n      2026\n      180cm\n      74kg\n      €247.6M\n      21.0\n      NaN\n      5\n      66<\n      71.812769\n    \n    \n      21\n      231281\n      T. Alexander-Arnold\n      23\n      https://cdn.sofifa.net/players/231/281/23_60.png\n      England\n      https://cdn.sofifa.net/flags/gb-eng.png\n      87\n      90\n      Liverpool\n      https://cdn.sofifa.net/teams/9/30.png\n      ...\n      NaN\n      2025\n      180cm\n      69kg\n      €193.5M\n      66.0\n      NaN\n      3\n      66<\n      71.812769\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n      13\n      <56\n      52.877432\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n      16\n      <56\n      52.877432\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n      5\n      <56\n      52.877432\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n      15\n      <56\n      52.877432\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n      11\n      <56\n      52.877432\n    \n  \n\n13644 rows × 32 columns\n\n\n\n\nggplot(data=df2)\\\n+geom_point(aes(x='Overall',y='Potential2',color='Overall_grouped'),position='jitter',alpha=0.05)\\\n+geom_boxplot(aes(x='Overall_x',y='Potential2',color='Overall_grouped'))\n\n\n\n\n<ggplot: (8772275710537)>\n\n\n(방법2)\n\n_df = df.eval('Potential2 = Potential - Overall').query('Potential2 > 1')\\\n.assign(Overall_grouped= lambda df: list(map(f,df.Overall)))\n\n\ndf3=_df.groupby(by=\"Overall_grouped\").agg({'Overall':np.mean}).reset_index()\\\n.rename(columns={'Overall':'Overall_x'}).merge(_df)\n\n\nggplot(data=df3)\\\n+geom_point(aes(x='Overall',y='Potential2',color='Overall_grouped'),position='jitter',alpha=0.05)\\\n+geom_boxplot(aes(x='Overall_x',y='Potential2',color='Overall_grouped'))\n\n\n\n\n<ggplot: (8772275671993)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col",
    "text": "geom_col\n- 예시1: 한국과 일본의 평균능력치 비교\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean}).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      Overall\n    \n  \n  \n    \n      0\n      Japan\n      66.478873\n    \n    \n      1\n      Korea Republic\n      65.457627\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',y='Overall'))\n\n\n\n\n<ggplot: (8739001076625)>\n\n\n- 예시2: 한국과 일본의 평균능력치 비교 (색상변경)\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean}).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      Overall\n    \n  \n  \n    \n      0\n      Japan\n      66.478873\n    \n    \n      1\n      Korea Republic\n      65.457627\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',y='Overall',fill='Nationality'))\n#ggplot(data)+geom_col(aes(x='Nationality',y='Overall',color='Nationality'))\n\n\n\n\n<ggplot: (8739001430581)>\n\n\n- 예시3: 한국과 일본의 평균연령 비교\n\ndata=df.groupby('Nationality').agg({'Age':np.mean}).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      Age\n    \n  \n  \n    \n      0\n      Japan\n      26.084507\n    \n    \n      1\n      Korea Republic\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',y='Age',fill='Nationality'))\n\n\n\n\n<ggplot: (8739000939717)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col-positiondodge",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col-positiondodge",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col + position=‘dodge’",
    "text": "geom_col + position=‘dodge’\n- 예시1: 한국과 일본의 평균연령+평균능력치 비교\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean,'Age':np.mean})\\\n.stack().reset_index().rename({0:'value'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      level_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      66.478873\n    \n    \n      1\n      Japan\n      Age\n      26.084507\n    \n    \n      2\n      Korea Republic\n      Overall\n      65.457627\n    \n    \n      3\n      Korea Republic\n      Age\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='level_1',fill='Nationality',y='value'),position='dodge')\n\n\n\n\n<ggplot: (8739004389489)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col-coord_flip",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col-coord_flip",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col + coord_flip()",
    "text": "geom_col + coord_flip()\n- 예시1: 한국과 일본의 평균연령+평균능력치 비교 (90도회전)\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean,'Age':np.mean})\\\n.stack().reset_index().rename({0:'value'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      level_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      66.478873\n    \n    \n      1\n      Japan\n      Age\n      26.084507\n    \n    \n      2\n      Korea Republic\n      Overall\n      65.457627\n    \n    \n      3\n      Korea Republic\n      Age\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='level_1',fill='Nationality',y='value'),position='dodge')\\\n+coord_flip()\n\n\n\n\n<ggplot: (8739001299161)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col-facet_wrapvar",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col-facet_wrapvar",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col + facet_wrap(var)",
    "text": "geom_col + facet_wrap(var)\n- 예시1: 한국과 일본의 평균연령+평균능력치 비교 (면분할)\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean,'Age':np.mean})\\\n.stack().reset_index().rename({0:'value'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      level_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      66.478873\n    \n    \n      1\n      Japan\n      Age\n      26.084507\n    \n    \n      2\n      Korea Republic\n      Overall\n      65.457627\n    \n    \n      3\n      Korea Republic\n      Age\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',fill='Nationality',y='value'),position='dodge')\\\n+facet_wrap('level_1')\n\n\n\n\n<ggplot: (8739001171105)>\n\n\n- 예시2: 한국과 일본의 평균연령+평균능력치 비교 (면분할)\n\ndata=df.groupby('Nationality').agg({'Overall':np.mean,'Age':np.mean})\\\n.stack().reset_index().rename({0:'value'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      level_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      66.478873\n    \n    \n      1\n      Japan\n      Age\n      26.084507\n    \n    \n      2\n      Korea Republic\n      Overall\n      65.457627\n    \n    \n      3\n      Korea Republic\n      Age\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='level_1',fill='Nationality',y='value'),position='dodge')\\\n+facet_wrap('Nationality')\n\n\n\n\n<ggplot: (8739005005861)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col-facet_gridvar_y-var_x",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_col-facet_gridvar_y-var_x",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_col + facet_grid(‘var_y ~ var_x’)",
    "text": "geom_col + facet_grid(‘var_y ~ var_x’)\n- 예시1: 한국과 일본의 평균연령+평균능력치+최대능력치 비교 (면분할)\n\ndata=df.groupby('Nationality').agg({'Overall':[np.mean,np.max],'Age':np.mean})\\\n.melt(ignore_index=False).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      variable_0\n      variable_1\n      value\n    \n  \n  \n    \n      0\n      Japan\n      Overall\n      mean\n      66.478873\n    \n    \n      1\n      Korea Republic\n      Overall\n      mean\n      65.457627\n    \n    \n      2\n      Japan\n      Overall\n      amax\n      79.000000\n    \n    \n      3\n      Korea Republic\n      Overall\n      amax\n      89.000000\n    \n    \n      4\n      Japan\n      Age\n      mean\n      26.084507\n    \n    \n      5\n      Korea Republic\n      Age\n      mean\n      27.158192\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(fill='Nationality',x='Nationality',y='value'),position='dodge')\\\n+facet_grid('variable_1~variable_0')\n\n\n\n\n<ggplot: (8739001454385)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_bar-vs-geom_col",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_bar-vs-geom_col",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_bar vs geom_col",
    "text": "geom_bar vs geom_col\n- 예시1: 한국과 일본의 단순 선수 숫자 비교 (with goem_col)\n\ndata=df.groupby('Nationality').agg({'Age':'count'}).reset_index().rename({'Age':'count'},axis=1)\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      count\n    \n  \n  \n    \n      0\n      Japan\n      284\n    \n    \n      1\n      Korea Republic\n      177\n    \n  \n\n\n\n\n\nggplot(data)+geom_col(aes(x='Nationality',fill='Nationality',y='count'))\n\n\n\n\n<ggplot: (8739001309845)>\n\n\n- 예시2: 한국과 일본의 단순 선수 숫자 비교 (with goem_bar)\n\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality'))\n\n\n\n\n<ggplot: (8739003315533)>\n\n\n\n특징1: 원래 데이터프레임 그대로 하는게 아니라 뭔가 변형된 값이 출력 (정확하게는 groupby + count가 변형요소)\n특징2: y는 당연히 count이므로 y를 명시할 필요가 없음. (잘 생각해보면 명시하고 싶어도 명시할 수 없음, y는 groupby + count 에 의해서 계산된 값이고 df자체에는 존재하지 않음)\n\n- 이렇게 약속된 변형은 stat='count' 옵션 때문에 가능함\n\nstat=’count’는 그룹바이이후에 count를 하라는 의미\n\n\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality'),stat='count')\n\n\n\n\n<ggplot: (8739005443049)>\n\n\n- stat='identity' 로 옵션을 바꾸면 약속된 변환이 수행되지 않음\n\nstat=’identity’는 아무 변환도 하지말라는 의미\n\n\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality'),stat='identity')\n\nKeyError: 'y'\n\n\n\n에러가난다.\n\n(참고) 사실 아래의 3개의 코드가 모두 같다. <– 수업시간에 설명 X\n\nggplot(df)+geom_bar(aes(x='Nationality',y='..count..',fill='Nationality'),stat='count')\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality'),stat='count') # y='..count..' 생략,\nggplot(df)+geom_bar(aes(x='Nationality',fill='Nationality')) # y='..count..' 생략, stat='count' 생략\n\n\n\n\n<ggplot: (8739004080929)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_bar의-불편한점",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#geom_bar의-불편한점",
    "title": "Lesson 19: 심슨의 역설",
    "section": "geom_bar()의 불편한점",
    "text": "geom_bar()의 불편한점\n- 사실 편하라고 만든것 같은데, 그닥 편하지 않음.\n\n편하라고 만든 점1: groupby를 자동으로 해줘서 groupby를 못하는 유저들이 사용하기 편리하게 함 -> 그런데 우리는 groupby 잘함\n편하라고 만든 점2: groupby이후 count연산을 알아서 해줌 -> 그런데 count연산만 알아서해주고 그 이외의 연산은 잘 지원안됨\n\n- 결론: groupby + count 조합에서만 편리하고 나머지는 편하지 않다.\n- 불편한 예시: 나라별 overall의 평균을 geom_bar()로 플랏해보라.\n\ndata= df.groupby('Nationality').agg({'Overall':np.mean}).reset_index()\ndata\n\n\n\n\n\n  \n    \n      \n      Nationality\n      Overall\n    \n  \n  \n    \n      0\n      Japan\n      66.478873\n    \n    \n      1\n      Korea Republic\n      65.457627\n    \n  \n\n\n\n\n\nggplot(data)+geom_bar(aes(x='Nationality',y='Overall',fill='Nationality'),stat='identity')\nggplot(data)+geom_col(aes(x='Nationality',y='Overall',fill='Nationality'))\n\n\n\n\n<ggplot: (8738999896737)>"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#시각화1-전체합격률",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#시각화1-전체합격률",
    "title": "Lesson 19: 심슨의 역설",
    "section": "시각화1: 전체합격률",
    "text": "시각화1: 전체합격률\n- df1\n\ndf.groupby(['gender','result']).agg({'count':np.sum}).reset_index()\n\n\n\n\n\n  \n    \n      \n      gender\n      result\n      count\n    \n  \n  \n    \n      0\n      female\n      fail\n      1063\n    \n    \n      1\n      female\n      pass\n      772\n    \n    \n      2\n      male\n      fail\n      1291\n    \n    \n      3\n      male\n      pass\n      1400\n    \n  \n\n\n\n\n- df2\n\ndf.groupby('gender').agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1)\n\n\n\n\n\n  \n    \n      \n      gender\n      count2\n    \n  \n  \n    \n      0\n      female\n      1835\n    \n    \n      1\n      male\n      2691\n    \n  \n\n\n\n\n- merge: 두개의 데이터프레임을 합친다\n\ndf.groupby(['gender','result']).agg({'count':np.sum}).reset_index()\\\n.merge(df.groupby('gender').agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\n\n\n\n\n\n  \n    \n      \n      gender\n      result\n      count\n      count2\n    \n  \n  \n    \n      0\n      female\n      fail\n      1063\n      1835\n    \n    \n      1\n      female\n      pass\n      772\n      1835\n    \n    \n      2\n      male\n      fail\n      1291\n      2691\n    \n    \n      3\n      male\n      pass\n      1400\n      2691\n    \n  \n\n\n\n\n- 비율계산\n\ndf.groupby(['gender','result']).agg({'count':np.sum}).reset_index()\\\n.merge(df.groupby('gender').agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\\\n.eval('rate = count/count2')\n\n\n\n\n\n  \n    \n      \n      gender\n      result\n      count\n      count2\n      rate\n    \n  \n  \n    \n      0\n      female\n      fail\n      1063\n      1835\n      0.579292\n    \n    \n      1\n      female\n      pass\n      772\n      1835\n      0.420708\n    \n    \n      2\n      male\n      fail\n      1291\n      2691\n      0.479747\n    \n    \n      3\n      male\n      pass\n      1400\n      2691\n      0.520253\n    \n  \n\n\n\n\n- 시각화\n\ndata1= df.groupby(['gender','result']).agg({'count':np.sum}).reset_index()\\\n.merge(df.groupby('gender').agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\\\n.eval('rate = count/count2')\nggplot(data1.query('result==\"pass\"'))+geom_col(aes(x='gender',fill='gender',y='rate'))\n\n\n\n\n<ggplot: (8789343060161)>\n\n\n- 결론: 남자의 합격률이 더 높다. \\(\\to\\) 성차별이 있어보인다(?)"
  },
  {
    "objectID": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#시각화2-학과별-합격률",
    "href": "posts/Day3/09_PandasBackend/2023-02-01-Lesson19.html#시각화2-학과별-합격률",
    "title": "Lesson 19: 심슨의 역설",
    "section": "시각화2: 학과별 합격률",
    "text": "시각화2: 학과별 합격률\n- df2\n\ndf.groupby(['department','gender']).agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1)\n\n\n\n\n\n  \n    \n      \n      department\n      gender\n      count2\n    \n  \n  \n    \n      0\n      A\n      female\n      108\n    \n    \n      1\n      A\n      male\n      825\n    \n    \n      2\n      B\n      female\n      25\n    \n    \n      3\n      B\n      male\n      560\n    \n    \n      4\n      C\n      female\n      593\n    \n    \n      5\n      C\n      male\n      325\n    \n    \n      6\n      D\n      female\n      375\n    \n    \n      7\n      D\n      male\n      417\n    \n    \n      8\n      E\n      female\n      393\n    \n    \n      9\n      E\n      male\n      191\n    \n    \n      10\n      F\n      female\n      341\n    \n    \n      11\n      F\n      male\n      373\n    \n  \n\n\n\n\n- merge\n\ndf.merge(df.groupby(['department','gender']).agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\\\n.eval('rate = count/count2')\n\n\n\n\n\n  \n    \n      \n      department\n      result\n      gender\n      count\n      count2\n      rate\n    \n  \n  \n    \n      0\n      A\n      fail\n      female\n      19\n      108\n      0.175926\n    \n    \n      1\n      A\n      pass\n      female\n      89\n      108\n      0.824074\n    \n    \n      2\n      A\n      fail\n      male\n      314\n      825\n      0.380606\n    \n    \n      3\n      A\n      pass\n      male\n      511\n      825\n      0.619394\n    \n    \n      4\n      B\n      fail\n      female\n      7\n      25\n      0.280000\n    \n    \n      5\n      B\n      pass\n      female\n      18\n      25\n      0.720000\n    \n    \n      6\n      B\n      fail\n      male\n      208\n      560\n      0.371429\n    \n    \n      7\n      B\n      pass\n      male\n      352\n      560\n      0.628571\n    \n    \n      8\n      C\n      fail\n      female\n      391\n      593\n      0.659359\n    \n    \n      9\n      C\n      pass\n      female\n      202\n      593\n      0.340641\n    \n    \n      10\n      C\n      fail\n      male\n      204\n      325\n      0.627692\n    \n    \n      11\n      C\n      pass\n      male\n      121\n      325\n      0.372308\n    \n    \n      12\n      D\n      fail\n      female\n      244\n      375\n      0.650667\n    \n    \n      13\n      D\n      pass\n      female\n      131\n      375\n      0.349333\n    \n    \n      14\n      D\n      fail\n      male\n      279\n      417\n      0.669065\n    \n    \n      15\n      D\n      pass\n      male\n      138\n      417\n      0.330935\n    \n    \n      16\n      E\n      fail\n      female\n      299\n      393\n      0.760814\n    \n    \n      17\n      E\n      pass\n      female\n      94\n      393\n      0.239186\n    \n    \n      18\n      E\n      fail\n      male\n      137\n      191\n      0.717277\n    \n    \n      19\n      E\n      pass\n      male\n      54\n      191\n      0.282723\n    \n    \n      20\n      F\n      fail\n      female\n      103\n      341\n      0.302053\n    \n    \n      21\n      F\n      pass\n      female\n      238\n      341\n      0.697947\n    \n    \n      22\n      F\n      fail\n      male\n      149\n      373\n      0.399464\n    \n    \n      23\n      F\n      pass\n      male\n      224\n      373\n      0.600536\n    \n  \n\n\n\n\n- 시각화\n\ndata2=df.merge(df.groupby(['department','gender']).agg({'count':np.sum}).reset_index().rename({'count':'count2'},axis=1))\\\n.eval('rate = count/count2')\nggplot(data2.query('result==\"pass\"'))+geom_col(aes(x='gender',fill='gender',y='rate'))\\\n+facet_wrap('department')\n\n\n\n\n<ggplot: (8789343111249)>\n\n\n\n학과별로 살펴보니 오히려 A,B,F,D의 경우 여성의 합격률이 높다.\n\n- 교재에서 설명한 이유: 여성이 합격률이 낮은 학과에만 많이 지원하였기 때문\n\nggplot(data2.query('result==\"pass\"'))+geom_col(aes(x='department',y='count2',fill='gender'),position='dodge')\n\n\n\n\n<ggplot: (8789343070225)>\n\n\n\n살펴보니 합격률이 높은 A,B학과의 경우 상대적으로 남성이 많이 지원하였음. 합격률이 낮은 C,D학과는 상대적으로 여성이 많이 지원함. D,F의 지원수는 비슷"
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#flights-data",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#flights-data",
    "title": "Lesson 14: groupby",
    "section": "flights data",
    "text": "flights data\n\ndf=pd.read_csv('https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/flights.csv')\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 58492 entries, 0 to 58491\nData columns (total 14 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   MONTH      58492 non-null  int64  \n 1   DAY        58492 non-null  int64  \n 2   WEEKDAY    58492 non-null  int64  \n 3   AIRLINE    58492 non-null  object \n 4   ORG_AIR    58492 non-null  object \n 5   DEST_AIR   58492 non-null  object \n 6   SCHED_DEP  58492 non-null  int64  \n 7   DEP_DELAY  57659 non-null  float64\n 8   AIR_TIME   57474 non-null  float64\n 9   DIST       58492 non-null  int64  \n 10  SCHED_ARR  58492 non-null  int64  \n 11  ARR_DELAY  57474 non-null  float64\n 12  DIVERTED   58492 non-null  int64  \n 13  CANCELLED  58492 non-null  int64  \ndtypes: float64(3), int64(8), object(3)\nmemory usage: 6.2+ MB"
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#get_groups",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#get_groups",
    "title": "Lesson 14: groupby",
    "section": "get_groups",
    "text": "get_groups\n- groupby - 데이터프레임을 여러개의 서브데이터프레임으로 나누는 기슨 - 단독으로 쓸 이유는 별로 없다. \\(\\to\\) 그룹을 나누고 each 그룹마다 어떠한 “변수”에 “연산”을 하기 위함.\n\ndf.groupby(by=\"AIRLINE\")\n\n<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fa7462529d0>\n\n\n\n지금 이것이 항공사별로 데이터프레임이 나누어진 상태임\n\n- 진짜 sub dataframe 으로 나누어져 있는지 확인\n\ngrouped = df.groupby(by=\"AIRLINE\")\ngrouped.groups.keys()\n\ndict_keys(['AA', 'AS', 'B6', 'DL', 'EV', 'F9', 'HA', 'MQ', 'NK', 'OO', 'UA', 'US', 'VX', 'WN'])\n\n\n\ndisplay(grouped.get_group('AS'))\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      38\n      1\n      1\n      4\n      AS\n      PHX\n      SEA\n      1505\n      -2.0\n      155.0\n      1107\n      1702\n      -3.0\n      0\n      0\n    \n    \n      198\n      1\n      2\n      5\n      AS\n      LAX\n      SEA\n      2110\n      5.0\n      145.0\n      954\n      2352\n      8.0\n      0\n      0\n    \n    \n      241\n      1\n      2\n      5\n      AS\n      LAS\n      PDX\n      650\n      -5.0\n      117.0\n      763\n      906\n      -3.0\n      0\n      0\n    \n    \n      277\n      1\n      2\n      5\n      AS\n      ORD\n      ANC\n      935\n      -1.0\n      402.0\n      2846\n      1339\n      -6.0\n      0\n      0\n    \n    \n      397\n      1\n      3\n      6\n      AS\n      LAS\n      SEA\n      1300\n      48.0\n      137.0\n      867\n      1535\n      47.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58305\n      12\n      30\n      3\n      AS\n      LAX\n      SEA\n      1325\n      -2.0\n      134.0\n      954\n      1608\n      -7.0\n      0\n      0\n    \n    \n      58355\n      12\n      31\n      4\n      AS\n      PHX\n      SEA\n      1200\n      -5.0\n      145.0\n      1107\n      1407\n      -24.0\n      0\n      0\n    \n    \n      58404\n      12\n      31\n      4\n      AS\n      SFO\n      SLC\n      2110\n      -2.0\n      80.0\n      599\n      2358\n      -4.0\n      0\n      0\n    \n    \n      58407\n      12\n      31\n      4\n      AS\n      SFO\n      PDX\n      645\n      -2.0\n      81.0\n      550\n      832\n      -3.0\n      0\n      0\n    \n    \n      58428\n      12\n      31\n      4\n      AS\n      LAX\n      SEA\n      1420\n      -8.0\n      127.0\n      954\n      1709\n      -25.0\n      0\n      0\n    \n  \n\n768 rows × 14 columns\n\n\n\n\n#collapse_output\nfor key in grouped.groups.keys():\n    display(grouped.get_group(key))\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      3\n      1\n      1\n      4\n      AA\n      DFW\n      DCA\n      1555\n      7.0\n      126.0\n      1192\n      1935\n      -7.0\n      0\n      0\n    \n    \n      6\n      1\n      1\n      4\n      AA\n      DFW\n      MSY\n      1250\n      84.0\n      64.0\n      447\n      1410\n      83.0\n      0\n      0\n    \n    \n      8\n      1\n      1\n      4\n      AA\n      ORD\n      STL\n      1845\n      -5.0\n      44.0\n      258\n      1950\n      -5.0\n      0\n      0\n    \n    \n      15\n      1\n      1\n      4\n      AA\n      DEN\n      DFW\n      1445\n      -6.0\n      93.0\n      641\n      1745\n      4.0\n      0\n      0\n    \n    \n      26\n      1\n      1\n      4\n      AA\n      LAX\n      AUS\n      1430\n      33.0\n      157.0\n      1242\n      1925\n      41.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58470\n      12\n      31\n      4\n      AA\n      DFW\n      FAT\n      1020\n      -3.0\n      196.0\n      1313\n      1156\n      -2.0\n      0\n      0\n    \n    \n      58475\n      12\n      31\n      4\n      AA\n      IAH\n      CLT\n      710\n      1.0\n      113.0\n      912\n      1037\n      -12.0\n      0\n      0\n    \n    \n      58476\n      12\n      31\n      4\n      AA\n      DFW\n      TPA\n      1020\n      -3.0\n      121.0\n      929\n      1340\n      -6.0\n      0\n      0\n    \n    \n      58479\n      12\n      31\n      4\n      AA\n      DFW\n      ELP\n      1200\n      3.0\n      94.0\n      551\n      1250\n      13.0\n      0\n      0\n    \n    \n      58487\n      12\n      31\n      4\n      AA\n      SFO\n      DFW\n      515\n      5.0\n      166.0\n      1464\n      1045\n      -19.0\n      0\n      0\n    \n  \n\n8900 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      38\n      1\n      1\n      4\n      AS\n      PHX\n      SEA\n      1505\n      -2.0\n      155.0\n      1107\n      1702\n      -3.0\n      0\n      0\n    \n    \n      198\n      1\n      2\n      5\n      AS\n      LAX\n      SEA\n      2110\n      5.0\n      145.0\n      954\n      2352\n      8.0\n      0\n      0\n    \n    \n      241\n      1\n      2\n      5\n      AS\n      LAS\n      PDX\n      650\n      -5.0\n      117.0\n      763\n      906\n      -3.0\n      0\n      0\n    \n    \n      277\n      1\n      2\n      5\n      AS\n      ORD\n      ANC\n      935\n      -1.0\n      402.0\n      2846\n      1339\n      -6.0\n      0\n      0\n    \n    \n      397\n      1\n      3\n      6\n      AS\n      LAS\n      SEA\n      1300\n      48.0\n      137.0\n      867\n      1535\n      47.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58305\n      12\n      30\n      3\n      AS\n      LAX\n      SEA\n      1325\n      -2.0\n      134.0\n      954\n      1608\n      -7.0\n      0\n      0\n    \n    \n      58355\n      12\n      31\n      4\n      AS\n      PHX\n      SEA\n      1200\n      -5.0\n      145.0\n      1107\n      1407\n      -24.0\n      0\n      0\n    \n    \n      58404\n      12\n      31\n      4\n      AS\n      SFO\n      SLC\n      2110\n      -2.0\n      80.0\n      599\n      2358\n      -4.0\n      0\n      0\n    \n    \n      58407\n      12\n      31\n      4\n      AS\n      SFO\n      PDX\n      645\n      -2.0\n      81.0\n      550\n      832\n      -3.0\n      0\n      0\n    \n    \n      58428\n      12\n      31\n      4\n      AS\n      LAX\n      SEA\n      1420\n      -8.0\n      127.0\n      954\n      1709\n      -25.0\n      0\n      0\n    \n  \n\n768 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      123\n      1\n      1\n      4\n      B6\n      LAS\n      BOS\n      1230\n      0.0\n      246.0\n      2381\n      2026\n      -27.0\n      0\n      0\n    \n    \n      127\n      1\n      1\n      4\n      B6\n      LAS\n      BOS\n      2359\n      68.0\n      247.0\n      2381\n      749\n      46.0\n      0\n      0\n    \n    \n      239\n      1\n      2\n      5\n      B6\n      ORD\n      BOS\n      540\n      -8.0\n      96.0\n      867\n      856\n      -22.0\n      0\n      0\n    \n    \n      333\n      1\n      3\n      6\n      B6\n      LAX\n      FLL\n      2237\n      32.0\n      270.0\n      2342\n      619\n      42.0\n      0\n      0\n    \n    \n      548\n      1\n      4\n      7\n      B6\n      SFO\n      FLL\n      2307\n      -4.0\n      298.0\n      2583\n      724\n      -1.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58262\n      12\n      30\n      3\n      B6\n      SFO\n      LGB\n      1921\n      -6.0\n      57.0\n      354\n      2038\n      -14.0\n      0\n      0\n    \n    \n      58301\n      12\n      30\n      3\n      B6\n      LAX\n      JFK\n      630\n      4.0\n      285.0\n      2475\n      1445\n      -6.0\n      0\n      0\n    \n    \n      58425\n      12\n      31\n      4\n      B6\n      ORD\n      SJU\n      700\n      239.0\n      250.0\n      2072\n      1335\n      239.0\n      0\n      0\n    \n    \n      58477\n      12\n      31\n      4\n      B6\n      DFW\n      BOS\n      1145\n      12.0\n      161.0\n      1562\n      1608\n      -14.0\n      0\n      0\n    \n    \n      58483\n      12\n      31\n      4\n      B6\n      PHX\n      BOS\n      2236\n      -12.0\n      231.0\n      2300\n      515\n      -45.0\n      0\n      0\n    \n  \n\n543 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      53\n      1\n      1\n      4\n      DL\n      LAS\n      MSP\n      713\n      -5.0\n      156.0\n      1299\n      1220\n      -18.0\n      0\n      0\n    \n    \n      57\n      1\n      1\n      4\n      DL\n      MSP\n      RSW\n      700\n      -1.0\n      169.0\n      1416\n      1130\n      -20.0\n      0\n      0\n    \n    \n      77\n      1\n      1\n      4\n      DL\n      LAX\n      ATL\n      1130\n      24.0\n      217.0\n      1947\n      1840\n      16.0\n      0\n      0\n    \n    \n      79\n      1\n      1\n      4\n      DL\n      LAX\n      CMH\n      2146\n      -3.0\n      223.0\n      1995\n      459\n      -13.0\n      0\n      0\n    \n    \n      85\n      1\n      1\n      4\n      DL\n      ATL\n      OKC\n      2059\n      -4.0\n      116.0\n      761\n      2227\n      -12.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58440\n      12\n      31\n      4\n      DL\n      ATL\n      CVG\n      1611\n      -4.0\n      61.0\n      373\n      1736\n      -6.0\n      0\n      0\n    \n    \n      58448\n      12\n      31\n      4\n      DL\n      ATL\n      SRQ\n      1610\n      0.0\n      61.0\n      444\n      1740\n      -13.0\n      0\n      0\n    \n    \n      58464\n      12\n      31\n      4\n      DL\n      LAX\n      SFO\n      700\n      108.0\n      54.0\n      337\n      825\n      105.0\n      0\n      0\n    \n    \n      58467\n      12\n      31\n      4\n      DL\n      ATL\n      IND\n      1235\n      -3.0\n      63.0\n      432\n      1407\n      -13.0\n      0\n      0\n    \n    \n      58485\n      12\n      31\n      4\n      DL\n      ATL\n      CMH\n      2206\n      2.0\n      64.0\n      447\n      2338\n      -8.0\n      0\n      0\n    \n  \n\n10601 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      11\n      1\n      1\n      4\n      EV\n      ORD\n      JAN\n      1155\n      6.0\n      113.0\n      677\n      1403\n      5.0\n      0\n      0\n    \n    \n      13\n      1\n      1\n      4\n      EV\n      ORD\n      CMH\n      1010\n      -2.0\n      46.0\n      296\n      1228\n      -9.0\n      0\n      0\n    \n    \n      29\n      1\n      1\n      4\n      EV\n      ORD\n      IND\n      1025\n      -6.0\n      29.0\n      177\n      1228\n      -19.0\n      0\n      0\n    \n    \n      40\n      1\n      1\n      4\n      EV\n      IAH\n      CLE\n      1038\n      -3.0\n      126.0\n      1091\n      1425\n      -18.0\n      0\n      0\n    \n    \n      69\n      1\n      1\n      4\n      EV\n      ATL\n      RAP\n      1930\n      -5.0\n      181.0\n      1230\n      2104\n      -15.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58445\n      12\n      31\n      4\n      EV\n      DFW\n      TXK\n      850\n      -5.0\n      30.0\n      181\n      948\n      -17.0\n      0\n      0\n    \n    \n      58452\n      12\n      31\n      4\n      EV\n      DFW\n      SHV\n      1650\n      -4.0\n      32.0\n      190\n      1746\n      -12.0\n      0\n      0\n    \n    \n      58459\n      12\n      31\n      4\n      EV\n      MSP\n      ORD\n      1435\n      18.0\n      61.0\n      334\n      1609\n      3.0\n      0\n      0\n    \n    \n      58463\n      12\n      31\n      4\n      EV\n      ORD\n      MSN\n      1220\n      18.0\n      32.0\n      108\n      1319\n      27.0\n      0\n      0\n    \n    \n      58486\n      12\n      31\n      4\n      EV\n      DFW\n      LFT\n      850\n      21.0\n      52.0\n      351\n      1012\n      14.0\n      0\n      0\n    \n  \n\n5858 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      7\n      1\n      1\n      4\n      F9\n      SFO\n      PHX\n      1020\n      -7.0\n      91.0\n      651\n      1315\n      -6.0\n      0\n      0\n    \n    \n      93\n      1\n      1\n      4\n      F9\n      ATL\n      DEN\n      859\n      16.0\n      181.0\n      1199\n      1026\n      10.0\n      0\n      0\n    \n    \n      209\n      1\n      2\n      5\n      F9\n      MSP\n      DEN\n      1025\n      -6.0\n      97.0\n      680\n      1134\n      -13.0\n      0\n      0\n    \n    \n      232\n      1\n      2\n      5\n      F9\n      DEN\n      PHX\n      2040\n      -7.0\n      83.0\n      602\n      2228\n      -18.0\n      0\n      0\n    \n    \n      247\n      1\n      2\n      5\n      F9\n      ORD\n      ATL\n      730\n      10.0\n      86.0\n      606\n      1020\n      23.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58288\n      12\n      30\n      3\n      F9\n      DEN\n      ORD\n      625\n      -4.0\n      136.0\n      888\n      1000\n      14.0\n      0\n      0\n    \n    \n      58331\n      12\n      30\n      3\n      F9\n      ORD\n      PHX\n      825\n      18.0\n      207.0\n      1440\n      1127\n      14.0\n      0\n      0\n    \n    \n      58447\n      12\n      31\n      4\n      F9\n      DEN\n      LAS\n      1245\n      13.0\n      94.0\n      628\n      1340\n      13.0\n      0\n      0\n    \n    \n      58449\n      12\n      31\n      4\n      F9\n      DEN\n      MCO\n      645\n      11.0\n      169.0\n      1546\n      1224\n      -11.0\n      0\n      0\n    \n    \n      58488\n      12\n      31\n      4\n      F9\n      LAS\n      SFO\n      1910\n      13.0\n      71.0\n      414\n      2050\n      4.0\n      0\n      0\n    \n  \n\n1317 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      582\n      1\n      4\n      7\n      HA\n      LAX\n      OGG\n      1115\n      -11.0\n      310.0\n      2486\n      1500\n      -27.0\n      0\n      0\n    \n    \n      712\n      1\n      5\n      1\n      HA\n      LAS\n      HNL\n      900\n      -5.0\n      357.0\n      2762\n      1315\n      5.0\n      0\n      0\n    \n    \n      878\n      1\n      6\n      2\n      HA\n      PHX\n      HNL\n      800\n      1.0\n      374.0\n      2917\n      1140\n      3.0\n      0\n      0\n    \n    \n      1053\n      1\n      7\n      3\n      HA\n      LAX\n      HNL\n      1705\n      0.0\n      332.0\n      2556\n      2055\n      -2.0\n      0\n      0\n    \n    \n      1269\n      1\n      8\n      4\n      HA\n      LAX\n      HNL\n      1000\n      -1.0\n      335.0\n      2556\n      1350\n      0.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      55883\n      12\n      16\n      3\n      HA\n      LAX\n      HNL\n      835\n      1.0\n      314.0\n      2556\n      1235\n      -18.0\n      0\n      0\n    \n    \n      56174\n      12\n      18\n      5\n      HA\n      LAX\n      HNL\n      835\n      -5.0\n      342.0\n      2556\n      1235\n      -4.0\n      0\n      0\n    \n    \n      56350\n      12\n      19\n      6\n      HA\n      PHX\n      HNL\n      800\n      -5.0\n      363.0\n      2917\n      1155\n      -34.0\n      0\n      0\n    \n    \n      56816\n      12\n      21\n      1\n      HA\n      LAX\n      LIH\n      740\n      20.0\n      303.0\n      2615\n      1145\n      -11.0\n      0\n      0\n    \n    \n      58391\n      12\n      31\n      4\n      HA\n      LAX\n      HNL\n      1000\n      0.0\n      324.0\n      2556\n      1350\n      -9.0\n      0\n      0\n    \n  \n\n112 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      2\n      1\n      1\n      4\n      MQ\n      DFW\n      VPS\n      1305\n      36.0\n      85.0\n      641\n      1453\n      35.0\n      0\n      0\n    \n    \n      10\n      1\n      1\n      4\n      MQ\n      DFW\n      DRO\n      1335\n      28.0\n      104.0\n      674\n      1438\n      28.0\n      0\n      0\n    \n    \n      18\n      1\n      1\n      4\n      MQ\n      ORD\n      DAY\n      2220\n      19.0\n      37.0\n      240\n      23\n      20.0\n      0\n      0\n    \n    \n      24\n      1\n      1\n      4\n      MQ\n      DFW\n      BTR\n      730\n      NaN\n      NaN\n      383\n      853\n      NaN\n      0\n      1\n    \n    \n      50\n      1\n      1\n      4\n      MQ\n      ORD\n      CID\n      1135\n      -7.0\n      37.0\n      196\n      1238\n      -15.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58415\n      12\n      31\n      4\n      MQ\n      ORD\n      FWA\n      845\n      -2.0\n      37.0\n      157\n      1045\n      -4.0\n      0\n      0\n    \n    \n      58426\n      12\n      31\n      4\n      MQ\n      DFW\n      FAR\n      1154\n      4.0\n      124.0\n      968\n      1437\n      -13.0\n      0\n      0\n    \n    \n      58468\n      12\n      31\n      4\n      MQ\n      DFW\n      OKC\n      1720\n      -3.0\n      31.0\n      175\n      1819\n      -10.0\n      0\n      0\n    \n    \n      58474\n      12\n      31\n      4\n      MQ\n      ORD\n      FNT\n      829\n      4.0\n      40.0\n      223\n      1034\n      -4.0\n      0\n      0\n    \n    \n      58484\n      12\n      31\n      4\n      MQ\n      ORD\n      DSM\n      1333\n      1.0\n      57.0\n      299\n      1455\n      -7.0\n      0\n      0\n    \n  \n\n3471 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      17\n      1\n      1\n      4\n      NK\n      DEN\n      DTW\n      1952\n      37.0\n      124.0\n      1123\n      31\n      54.0\n      0\n      0\n    \n    \n      74\n      1\n      1\n      4\n      NK\n      PHX\n      DFW\n      159\n      -1.0\n      103.0\n      868\n      502\n      1.0\n      0\n      0\n    \n    \n      95\n      1\n      1\n      4\n      NK\n      LAS\n      OAK\n      1115\n      22.0\n      62.0\n      407\n      1246\n      10.0\n      0\n      0\n    \n    \n      109\n      1\n      1\n      4\n      NK\n      MSP\n      ORD\n      616\n      2.0\n      49.0\n      334\n      745\n      -19.0\n      0\n      0\n    \n    \n      166\n      1\n      2\n      5\n      NK\n      LAS\n      PDX\n      1535\n      -8.0\n      123.0\n      763\n      1754\n      -4.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58160\n      12\n      29\n      2\n      NK\n      MSP\n      MCO\n      740\n      0.0\n      171.0\n      1310\n      1158\n      33.0\n      0\n      0\n    \n    \n      58197\n      12\n      30\n      3\n      NK\n      IAH\n      ORD\n      755\n      -8.0\n      136.0\n      925\n      1030\n      -2.0\n      0\n      0\n    \n    \n      58437\n      12\n      31\n      4\n      NK\n      ORD\n      DFW\n      1952\n      15.0\n      135.0\n      802\n      2225\n      23.0\n      0\n      0\n    \n    \n      58461\n      12\n      31\n      4\n      NK\n      ORD\n      LGA\n      1801\n      -5.0\n      84.0\n      733\n      2109\n      -26.0\n      0\n      0\n    \n    \n      58469\n      12\n      31\n      4\n      NK\n      LAS\n      MSY\n      1950\n      124.0\n      163.0\n      1500\n      112\n      101.0\n      0\n      0\n    \n  \n\n1516 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      12\n      1\n      1\n      4\n      OO\n      ORD\n      MSP\n      1510\n      2.0\n      65.0\n      334\n      1646\n      4.0\n      0\n      0\n    \n    \n      16\n      1\n      1\n      4\n      OO\n      DEN\n      SGU\n      1105\n      21.0\n      66.0\n      517\n      1249\n      20.0\n      0\n      0\n    \n    \n      22\n      1\n      1\n      4\n      OO\n      LAS\n      LAX\n      1544\n      -4.0\n      39.0\n      236\n      1655\n      -12.0\n      0\n      0\n    \n    \n      25\n      1\n      1\n      4\n      OO\n      ORD\n      SPI\n      2110\n      -4.0\n      31.0\n      174\n      2205\n      5.0\n      0\n      0\n    \n    \n      27\n      1\n      1\n      4\n      OO\n      IAH\n      JAC\n      1104\n      -1.0\n      161.0\n      1265\n      1316\n      -1.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58451\n      12\n      31\n      4\n      OO\n      ATL\n      FWA\n      1905\n      -3.0\n      72.0\n      508\n      2051\n      -14.0\n      0\n      0\n    \n    \n      58480\n      12\n      31\n      4\n      OO\n      MSP\n      BIS\n      1310\n      -2.0\n      65.0\n      386\n      1449\n      -9.0\n      0\n      0\n    \n    \n      58482\n      12\n      31\n      4\n      OO\n      DEN\n      CPR\n      1850\n      -2.0\n      38.0\n      230\n      1956\n      1.0\n      0\n      0\n    \n    \n      58489\n      12\n      31\n      4\n      OO\n      SFO\n      SBA\n      1846\n      -6.0\n      46.0\n      262\n      1956\n      -5.0\n      0\n      0\n    \n    \n      58491\n      12\n      31\n      4\n      OO\n      SFO\n      BOI\n      859\n      5.0\n      73.0\n      522\n      1146\n      -1.0\n      0\n      0\n    \n  \n\n6588 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      1\n      1\n      1\n      4\n      UA\n      DEN\n      IAD\n      823\n      7.0\n      154.0\n      1452\n      1333\n      -13.0\n      0\n      0\n    \n    \n      5\n      1\n      1\n      4\n      UA\n      IAH\n      SAN\n      1450\n      1.0\n      178.0\n      1303\n      1620\n      -14.0\n      0\n      0\n    \n    \n      9\n      1\n      1\n      4\n      UA\n      IAH\n      SJC\n      925\n      3.0\n      215.0\n      1608\n      1136\n      -14.0\n      0\n      0\n    \n    \n      14\n      1\n      1\n      4\n      UA\n      IAH\n      IND\n      1426\n      -1.0\n      102.0\n      844\n      1742\n      -20.0\n      0\n      0\n    \n    \n      21\n      1\n      1\n      4\n      UA\n      ORD\n      CLE\n      2102\n      48.0\n      47.0\n      315\n      2320\n      41.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58422\n      12\n      31\n      4\n      UA\n      DEN\n      SAN\n      1535\n      0.0\n      124.0\n      853\n      1704\n      -13.0\n      0\n      0\n    \n    \n      58432\n      12\n      31\n      4\n      UA\n      ORD\n      SAN\n      1915\n      7.0\n      238.0\n      1723\n      2143\n      -3.0\n      0\n      0\n    \n    \n      58457\n      12\n      31\n      4\n      UA\n      ORD\n      LAX\n      659\n      -1.0\n      241.0\n      1744\n      946\n      0.0\n      0\n      0\n    \n    \n      58460\n      12\n      31\n      4\n      UA\n      SFO\n      PHL\n      2235\n      -6.0\n      265.0\n      2521\n      700\n      -42.0\n      0\n      0\n    \n    \n      58481\n      12\n      31\n      4\n      UA\n      IAH\n      LAX\n      1433\n      1.0\n      197.0\n      1379\n      1625\n      -13.0\n      0\n      0\n    \n  \n\n7792 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      31\n      1\n      1\n      4\n      US\n      PHX\n      DEN\n      1810\n      29.0\n      94.0\n      602\n      1954\n      49.0\n      0\n      0\n    \n    \n      35\n      1\n      1\n      4\n      US\n      ORD\n      PHL\n      1600\n      -2.0\n      80.0\n      678\n      1857\n      -9.0\n      0\n      0\n    \n    \n      49\n      1\n      1\n      4\n      US\n      IAH\n      PHX\n      1445\n      -1.0\n      147.0\n      1009\n      1638\n      -7.0\n      0\n      0\n    \n    \n      96\n      1\n      1\n      4\n      US\n      ATL\n      PHL\n      1445\n      -4.0\n      90.0\n      666\n      1644\n      -11.0\n      0\n      0\n    \n    \n      104\n      1\n      1\n      4\n      US\n      MSP\n      PHX\n      730\n      -3.0\n      174.0\n      1276\n      1010\n      -20.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      31514\n      6\n      30\n      2\n      US\n      DEN\n      PHL\n      705\n      -4.0\n      188.0\n      1558\n      1240\n      1.0\n      0\n      0\n    \n    \n      31523\n      6\n      30\n      2\n      US\n      PHX\n      DEN\n      1451\n      6.0\n      85.0\n      602\n      1738\n      7.0\n      0\n      0\n    \n    \n      31535\n      6\n      30\n      2\n      US\n      PHX\n      AUS\n      840\n      -3.0\n      116.0\n      872\n      1304\n      -11.0\n      0\n      0\n    \n    \n      31561\n      6\n      30\n      2\n      US\n      ORD\n      PHX\n      710\n      -5.0\n      170.0\n      1440\n      901\n      -50.0\n      0\n      0\n    \n    \n      31582\n      6\n      30\n      2\n      US\n      PHX\n      OGG\n      800\n      -4.0\n      356.0\n      2845\n      1127\n      -13.0\n      0\n      0\n    \n  \n\n1615 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      56\n      1\n      1\n      4\n      VX\n      LAS\n      SFO\n      900\n      23.0\n      65.0\n      414\n      1035\n      11.0\n      0\n      0\n    \n    \n      227\n      1\n      2\n      5\n      VX\n      SFO\n      LAS\n      1220\n      -5.0\n      68.0\n      414\n      1350\n      -5.0\n      0\n      0\n    \n    \n      243\n      1\n      2\n      5\n      VX\n      SFO\n      SEA\n      700\n      -4.0\n      104.0\n      679\n      905\n      -1.0\n      0\n      0\n    \n    \n      417\n      1\n      3\n      6\n      VX\n      SFO\n      LAS\n      900\n      -2.0\n      62.0\n      414\n      1030\n      -11.0\n      0\n      0\n    \n    \n      432\n      1\n      3\n      6\n      VX\n      SFO\n      SEA\n      2035\n      -2.0\n      106.0\n      679\n      2240\n      -2.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58332\n      12\n      30\n      3\n      VX\n      SFO\n      LAS\n      1950\n      -3.0\n      58.0\n      414\n      2120\n      -4.0\n      0\n      0\n    \n    \n      58383\n      12\n      31\n      4\n      VX\n      SFO\n      PSP\n      1630\n      -7.0\n      65.0\n      421\n      1755\n      -12.0\n      0\n      0\n    \n    \n      58400\n      12\n      31\n      4\n      VX\n      SFO\n      LAX\n      1125\n      -4.0\n      54.0\n      337\n      1245\n      -10.0\n      0\n      0\n    \n    \n      58471\n      12\n      31\n      4\n      VX\n      SFO\n      LAX\n      700\n      6.0\n      51.0\n      337\n      820\n      3.0\n      0\n      0\n    \n    \n      58478\n      12\n      31\n      4\n      VX\n      SFO\n      LAX\n      1530\n      29.0\n      52.0\n      337\n      1650\n      22.0\n      0\n      0\n    \n  \n\n993 rows × 14 columns\n\n\n\n\n\n\n\n  \n    \n      \n      MONTH\n      DAY\n      WEEKDAY\n      AIRLINE\n      ORG_AIR\n      DEST_AIR\n      SCHED_DEP\n      DEP_DELAY\n      AIR_TIME\n      DIST\n      SCHED_ARR\n      ARR_DELAY\n      DIVERTED\n      CANCELLED\n    \n  \n  \n    \n      0\n      1\n      1\n      4\n      WN\n      LAX\n      SLC\n      1625\n      58.0\n      94.0\n      590\n      1905\n      65.0\n      0\n      0\n    \n    \n      4\n      1\n      1\n      4\n      WN\n      LAX\n      MCI\n      1720\n      48.0\n      166.0\n      1363\n      2225\n      39.0\n      0\n      0\n    \n    \n      19\n      1\n      1\n      4\n      WN\n      PHX\n      LAX\n      1640\n      51.0\n      58.0\n      370\n      1700\n      59.0\n      0\n      0\n    \n    \n      20\n      1\n      1\n      4\n      WN\n      ATL\n      BWI\n      1115\n      1.0\n      76.0\n      577\n      1305\n      -15.0\n      0\n      0\n    \n    \n      23\n      1\n      1\n      4\n      WN\n      ATL\n      HOU\n      1555\n      30.0\n      113.0\n      696\n      1720\n      18.0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      58455\n      12\n      31\n      4\n      WN\n      LAX\n      SMF\n      1420\n      -2.0\n      64.0\n      373\n      1540\n      -7.0\n      0\n      0\n    \n    \n      58458\n      12\n      31\n      4\n      WN\n      LAS\n      SFO\n      1825\n      25.0\n      67.0\n      414\n      1955\n      17.0\n      0\n      0\n    \n    \n      58472\n      12\n      31\n      4\n      WN\n      PHX\n      HOU\n      845\n      5.0\n      119.0\n      1020\n      1210\n      7.0\n      0\n      0\n    \n    \n      58473\n      12\n      31\n      4\n      WN\n      DEN\n      PDX\n      1205\n      4.0\n      130.0\n      991\n      1400\n      -13.0\n      0\n      0\n    \n    \n      58490\n      12\n      31\n      4\n      WN\n      MSP\n      ATL\n      525\n      39.0\n      124.0\n      907\n      855\n      34.0\n      0\n      0\n    \n  \n\n8418 rows × 14 columns"
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#범주형변수를-기준으로-groupby---agg",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#범주형변수를-기준으로-groupby---agg",
    "title": "Lesson 14: groupby",
    "section": "범주형변수를 기준으로 groupby -> agg",
    "text": "범주형변수를 기준으로 groupby -> agg\n\n# EX1: [AIRLINE] \\(\\to\\) {ARR_DELAY:mean}\n- 방법1: grouby() \\(\\to\\) .agg({colname: function})\n(예시1)\n\ndf.groupby(by=\"AIRLINE\").agg({'ARR_DELAY':np.mean})\n\n\n\n\n\n  \n    \n      \n      ARR_DELAY\n    \n    \n      AIRLINE\n      \n    \n  \n  \n    \n      AA\n      5.542661\n    \n    \n      AS\n      -0.833333\n    \n    \n      B6\n      8.692593\n    \n    \n      DL\n      0.339691\n    \n    \n      EV\n      7.034580\n    \n    \n      F9\n      13.630651\n    \n    \n      HA\n      4.972973\n    \n    \n      MQ\n      6.860591\n    \n    \n      NK\n      18.436070\n    \n    \n      OO\n      7.593463\n    \n    \n      UA\n      7.765755\n    \n    \n      US\n      1.681105\n    \n    \n      VX\n      5.348884\n    \n    \n      WN\n      6.397353\n    \n  \n\n\n\n\n(예시2)\n\ndf.groupby(by=\"AIRLINE\").agg({'ARR_DELAY':'mean'})\n\n\n\n\n\n  \n    \n      \n      ARR_DELAY\n    \n    \n      AIRLINE\n      \n    \n  \n  \n    \n      AA\n      5.542661\n    \n    \n      AS\n      -0.833333\n    \n    \n      B6\n      8.692593\n    \n    \n      DL\n      0.339691\n    \n    \n      EV\n      7.034580\n    \n    \n      F9\n      13.630651\n    \n    \n      HA\n      4.972973\n    \n    \n      MQ\n      6.860591\n    \n    \n      NK\n      18.436070\n    \n    \n      OO\n      7.593463\n    \n    \n      UA\n      7.765755\n    \n    \n      US\n      1.681105\n    \n    \n      VX\n      5.348884\n    \n    \n      WN\n      6.397353\n    \n  \n\n\n\n\n- 방법2: grouby() \\(\\to\\) key로 column선택 \\(\\to\\) .agg(f) or .f()\n(예시1)\n\ndf.groupby(by='AIRLINE')['ARR_DELAY'].agg(np.mean)\n\nAIRLINE\nAA     5.542661\nAS    -0.833333\nB6     8.692593\nDL     0.339691\nEV     7.034580\nF9    13.630651\nHA     4.972973\nMQ     6.860591\nNK    18.436070\nOO     7.593463\nUA     7.765755\nUS     1.681105\nVX     5.348884\nWN     6.397353\nName: ARR_DELAY, dtype: float64\n\n\n(예시2)\n\ndf.groupby(by='AIRLINE')['ARR_DELAY'].agg(\"mean\")\n\nAIRLINE\nAA     5.542661\nAS    -0.833333\nB6     8.692593\nDL     0.339691\nEV     7.034580\nF9    13.630651\nHA     4.972973\nMQ     6.860591\nNK    18.436070\nOO     7.593463\nUA     7.765755\nUS     1.681105\nVX     5.348884\nWN     6.397353\nName: ARR_DELAY, dtype: float64\n\n\n(예시3)\n\ndf.groupby(by='AIRLINE')['ARR_DELAY'].mean()\n\nAIRLINE\nAA     5.542661\nAS    -0.833333\nB6     8.692593\nDL     0.339691\nEV     7.034580\nF9    13.630651\nHA     4.972973\nMQ     6.860591\nNK    18.436070\nOO     7.593463\nUA     7.765755\nUS     1.681105\nVX     5.348884\nWN     6.397353\nName: ARR_DELAY, dtype: float64\n\n\n\n\n# EX2: [AIRLINE,WEEKDAY] \\(\\to\\) {CANCELLED:sum}\n- 방법1\n(예시1)\n\ndf.groupby(by=[\"AIRLINE\",\"WEEKDAY\"]).agg({\"CANCELLED\":np.sum})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n    \n  \n  \n    \n      AA\n      1\n      41\n    \n    \n      2\n      9\n    \n    \n      3\n      16\n    \n    \n      4\n      20\n    \n    \n      5\n      18\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n    \n    \n      4\n      10\n    \n    \n      5\n      7\n    \n    \n      6\n      10\n    \n    \n      7\n      7\n    \n  \n\n98 rows × 1 columns\n\n\n\n(예시2)\n\ndf.groupby(by=[\"AIRLINE\",\"WEEKDAY\"]).agg({\"CANCELLED\":\"sum\"})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n    \n  \n  \n    \n      AA\n      1\n      41\n    \n    \n      2\n      9\n    \n    \n      3\n      16\n    \n    \n      4\n      20\n    \n    \n      5\n      18\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n    \n    \n      4\n      10\n    \n    \n      5\n      7\n    \n    \n      6\n      10\n    \n    \n      7\n      7\n    \n  \n\n98 rows × 1 columns\n\n\n\n- 방법2\n(예시1)\n\ndf.groupby(by=[\"AIRLINE\",\"WEEKDAY\"])[[\"CANCELLED\"]].agg(np.sum)\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n    \n  \n  \n    \n      AA\n      1\n      41\n    \n    \n      2\n      9\n    \n    \n      3\n      16\n    \n    \n      4\n      20\n    \n    \n      5\n      18\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n    \n    \n      4\n      10\n    \n    \n      5\n      7\n    \n    \n      6\n      10\n    \n    \n      7\n      7\n    \n  \n\n98 rows × 1 columns\n\n\n\n(예시2)\n\ndf.groupby(by=[\"AIRLINE\",\"WEEKDAY\"])[\"CANCELLED\"].agg(\"sum\")\n\nAIRLINE  WEEKDAY\nAA       1          41\n         2           9\n         3          16\n         4          20\n         5          18\n                    ..\nWN       3          18\n         4          10\n         5           7\n         6          10\n         7           7\nName: CANCELLED, Length: 98, dtype: int64\n\n\n(예시3)\n\ndf.groupby(by=[\"AIRLINE\",\"WEEKDAY\"])[\"CANCELLED\"].sum()\n\nAIRLINE  WEEKDAY\nAA       1          41\n         2           9\n         3          16\n         4          20\n         5          18\n                    ..\nWN       3          18\n         4          10\n         5           7\n         6          10\n         7           7\nName: CANCELLED, Length: 98, dtype: int64\n\n\n\ndf.DIVERTED\n\n0        0\n1        0\n2        0\n3        0\n4        0\n        ..\n58487    0\n58488    0\n58489    0\n58490    0\n58491    0\nName: DIVERTED, Length: 58492, dtype: int64\n\n\n\n\n# EX3: [AIRLINE,WEEKDAY] \\(\\to\\) {CANCELLED:sum,mean}, {DIVERTED: sum,mean}\n- 방법1\n(예시1)\n\ndf.groupby([\"AIRLINE\",\"WEEKDAY\"])\\\n.agg({\"CANCELLED\":[np.sum,np.mean],\"DIVERTED\":[np.sum,np.mean]})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      DIVERTED\n    \n    \n      \n      \n      sum\n      mean\n      sum\n      mean\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      41\n      0.032106\n      6\n      0.004699\n    \n    \n      2\n      9\n      0.007341\n      2\n      0.001631\n    \n    \n      3\n      16\n      0.011949\n      2\n      0.001494\n    \n    \n      4\n      20\n      0.015004\n      5\n      0.003751\n    \n    \n      5\n      18\n      0.014151\n      1\n      0.000786\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n      0.014118\n      2\n      0.001569\n    \n    \n      4\n      10\n      0.007911\n      4\n      0.003165\n    \n    \n      5\n      7\n      0.005828\n      0\n      0.000000\n    \n    \n      6\n      10\n      0.010132\n      3\n      0.003040\n    \n    \n      7\n      7\n      0.006066\n      3\n      0.002600\n    \n  \n\n98 rows × 4 columns\n\n\n\n(예시2)\n\ndf.groupby([\"AIRLINE\",\"WEEKDAY\"])\\\n.agg({\"CANCELLED\":[\"sum\",\"mean\"],\"DIVERTED\":[\"sum\",\"mean\"]})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      DIVERTED\n    \n    \n      \n      \n      sum\n      mean\n      sum\n      mean\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      41\n      0.032106\n      6\n      0.004699\n    \n    \n      2\n      9\n      0.007341\n      2\n      0.001631\n    \n    \n      3\n      16\n      0.011949\n      2\n      0.001494\n    \n    \n      4\n      20\n      0.015004\n      5\n      0.003751\n    \n    \n      5\n      18\n      0.014151\n      1\n      0.000786\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n      0.014118\n      2\n      0.001569\n    \n    \n      4\n      10\n      0.007911\n      4\n      0.003165\n    \n    \n      5\n      7\n      0.005828\n      0\n      0.000000\n    \n    \n      6\n      10\n      0.010132\n      3\n      0.003040\n    \n    \n      7\n      7\n      0.006066\n      3\n      0.002600\n    \n  \n\n98 rows × 4 columns\n\n\n\n- 방법2\n(예시1)\n\ndf.groupby([\"AIRLINE\",\"WEEKDAY\"])[[\"CANCELLED\",\"DIVERTED\"]]\\\n.agg([np.sum,np.mean])\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      DIVERTED\n    \n    \n      \n      \n      sum\n      mean\n      sum\n      mean\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      41\n      0.032106\n      6\n      0.004699\n    \n    \n      2\n      9\n      0.007341\n      2\n      0.001631\n    \n    \n      3\n      16\n      0.011949\n      2\n      0.001494\n    \n    \n      4\n      20\n      0.015004\n      5\n      0.003751\n    \n    \n      5\n      18\n      0.014151\n      1\n      0.000786\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n      0.014118\n      2\n      0.001569\n    \n    \n      4\n      10\n      0.007911\n      4\n      0.003165\n    \n    \n      5\n      7\n      0.005828\n      0\n      0.000000\n    \n    \n      6\n      10\n      0.010132\n      3\n      0.003040\n    \n    \n      7\n      7\n      0.006066\n      3\n      0.002600\n    \n  \n\n98 rows × 4 columns\n\n\n\n(예시2)\n\ndf.groupby([\"AIRLINE\",\"WEEKDAY\"])[[\"CANCELLED\",\"DIVERTED\"]]\\\n.agg([\"sum\",\"mean\"])\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      DIVERTED\n    \n    \n      \n      \n      sum\n      mean\n      sum\n      mean\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      41\n      0.032106\n      6\n      0.004699\n    \n    \n      2\n      9\n      0.007341\n      2\n      0.001631\n    \n    \n      3\n      16\n      0.011949\n      2\n      0.001494\n    \n    \n      4\n      20\n      0.015004\n      5\n      0.003751\n    \n    \n      5\n      18\n      0.014151\n      1\n      0.000786\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n      0.014118\n      2\n      0.001569\n    \n    \n      4\n      10\n      0.007911\n      4\n      0.003165\n    \n    \n      5\n      7\n      0.005828\n      0\n      0.000000\n    \n    \n      6\n      10\n      0.010132\n      3\n      0.003040\n    \n    \n      7\n      7\n      0.006066\n      3\n      0.002600\n    \n  \n\n98 rows × 4 columns\n\n\n\n(예시3) – 사용불가능\n\n\n# EX4: [AIRLINE,WEEKDAY] \\(\\to\\) {CANCELLED:sum,mean,count}, {AIR_TIME: mean,var}\n- 방법1\n(예시1)\n\ndf.groupby([\"AIRLINE\",\"WEEKDAY\"])\\\n.agg({'CANCELLED':[np.sum,np.mean,len],'AIR_TIME':[np.mean,np.var]})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      AIR_TIME\n    \n    \n      \n      \n      sum\n      mean\n      len\n      mean\n      var\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      41\n      0.032106\n      1277\n      147.610569\n      5393.806723\n    \n    \n      2\n      9\n      0.007341\n      1226\n      143.851852\n      5359.890719\n    \n    \n      3\n      16\n      0.011949\n      1339\n      144.514005\n      5378.854539\n    \n    \n      4\n      20\n      0.015004\n      1333\n      141.124618\n      4791.524627\n    \n    \n      5\n      18\n      0.014151\n      1272\n      145.430966\n      5884.592076\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n      0.014118\n      1275\n      104.219920\n      2901.873447\n    \n    \n      4\n      10\n      0.007911\n      1264\n      107.200800\n      2966.568935\n    \n    \n      5\n      7\n      0.005828\n      1201\n      107.893635\n      3268.717093\n    \n    \n      6\n      10\n      0.010132\n      987\n      109.247433\n      3152.753719\n    \n    \n      7\n      7\n      0.006066\n      1154\n      107.602273\n      3183.126889\n    \n  \n\n98 rows × 5 columns\n\n\n\n(예시2)\n\ndf.groupby([\"AIRLINE\",\"WEEKDAY\"])\\\n.agg({'CANCELLED':[\"sum\",\"mean\",\"count\"],'AIR_TIME':[\"mean\",\"var\"]})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      AIR_TIME\n    \n    \n      \n      \n      sum\n      mean\n      count\n      mean\n      var\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      41\n      0.032106\n      1277\n      147.610569\n      5393.806723\n    \n    \n      2\n      9\n      0.007341\n      1226\n      143.851852\n      5359.890719\n    \n    \n      3\n      16\n      0.011949\n      1339\n      144.514005\n      5378.854539\n    \n    \n      4\n      20\n      0.015004\n      1333\n      141.124618\n      4791.524627\n    \n    \n      5\n      18\n      0.014151\n      1272\n      145.430966\n      5884.592076\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n      0.014118\n      1275\n      104.219920\n      2901.873447\n    \n    \n      4\n      10\n      0.007911\n      1264\n      107.200800\n      2966.568935\n    \n    \n      5\n      7\n      0.005828\n      1201\n      107.893635\n      3268.717093\n    \n    \n      6\n      10\n      0.010132\n      987\n      109.247433\n      3152.753719\n    \n    \n      7\n      7\n      0.006066\n      1154\n      107.602273\n      3183.126889\n    \n  \n\n98 rows × 5 columns\n\n\n\n(사용자정의함수)\n\ndf.groupby([\"AIRLINE\",\"WEEKDAY\"])\\\n.agg({'CANCELLED':[np.sum,np.mean,len],\n      'AIR_TIME':[np.mean,lambda x: np.std(x,ddof=1)**2]})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      AIR_TIME\n    \n    \n      \n      \n      sum\n      mean\n      len\n      mean\n      <lambda_0>\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      41\n      0.032106\n      1277\n      147.610569\n      5393.806723\n    \n    \n      2\n      9\n      0.007341\n      1226\n      143.851852\n      5359.890719\n    \n    \n      3\n      16\n      0.011949\n      1339\n      144.514005\n      5378.854539\n    \n    \n      4\n      20\n      0.015004\n      1333\n      141.124618\n      4791.524627\n    \n    \n      5\n      18\n      0.014151\n      1272\n      145.430966\n      5884.592076\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      18\n      0.014118\n      1275\n      104.219920\n      2901.873447\n    \n    \n      4\n      10\n      0.007911\n      1264\n      107.200800\n      2966.568935\n    \n    \n      5\n      7\n      0.005828\n      1201\n      107.893635\n      3268.717093\n    \n    \n      6\n      10\n      0.010132\n      987\n      109.247433\n      3152.753719\n    \n    \n      7\n      7\n      0.006066\n      1154\n      107.602273\n      3183.126889\n    \n  \n\n98 rows × 5 columns"
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#연속형변수를-기준으로-groupby---agg",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#연속형변수를-기준으로-groupby---agg",
    "title": "Lesson 14: groupby",
    "section": "연속형변수를 기준으로 groupby -> agg",
    "text": "연속형변수를 기준으로 groupby -> agg\n\ndf.T\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      ...\n      58482\n      58483\n      58484\n      58485\n      58486\n      58487\n      58488\n      58489\n      58490\n      58491\n    \n  \n  \n    \n      MONTH\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      ...\n      12\n      12\n      12\n      12\n      12\n      12\n      12\n      12\n      12\n      12\n    \n    \n      DAY\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      ...\n      31\n      31\n      31\n      31\n      31\n      31\n      31\n      31\n      31\n      31\n    \n    \n      WEEKDAY\n      4\n      4\n      4\n      4\n      4\n      4\n      4\n      4\n      4\n      4\n      ...\n      4\n      4\n      4\n      4\n      4\n      4\n      4\n      4\n      4\n      4\n    \n    \n      AIRLINE\n      WN\n      UA\n      MQ\n      AA\n      WN\n      UA\n      AA\n      F9\n      AA\n      UA\n      ...\n      OO\n      B6\n      MQ\n      DL\n      EV\n      AA\n      F9\n      OO\n      WN\n      OO\n    \n    \n      ORG_AIR\n      LAX\n      DEN\n      DFW\n      DFW\n      LAX\n      IAH\n      DFW\n      SFO\n      ORD\n      IAH\n      ...\n      DEN\n      PHX\n      ORD\n      ATL\n      DFW\n      SFO\n      LAS\n      SFO\n      MSP\n      SFO\n    \n    \n      DEST_AIR\n      SLC\n      IAD\n      VPS\n      DCA\n      MCI\n      SAN\n      MSY\n      PHX\n      STL\n      SJC\n      ...\n      CPR\n      BOS\n      DSM\n      CMH\n      LFT\n      DFW\n      SFO\n      SBA\n      ATL\n      BOI\n    \n    \n      SCHED_DEP\n      1625\n      823\n      1305\n      1555\n      1720\n      1450\n      1250\n      1020\n      1845\n      925\n      ...\n      1850\n      2236\n      1333\n      2206\n      850\n      515\n      1910\n      1846\n      525\n      859\n    \n    \n      DEP_DELAY\n      58.0\n      7.0\n      36.0\n      7.0\n      48.0\n      1.0\n      84.0\n      -7.0\n      -5.0\n      3.0\n      ...\n      -2.0\n      -12.0\n      1.0\n      2.0\n      21.0\n      5.0\n      13.0\n      -6.0\n      39.0\n      5.0\n    \n    \n      AIR_TIME\n      94.0\n      154.0\n      85.0\n      126.0\n      166.0\n      178.0\n      64.0\n      91.0\n      44.0\n      215.0\n      ...\n      38.0\n      231.0\n      57.0\n      64.0\n      52.0\n      166.0\n      71.0\n      46.0\n      124.0\n      73.0\n    \n    \n      DIST\n      590\n      1452\n      641\n      1192\n      1363\n      1303\n      447\n      651\n      258\n      1608\n      ...\n      230\n      2300\n      299\n      447\n      351\n      1464\n      414\n      262\n      907\n      522\n    \n    \n      SCHED_ARR\n      1905\n      1333\n      1453\n      1935\n      2225\n      1620\n      1410\n      1315\n      1950\n      1136\n      ...\n      1956\n      515\n      1455\n      2338\n      1012\n      1045\n      2050\n      1956\n      855\n      1146\n    \n    \n      ARR_DELAY\n      65.0\n      -13.0\n      35.0\n      -7.0\n      39.0\n      -14.0\n      83.0\n      -6.0\n      -5.0\n      -14.0\n      ...\n      1.0\n      -45.0\n      -7.0\n      -8.0\n      14.0\n      -19.0\n      4.0\n      -5.0\n      34.0\n      -1.0\n    \n    \n      DIVERTED\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      ...\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      CANCELLED\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      ...\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n14 rows × 58492 columns\n\n\n\n\ndf.DIST.describe()\n\ncount    58492.000000\nmean       872.900072\nstd        624.996805\nmin         67.000000\n25%        391.000000\n50%        690.000000\n75%       1199.000000\nmax       4502.000000\nName: DIST, dtype: float64\n\n\n\ndf.assign(DIST2 = pd.cut(df.DIST,[-np.inf,391,690,1199,np.inf]))\\\n.groupby([\"AIRLINE\",\"DIST2\"]).agg({'CANCELLED':[\"sum\",\"mean\",\"count\"]})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n    \n    \n      \n      \n      sum\n      mean\n      count\n    \n    \n      AIRLINE\n      DIST2\n      \n      \n      \n    \n  \n  \n    \n      AA\n      (-inf, 391.0]\n      18\n      0.015986\n      1126\n    \n    \n      (391.0, 690.0]\n      17\n      0.013589\n      1251\n    \n    \n      (690.0, 1199.0]\n      69\n      0.022066\n      3127\n    \n    \n      (1199.0, inf]\n      50\n      0.014723\n      3396\n    \n    \n      AS\n      (-inf, 391.0]\n      0\n      NaN\n      0\n    \n    \n      (391.0, 690.0]\n      0\n      0.000000\n      145\n    \n    \n      (690.0, 1199.0]\n      0\n      0.000000\n      462\n    \n    \n      (1199.0, inf]\n      0\n      0.000000\n      161\n    \n    \n      B6\n      (-inf, 391.0]\n      0\n      0.000000\n      71\n    \n    \n      (391.0, 690.0]\n      0\n      0.000000\n      38\n    \n    \n      (690.0, 1199.0]\n      0\n      0.000000\n      61\n    \n    \n      (1199.0, inf]\n      1\n      0.002681\n      373\n    \n    \n      DL\n      (-inf, 391.0]\n      7\n      0.003086\n      2268\n    \n    \n      (391.0, 690.0]\n      8\n      0.002421\n      3304\n    \n    \n      (690.0, 1199.0]\n      16\n      0.006405\n      2498\n    \n    \n      (1199.0, inf]\n      7\n      0.002766\n      2531\n    \n    \n      EV\n      (-inf, 391.0]\n      77\n      0.028785\n      2675\n    \n    \n      (391.0, 690.0]\n      47\n      0.022793\n      2062\n    \n    \n      (690.0, 1199.0]\n      22\n      0.019982\n      1101\n    \n    \n      (1199.0, inf]\n      0\n      0.000000\n      20\n    \n    \n      F9\n      (-inf, 391.0]\n      0\n      0.000000\n      27\n    \n    \n      (391.0, 690.0]\n      6\n      0.013825\n      434\n    \n    \n      (690.0, 1199.0]\n      4\n      0.007105\n      563\n    \n    \n      (1199.0, inf]\n      0\n      0.000000\n      293\n    \n    \n      HA\n      (-inf, 391.0]\n      0\n      NaN\n      0\n    \n    \n      (391.0, 690.0]\n      0\n      NaN\n      0\n    \n    \n      (690.0, 1199.0]\n      0\n      NaN\n      0\n    \n    \n      (1199.0, inf]\n      0\n      0.000000\n      112\n    \n    \n      MQ\n      (-inf, 391.0]\n      90\n      0.047120\n      1910\n    \n    \n      (391.0, 690.0]\n      39\n      0.037356\n      1044\n    \n    \n      (690.0, 1199.0]\n      22\n      0.044266\n      497\n    \n    \n      (1199.0, inf]\n      1\n      0.050000\n      20\n    \n    \n      NK\n      (-inf, 391.0]\n      5\n      0.036496\n      137\n    \n    \n      (391.0, 690.0]\n      4\n      0.013201\n      303\n    \n    \n      (690.0, 1199.0]\n      6\n      0.011029\n      544\n    \n    \n      (1199.0, inf]\n      10\n      0.018797\n      532\n    \n    \n      OO\n      (-inf, 391.0]\n      75\n      0.024826\n      3021\n    \n    \n      (391.0, 690.0]\n      39\n      0.019364\n      2014\n    \n    \n      (690.0, 1199.0]\n      19\n      0.016351\n      1162\n    \n    \n      (1199.0, inf]\n      9\n      0.023018\n      391\n    \n    \n      UA\n      (-inf, 391.0]\n      5\n      0.007143\n      700\n    \n    \n      (391.0, 690.0]\n      14\n      0.011824\n      1184\n    \n    \n      (690.0, 1199.0]\n      26\n      0.010924\n      2380\n    \n    \n      (1199.0, inf]\n      48\n      0.013605\n      3528\n    \n    \n      US\n      (-inf, 391.0]\n      0\n      0.000000\n      254\n    \n    \n      (391.0, 690.0]\n      7\n      0.021944\n      319\n    \n    \n      (690.0, 1199.0]\n      2\n      0.006329\n      316\n    \n    \n      (1199.0, inf]\n      12\n      0.016529\n      726\n    \n    \n      VX\n      (-inf, 391.0]\n      2\n      0.008299\n      241\n    \n    \n      (391.0, 690.0]\n      1\n      0.003861\n      259\n    \n    \n      (690.0, 1199.0]\n      0\n      0.000000\n      22\n    \n    \n      (1199.0, inf]\n      3\n      0.006369\n      471\n    \n    \n      WN\n      (-inf, 391.0]\n      55\n      0.023810\n      2310\n    \n    \n      (391.0, 690.0]\n      14\n      0.006487\n      2158\n    \n    \n      (690.0, 1199.0]\n      17\n      0.007896\n      2153\n    \n    \n      (1199.0, inf]\n      7\n      0.003895\n      1797\n    \n  \n\n\n\n\n\npd.cut(df.DIST,[-np.inf,400,700,1200,np.inf],labels=['~400','400~700','700~1200','1200~'])\n\n0         400~700\n1           1200~\n2         400~700\n3        700~1200\n4           1200~\n           ...   \n58487       1200~\n58488     400~700\n58489        ~400\n58490    700~1200\n58491     400~700\nName: DIST, Length: 58492, dtype: category\nCategories (4, object): ['~400' < '400~700' < '700~1200' < '1200~']\n\n\n\ndf.assign(DIST2 = pd.cut(df.DIST,[-np.inf,400,700,1200,np.inf],labels=['~400','400~700','700~1200','1200~']))\\\n.groupby([\"AIRLINE\",\"DIST2\"]).agg({'CANCELLED':[\"sum\",\"mean\",\"count\"]})\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n    \n    \n      \n      \n      sum\n      mean\n      count\n    \n    \n      AIRLINE\n      DIST2\n      \n      \n      \n    \n  \n  \n    \n      AA\n      ~400\n      18\n      0.015986\n      1126\n    \n    \n      400~700\n      17\n      0.013589\n      1251\n    \n    \n      700~1200\n      69\n      0.022066\n      3127\n    \n    \n      1200~\n      50\n      0.014723\n      3396\n    \n    \n      AS\n      ~400\n      0\n      NaN\n      0\n    \n    \n      400~700\n      0\n      0.000000\n      145\n    \n    \n      700~1200\n      0\n      0.000000\n      462\n    \n    \n      1200~\n      0\n      0.000000\n      161\n    \n    \n      B6\n      ~400\n      0\n      0.000000\n      71\n    \n    \n      400~700\n      0\n      0.000000\n      38\n    \n    \n      700~1200\n      0\n      0.000000\n      61\n    \n    \n      1200~\n      1\n      0.002681\n      373\n    \n    \n      DL\n      ~400\n      7\n      0.003040\n      2303\n    \n    \n      400~700\n      8\n      0.002352\n      3402\n    \n    \n      700~1200\n      16\n      0.006765\n      2365\n    \n    \n      1200~\n      7\n      0.002766\n      2531\n    \n    \n      EV\n      ~400\n      77\n      0.027838\n      2766\n    \n    \n      400~700\n      48\n      0.023312\n      2059\n    \n    \n      700~1200\n      21\n      0.020731\n      1013\n    \n    \n      1200~\n      0\n      0.000000\n      20\n    \n    \n      F9\n      ~400\n      0\n      0.000000\n      27\n    \n    \n      400~700\n      7\n      0.015837\n      442\n    \n    \n      700~1200\n      3\n      0.005405\n      555\n    \n    \n      1200~\n      0\n      0.000000\n      293\n    \n    \n      HA\n      ~400\n      0\n      NaN\n      0\n    \n    \n      400~700\n      0\n      NaN\n      0\n    \n    \n      700~1200\n      0\n      NaN\n      0\n    \n    \n      1200~\n      0\n      0.000000\n      112\n    \n    \n      MQ\n      ~400\n      92\n      0.047472\n      1938\n    \n    \n      400~700\n      39\n      0.035682\n      1093\n    \n    \n      700~1200\n      20\n      0.047619\n      420\n    \n    \n      1200~\n      1\n      0.050000\n      20\n    \n    \n      NK\n      ~400\n      5\n      0.036496\n      137\n    \n    \n      400~700\n      4\n      0.013201\n      303\n    \n    \n      700~1200\n      6\n      0.011029\n      544\n    \n    \n      1200~\n      10\n      0.018797\n      532\n    \n    \n      OO\n      ~400\n      76\n      0.024837\n      3060\n    \n    \n      400~700\n      38\n      0.018673\n      2035\n    \n    \n      700~1200\n      19\n      0.017241\n      1102\n    \n    \n      1200~\n      9\n      0.023018\n      391\n    \n    \n      UA\n      ~400\n      5\n      0.006993\n      715\n    \n    \n      400~700\n      14\n      0.011966\n      1170\n    \n    \n      700~1200\n      26\n      0.010929\n      2379\n    \n    \n      1200~\n      48\n      0.013605\n      3528\n    \n    \n      US\n      ~400\n      0\n      0.000000\n      254\n    \n    \n      400~700\n      7\n      0.021944\n      319\n    \n    \n      700~1200\n      2\n      0.006329\n      316\n    \n    \n      1200~\n      12\n      0.016529\n      726\n    \n    \n      VX\n      ~400\n      2\n      0.008299\n      241\n    \n    \n      400~700\n      1\n      0.003861\n      259\n    \n    \n      700~1200\n      0\n      0.000000\n      22\n    \n    \n      1200~\n      3\n      0.006369\n      471\n    \n    \n      WN\n      ~400\n      55\n      0.023022\n      2389\n    \n    \n      400~700\n      17\n      0.007795\n      2181\n    \n    \n      700~1200\n      14\n      0.006826\n      2051\n    \n    \n      1200~\n      7\n      0.003895\n      1797"
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#hrdataset_v14-자료분석",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson14.html#hrdataset_v14-자료분석",
    "title": "Lesson 14: groupby",
    "section": "HRDataset_v14 자료분석",
    "text": "HRDataset_v14 자료분석\n아래의 코드를 활용하여 Kaggle의 HRdataset을 불러오라.\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/HRDataset_v14.csv')\ndf\n\n\n\n\n\n  \n    \n      \n      Employee_Name\n      EmpID\n      MarriedID\n      MaritalStatusID\n      GenderID\n      EmpStatusID\n      DeptID\n      PerfScoreID\n      FromDiversityJobFairID\n      Salary\n      ...\n      ManagerName\n      ManagerID\n      RecruitmentSource\n      PerformanceScore\n      EngagementSurvey\n      EmpSatisfaction\n      SpecialProjectsCount\n      LastPerformanceReview_Date\n      DaysLateLast30\n      Absences\n    \n  \n  \n    \n      0\n      Adinolfi, Wilson  K\n      10026\n      0\n      0\n      1\n      1\n      5\n      4\n      0\n      62506\n      ...\n      Michael Albert\n      22.0\n      LinkedIn\n      Exceeds\n      4.60\n      5\n      0\n      1/17/2019\n      0\n      1\n    \n    \n      1\n      Ait Sidi, Karthikeyan\n      10084\n      1\n      1\n      1\n      5\n      3\n      3\n      0\n      104437\n      ...\n      Simon Roup\n      4.0\n      Indeed\n      Fully Meets\n      4.96\n      3\n      6\n      2/24/2016\n      0\n      17\n    \n    \n      2\n      Akinkuolie, Sarah\n      10196\n      1\n      1\n      0\n      5\n      5\n      3\n      0\n      64955\n      ...\n      Kissy Sullivan\n      20.0\n      LinkedIn\n      Fully Meets\n      3.02\n      3\n      0\n      5/15/2012\n      0\n      3\n    \n    \n      3\n      Alagbe,Trina\n      10088\n      1\n      1\n      0\n      1\n      5\n      3\n      0\n      64991\n      ...\n      Elijiah Gray\n      16.0\n      Indeed\n      Fully Meets\n      4.84\n      5\n      0\n      1/3/2019\n      0\n      15\n    \n    \n      4\n      Anderson, Carol\n      10069\n      0\n      2\n      0\n      5\n      5\n      3\n      0\n      50825\n      ...\n      Webster Butler\n      39.0\n      Google Search\n      Fully Meets\n      5.00\n      4\n      0\n      2/1/2016\n      0\n      2\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      306\n      Woodson, Jason\n      10135\n      0\n      0\n      1\n      1\n      5\n      3\n      0\n      65893\n      ...\n      Kissy Sullivan\n      20.0\n      LinkedIn\n      Fully Meets\n      4.07\n      4\n      0\n      2/28/2019\n      0\n      13\n    \n    \n      307\n      Ybarra, Catherine\n      10301\n      0\n      0\n      0\n      5\n      5\n      1\n      0\n      48513\n      ...\n      Brannon Miller\n      12.0\n      Google Search\n      PIP\n      3.20\n      2\n      0\n      9/2/2015\n      5\n      4\n    \n    \n      308\n      Zamora, Jennifer\n      10010\n      0\n      0\n      0\n      1\n      3\n      4\n      0\n      220450\n      ...\n      Janet King\n      2.0\n      Employee Referral\n      Exceeds\n      4.60\n      5\n      6\n      2/21/2019\n      0\n      16\n    \n    \n      309\n      Zhou, Julia\n      10043\n      0\n      0\n      0\n      1\n      3\n      3\n      0\n      89292\n      ...\n      Simon Roup\n      4.0\n      Employee Referral\n      Fully Meets\n      5.00\n      3\n      5\n      2/1/2019\n      0\n      11\n    \n    \n      310\n      Zima, Colleen\n      10271\n      0\n      4\n      0\n      1\n      5\n      3\n      0\n      45046\n      ...\n      David Stanley\n      14.0\n      LinkedIn\n      Fully Meets\n      4.50\n      5\n      0\n      1/30/2019\n      0\n      2\n    \n  \n\n311 rows × 36 columns\n\n\n\n데이터를 조사하고 올바르게 분석한 사람을 모두 고르라. (모두 맞칠경우만 정답으로 인정)\n\n소윤: 근무인원수가 가장 많은 인종(RaceDesc)은 ’White’이며 이는 ’Asian’인종과 ’Black or African American’의 합보다 많다.\n다호: ’RaceDesc==White’의 성별(Sex)임금차이는 2000이상이다.\n하니: 퇴직한사람(Termd==1)은 모두 104명이며 백인여성의 퇴직자수가 가장 많다.\n도한: 퇴직한사람중 아시아인의 비율은 10%가 넘지 않는다.\n\n(풀이)\n모두 참이다.\n데이터조사\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 311 entries, 0 to 310\nData columns (total 36 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Employee_Name               311 non-null    object \n 1   EmpID                       311 non-null    int64  \n 2   MarriedID                   311 non-null    int64  \n 3   MaritalStatusID             311 non-null    int64  \n 4   GenderID                    311 non-null    int64  \n 5   EmpStatusID                 311 non-null    int64  \n 6   DeptID                      311 non-null    int64  \n 7   PerfScoreID                 311 non-null    int64  \n 8   FromDiversityJobFairID      311 non-null    int64  \n 9   Salary                      311 non-null    int64  \n 10  Termd                       311 non-null    int64  \n 11  PositionID                  311 non-null    int64  \n 12  Position                    311 non-null    object \n 13  State                       311 non-null    object \n 14  Zip                         311 non-null    int64  \n 15  DOB                         311 non-null    object \n 16  Sex                         311 non-null    object \n 17  MaritalDesc                 311 non-null    object \n 18  CitizenDesc                 311 non-null    object \n 19  HispanicLatino              311 non-null    object \n 20  RaceDesc                    311 non-null    object \n 21  DateofHire                  311 non-null    object \n 22  DateofTermination           104 non-null    object \n 23  TermReason                  311 non-null    object \n 24  EmploymentStatus            311 non-null    object \n 25  Department                  311 non-null    object \n 26  ManagerName                 311 non-null    object \n 27  ManagerID                   303 non-null    float64\n 28  RecruitmentSource           311 non-null    object \n 29  PerformanceScore            311 non-null    object \n 30  EngagementSurvey            311 non-null    float64\n 31  EmpSatisfaction             311 non-null    int64  \n 32  SpecialProjectsCount        311 non-null    int64  \n 33  LastPerformanceReview_Date  311 non-null    object \n 34  DaysLateLast30              311 non-null    int64  \n 35  Absences                    311 non-null    int64  \ndtypes: float64(2), int64(16), object(18)\nmemory usage: 87.6+ KB\n\n\n\nEmpID가 missing이 없는 열임\n\n소윤: 근무인원수가 가장 많은 인종(RaceDesc)은 ’White’이며 이는 ’Asian’인종과 ’Black or African American’의 합보다 많다. — 참\n\ndf.groupby(by='RaceDesc').agg({'EmpID':len})\n\n\n\n\n\n  \n    \n      \n      EmpID\n    \n    \n      RaceDesc\n      \n    \n  \n  \n    \n      American Indian or Alaska Native\n      3\n    \n    \n      Asian\n      29\n    \n    \n      Black or African American\n      80\n    \n    \n      Hispanic\n      1\n    \n    \n      Two or more races\n      11\n    \n    \n      White\n      187\n    \n  \n\n\n\n\n\n29+80\n\n109\n\n\n다호: ’RaceDesc==White’의 성별(Sex)임금차이는 2000이상이다. — 참\n\ndf.groupby(by=['RaceDesc','Sex']).agg({'Salary':np.mean})\n\n\n\n\n\n  \n    \n      \n      \n      Salary\n    \n    \n      RaceDesc\n      Sex\n      \n    \n  \n  \n    \n      American Indian or Alaska Native\n      F\n      63436.500000\n    \n    \n      M\n      70545.000000\n    \n    \n      Asian\n      F\n      67520.117647\n    \n    \n      M\n      69939.416667\n    \n    \n      Black or African American\n      F\n      66963.829787\n    \n    \n      M\n      85066.121212\n    \n    \n      Hispanic\n      M\n      83667.000000\n    \n    \n      Two or more races\n      F\n      58068.500000\n    \n    \n      M\n      62313.800000\n    \n    \n      White\n      F\n      68846.519231\n    \n    \n      M\n      65334.132530\n    \n  \n\n\n\n\n\n68846.519231 - 65334.132530\n\n3512.386700999996\n\n\n하니: 퇴직한사람(Termd==1)은 모두 104명이며 백인여성의 퇴직자수가 가장 많다. — 참\n\n(df.Termd==1).sum()\n\n104\n\n\n\ndf.groupby(by=['RaceDesc','Sex']).agg({'Termd':np.sum})\n\n\n\n\n\n  \n    \n      \n      \n      Termd\n    \n    \n      RaceDesc\n      Sex\n      \n    \n  \n  \n    \n      American Indian or Alaska Native\n      F\n      0\n    \n    \n      M\n      0\n    \n    \n      Asian\n      F\n      6\n    \n    \n      M\n      3\n    \n    \n      Black or African American\n      F\n      15\n    \n    \n      M\n      14\n    \n    \n      Hispanic\n      M\n      0\n    \n    \n      Two or more races\n      F\n      2\n    \n    \n      M\n      1\n    \n    \n      White\n      F\n      37\n    \n    \n      M\n      26\n    \n  \n\n\n\n\n도한: 퇴직한사람중 아시아인의 비율은 10%가 넘지 않는다. — 참\n\n(df.Termd==1).sum()\n\n104\n\n\n\ndf.groupby(by=['RaceDesc']).agg({'Termd':np.sum})\n\n\n\n\n\n  \n    \n      \n      Termd\n    \n    \n      RaceDesc\n      \n    \n  \n  \n    \n      American Indian or Alaska Native\n      0\n    \n    \n      Asian\n      9\n    \n    \n      Black or African American\n      29\n    \n    \n      Hispanic\n      0\n    \n    \n      Two or more races\n      3\n    \n    \n      White\n      63"
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson15.html#stack",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson15.html#stack",
    "title": "Lesson 15: tidydata",
    "section": "stack",
    "text": "stack\n- 설명:\n\ndf=pd.read_csv('https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/flights.csv')\\\n.groupby([\"AIRLINE\",\"WEEKDAY\"]).agg({\"CANCELLED\":[np.mean,\"count\"],\"DIVERTED\":[np.mean,\"count\"]})\ndf\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      DIVERTED\n    \n    \n      \n      \n      mean\n      count\n      mean\n      count\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      0.032106\n      1277\n      0.004699\n      1277\n    \n    \n      2\n      0.007341\n      1226\n      0.001631\n      1226\n    \n    \n      3\n      0.011949\n      1339\n      0.001494\n      1339\n    \n    \n      4\n      0.015004\n      1333\n      0.003751\n      1333\n    \n    \n      5\n      0.014151\n      1272\n      0.000786\n      1272\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      0.014118\n      1275\n      0.001569\n      1275\n    \n    \n      4\n      0.007911\n      1264\n      0.003165\n      1264\n    \n    \n      5\n      0.005828\n      1201\n      0.000000\n      1201\n    \n    \n      6\n      0.010132\n      987\n      0.003040\n      987\n    \n    \n      7\n      0.006066\n      1154\n      0.002600\n      1154\n    \n  \n\n98 rows × 4 columns\n\n\n\n- 사용예시1\n\ndf.stack()\n\n\n\n\n\n  \n    \n      \n      \n      \n      CANCELLED\n      DIVERTED\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      mean\n      0.032106\n      0.004699\n    \n    \n      count\n      1277.000000\n      1277.000000\n    \n    \n      2\n      mean\n      0.007341\n      0.001631\n    \n    \n      count\n      1226.000000\n      1226.000000\n    \n    \n      3\n      mean\n      0.011949\n      0.001494\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      5\n      count\n      1201.000000\n      1201.000000\n    \n    \n      6\n      mean\n      0.010132\n      0.003040\n    \n    \n      count\n      987.000000\n      987.000000\n    \n    \n      7\n      mean\n      0.006066\n      0.002600\n    \n    \n      count\n      1154.000000\n      1154.000000\n    \n  \n\n196 rows × 2 columns\n\n\n\n- 사용예시2\n\ndf.stack().stack().reset_index().rename({0:'value'},axis=1)\n#df.stack().stack().reset_index().rename(columns={'level_2':'aggtype'})\n\n\n\n\n\n  \n    \n      \n      AIRLINE\n      WEEKDAY\n      level_2\n      level_3\n      value\n    \n  \n  \n    \n      0\n      AA\n      1\n      mean\n      CANCELLED\n      0.032106\n    \n    \n      1\n      AA\n      1\n      mean\n      DIVERTED\n      0.004699\n    \n    \n      2\n      AA\n      1\n      count\n      CANCELLED\n      1277.000000\n    \n    \n      3\n      AA\n      1\n      count\n      DIVERTED\n      1277.000000\n    \n    \n      4\n      AA\n      2\n      mean\n      CANCELLED\n      0.007341\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      387\n      WN\n      6\n      count\n      DIVERTED\n      987.000000\n    \n    \n      388\n      WN\n      7\n      mean\n      CANCELLED\n      0.006066\n    \n    \n      389\n      WN\n      7\n      mean\n      DIVERTED\n      0.002600\n    \n    \n      390\n      WN\n      7\n      count\n      CANCELLED\n      1154.000000\n    \n    \n      391\n      WN\n      7\n      count\n      DIVERTED\n      1154.000000\n    \n  \n\n392 rows × 5 columns\n\n\n\n- 사용예시3 (unstack)\n\ndf.stack().unstack()\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      DIVERTED\n    \n    \n      \n      \n      mean\n      count\n      mean\n      count\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      0.032106\n      1277.0\n      0.004699\n      1277.0\n    \n    \n      2\n      0.007341\n      1226.0\n      0.001631\n      1226.0\n    \n    \n      3\n      0.011949\n      1339.0\n      0.001494\n      1339.0\n    \n    \n      4\n      0.015004\n      1333.0\n      0.003751\n      1333.0\n    \n    \n      5\n      0.014151\n      1272.0\n      0.000786\n      1272.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      0.014118\n      1275.0\n      0.001569\n      1275.0\n    \n    \n      4\n      0.007911\n      1264.0\n      0.003165\n      1264.0\n    \n    \n      5\n      0.005828\n      1201.0\n      0.000000\n      1201.0\n    \n    \n      6\n      0.010132\n      987.0\n      0.003040\n      987.0\n    \n    \n      7\n      0.006066\n      1154.0\n      0.002600\n      1154.0\n    \n  \n\n98 rows × 4 columns\n\n\n\n\nmelt, stack 을 set_index와 reset_index와 함께 사용하면 tidydata를 만들기 용이하다."
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson15.html#tidydata의-정의",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson15.html#tidydata의-정의",
    "title": "Lesson 15: tidydata",
    "section": "tidydata의 정의",
    "text": "tidydata의 정의\n- 느낌: ggplot으로 그림 그리기 좋은 데이터 + pandas로 query, group by 등을 쓰기 좋은 자료\n- 정의: https://r4ds.had.co.nz/tidy-data.html\n\nEach variable must have its own column.\nEach observation must have its own row.\nEach value must have its own cell.\n\n예시1 (tidy data)\n\n\n\nobs\nx\ny\nshape\ncolor\n\n\n\n\n0\n0\n0\n‘star’\n‘F’\n\n\n1\n0\n1\n‘circ’\n‘F’\n\n\n2\n1\n0\n‘star’\n‘M’\n\n\n3\n1\n1\n‘circ’\n‘M’\n\n\n\n예시2 (tidy data x)\n\n\n\n\nshape=star\nshape=circ\n\n\n\n\ncolor=F\n(0,0)\n(0,1)\n\n\ncolor=M\n(1,0)\n(1,1)"
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson15.html#예제1-wide-df",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson15.html#예제1-wide-df",
    "title": "Lesson 15: tidydata",
    "section": "예제1: wide df",
    "text": "예제1: wide df\n- data\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/phone.csv')\ndf\n\n\n\n\n\n  \n    \n      \n      Date\n      Samsung\n      Apple\n      Huawei\n      Xiaomi\n      Oppo\n      Mobicel\n      Motorola\n      LG\n      Others\n      Realme\n      Google\n      Nokia\n      Lenovo\n      OnePlus\n      Sony\n      Asus\n    \n  \n  \n    \n      0\n      2019-10\n      461\n      324\n      136\n      109\n      76\n      81\n      43\n      37\n      135\n      28\n      39\n      14\n      22\n      17\n      20\n      17\n    \n    \n      1\n      2019-11\n      461\n      358\n      167\n      141\n      86\n      61\n      29\n      36\n      141\n      27\n      29\n      20\n      23\n      10\n      19\n      27\n    \n    \n      2\n      2019-12\n      426\n      383\n      143\n      105\n      53\n      45\n      51\n      48\n      129\n      30\n      20\n      26\n      28\n      18\n      18\n      19\n    \n    \n      3\n      2020-01\n      677\n      494\n      212\n      187\n      110\n      79\n      65\n      49\n      158\n      23\n      13\n      19\n      19\n      22\n      27\n      22\n    \n    \n      4\n      2020-02\n      593\n      520\n      217\n      195\n      112\n      67\n      62\n      71\n      157\n      25\n      18\n      16\n      24\n      18\n      23\n      20\n    \n    \n      5\n      2020-03\n      637\n      537\n      246\n      187\n      92\n      66\n      59\n      67\n      145\n      21\n      16\n      24\n      18\n      31\n      22\n      14\n    \n    \n      6\n      2020-04\n      647\n      583\n      222\n      154\n      98\n      59\n      48\n      64\n      113\n      20\n      23\n      25\n      19\n      19\n      23\n      21\n    \n    \n      7\n      2020-05\n      629\n      518\n      192\n      176\n      91\n      87\n      50\n      66\n      150\n      43\n      27\n      15\n      18\n      19\n      19\n      13\n    \n    \n      8\n      2020-06\n      663\n      552\n      209\n      185\n      93\n      69\n      54\n      60\n      140\n      39\n      16\n      16\n      17\n      29\n      25\n      16\n    \n    \n      9\n      2020-07\n      599\n      471\n      214\n      193\n      89\n      78\n      65\n      59\n      130\n      40\n      27\n      25\n      21\n      18\n      18\n      12\n    \n    \n      10\n      2020-08\n      615\n      567\n      204\n      182\n      105\n      82\n      62\n      42\n      129\n      47\n      16\n      23\n      21\n      27\n      23\n      20\n    \n    \n      11\n      2020-09\n      621\n      481\n      230\n      220\n      102\n      88\n      56\n      49\n      143\n      54\n      14\n      15\n      17\n      15\n      19\n      15\n    \n    \n      12\n      2020-10\n      637\n      555\n      232\n      203\n      90\n      52\n      63\n      49\n      140\n      33\n      17\n      20\n      22\n      9\n      22\n      21\n    \n  \n\n\n\n\n\ntidy data 아님\n정의에 의한 판단: 하나의 observation이 하나의 행을 차지하고 있지 않음.\n직관적인 판단: 회사별로 색을 다르게 하여 x:‘Date’, y:’판매량’을 하고 싶다면?\n\n- tidydata로 변환 (melt는 너무 쉬우니까 stack으로 해보자)\n\ndf.set_index('Date').stack().reset_index().rename({'level_1':'Company',0:'Sales'},axis=1)\n\n\n\n\n\n  \n    \n      \n      Date\n      Company\n      Sales\n    \n  \n  \n    \n      0\n      2019-10\n      Samsung\n      461\n    \n    \n      1\n      2019-10\n      Apple\n      324\n    \n    \n      2\n      2019-10\n      Huawei\n      136\n    \n    \n      3\n      2019-10\n      Xiaomi\n      109\n    \n    \n      4\n      2019-10\n      Oppo\n      76\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      203\n      2020-10\n      Nokia\n      20\n    \n    \n      204\n      2020-10\n      Lenovo\n      22\n    \n    \n      205\n      2020-10\n      OnePlus\n      9\n    \n    \n      206\n      2020-10\n      Sony\n      22\n    \n    \n      207\n      2020-10\n      Asus\n      21\n    \n  \n\n208 rows × 3 columns"
  },
  {
    "objectID": "posts/Day3/07_DataWrangling/2023-02-01-Lesson15.html#예제2-multi-indexed-data",
    "href": "posts/Day3/07_DataWrangling/2023-02-01-Lesson15.html#예제2-multi-indexed-data",
    "title": "Lesson 15: tidydata",
    "section": "예제2: multi-indexed data",
    "text": "예제2: multi-indexed data\n- 데이터\n\ndf=pd.read_csv('https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/flights.csv')\\\n.groupby([\"AIRLINE\",\"WEEKDAY\"]).agg({\"CANCELLED\":[np.mean,\"count\"],\"DIVERTED\":[np.mean,\"count\"]})\ndf\n\n\n\n\n\n  \n    \n      \n      \n      CANCELLED\n      DIVERTED\n    \n    \n      \n      \n      mean\n      count\n      mean\n      count\n    \n    \n      AIRLINE\n      WEEKDAY\n      \n      \n      \n      \n    \n  \n  \n    \n      AA\n      1\n      0.032106\n      1277\n      0.004699\n      1277\n    \n    \n      2\n      0.007341\n      1226\n      0.001631\n      1226\n    \n    \n      3\n      0.011949\n      1339\n      0.001494\n      1339\n    \n    \n      4\n      0.015004\n      1333\n      0.003751\n      1333\n    \n    \n      5\n      0.014151\n      1272\n      0.000786\n      1272\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      WN\n      3\n      0.014118\n      1275\n      0.001569\n      1275\n    \n    \n      4\n      0.007911\n      1264\n      0.003165\n      1264\n    \n    \n      5\n      0.005828\n      1201\n      0.000000\n      1201\n    \n    \n      6\n      0.010132\n      987\n      0.003040\n      987\n    \n    \n      7\n      0.006066\n      1154\n      0.002600\n      1154\n    \n  \n\n98 rows × 4 columns\n\n\n\n\ntidy data 아님\n정의에 의한 판단: 하나의 셀에 여러 관측치가 있음 (표안의 표 느낌)\n직관적인 판단: WEEKDAY == 4 and mean(CANCELLED) > 0.001 인 자료를 뽑고 싶다면?\n\n- tidydata로 변환 (stack으로 풀면 너무 쉬우니까 melt로 해보자)\n\ndf.melt(ignore_index=False).reset_index()\n\n\n\n\n\n  \n    \n      \n      AIRLINE\n      WEEKDAY\n      variable_0\n      variable_1\n      value\n    \n  \n  \n    \n      0\n      AA\n      1\n      CANCELLED\n      mean\n      0.032106\n    \n    \n      1\n      AA\n      2\n      CANCELLED\n      mean\n      0.007341\n    \n    \n      2\n      AA\n      3\n      CANCELLED\n      mean\n      0.011949\n    \n    \n      3\n      AA\n      4\n      CANCELLED\n      mean\n      0.015004\n    \n    \n      4\n      AA\n      5\n      CANCELLED\n      mean\n      0.014151\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      387\n      WN\n      3\n      DIVERTED\n      count\n      1275.000000\n    \n    \n      388\n      WN\n      4\n      DIVERTED\n      count\n      1264.000000\n    \n    \n      389\n      WN\n      5\n      DIVERTED\n      count\n      1201.000000\n    \n    \n      390\n      WN\n      6\n      DIVERTED\n      count\n      987.000000\n    \n    \n      391\n      WN\n      7\n      DIVERTED\n      count\n      1154.000000\n    \n  \n\n392 rows × 5 columns"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson13.html#fifa23-data",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson13.html#fifa23-data",
    "title": "Lesson 13: 데이터 전처리",
    "section": "FIFA23 data",
    "text": "FIFA23 data\n- FIFA23라는 축구게임이 있음\n- 게임에 실제 선수들이 나오면서 선수들의 능력치가 세밀하게 구현되어 있음\n- 선수들 능력치에 대한 데이터셋은 캐글에 공개되어 있음 - https://www.kaggle.com/datasets/bryanb/fifa-player-stats-database?select=FIFA23_official_data.csv"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson13.html#데이터살펴보기",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson13.html#데이터살펴보기",
    "title": "Lesson 13: 데이터 전처리",
    "section": "데이터살펴보기",
    "text": "데이터살펴보기\n- 일단 살펴보기\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n    \n  \n\n5 rows × 29 columns\n\n\n\n트랜스포즈하여 보는 것이 편할때도 있음\n\ndf.T\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      ...\n      17650\n      17651\n      17652\n      17653\n      17654\n      17655\n      17656\n      17657\n      17658\n      17659\n    \n  \n  \n    \n      ID\n      209658\n      212198\n      224334\n      192985\n      224232\n      212622\n      197445\n      187961\n      208333\n      210514\n      ...\n      256879\n      269546\n      267647\n      253186\n      267461\n      269526\n      267946\n      270567\n      256624\n      256376\n    \n    \n      Name\n      L. Goretzka\n      Bruno Fernandes\n      M. Acuña\n      K. De Bruyne\n      N. Barella\n      J. Kimmich\n      D. Alaba\n      22 Paulinho\n      E. Can\n      João Cancelo\n      ...\n      22 G. Leijon\n      Wu Fei\n      22 E. Grosz\n      22 S. Booth\n      22 L. Grimpe\n      Deng Xiongtao\n      22 Lim Jun Sub\n      A. Demir\n      21 S. Czajor\n      21 F. Jakobsson\n    \n    \n      Age\n      27\n      27\n      30\n      31\n      25\n      27\n      30\n      32\n      28\n      28\n      ...\n      19\n      32\n      18\n      20\n      17\n      19\n      17\n      25\n      18\n      20\n    \n    \n      Photo\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      https://cdn.sofifa.net/players/212/622/23_60.png\n      https://cdn.sofifa.net/players/197/445/23_60.png\n      https://cdn.sofifa.net/players/187/961/22_60.png\n      https://cdn.sofifa.net/players/208/333/23_60.png\n      https://cdn.sofifa.net/players/210/514/23_60.png\n      ...\n      https://cdn.sofifa.net/players/256/879/22_60.png\n      https://cdn.sofifa.net/players/269/546/23_60.png\n      https://cdn.sofifa.net/players/267/647/22_60.png\n      https://cdn.sofifa.net/players/253/186/22_60.png\n      https://cdn.sofifa.net/players/267/461/22_60.png\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      https://cdn.sofifa.net/players/256/376/21_60.png\n    \n    \n      Nationality\n      Germany\n      Portugal\n      Argentina\n      Belgium\n      Italy\n      Germany\n      Austria\n      Brazil\n      Germany\n      Portugal\n      ...\n      Sweden\n      China PR\n      Romania\n      England\n      Germany\n      China PR\n      Korea Republic\n      Turkey\n      Poland\n      Sweden\n    \n    \n      Flag\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/pt.png\n      https://cdn.sofifa.net/flags/ar.png\n      https://cdn.sofifa.net/flags/be.png\n      https://cdn.sofifa.net/flags/it.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/at.png\n      https://cdn.sofifa.net/flags/br.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/pt.png\n      ...\n      https://cdn.sofifa.net/flags/se.png\n      https://cdn.sofifa.net/flags/cn.png\n      https://cdn.sofifa.net/flags/ro.png\n      https://cdn.sofifa.net/flags/gb-eng.png\n      https://cdn.sofifa.net/flags/de.png\n      https://cdn.sofifa.net/flags/cn.png\n      https://cdn.sofifa.net/flags/kr.png\n      https://cdn.sofifa.net/flags/tr.png\n      https://cdn.sofifa.net/flags/pl.png\n      https://cdn.sofifa.net/flags/se.png\n    \n    \n      Overall\n      87\n      86\n      85\n      91\n      86\n      89\n      86\n      83\n      82\n      88\n      ...\n      52\n      51\n      52\n      51\n      54\n      48\n      48\n      51\n      50\n      50\n    \n    \n      Potential\n      88\n      87\n      85\n      91\n      89\n      90\n      86\n      83\n      82\n      88\n      ...\n      62\n      51\n      70\n      60\n      68\n      61\n      64\n      56\n      65\n      61\n    \n    \n      Club\n      FC Bayern München\n      Manchester United\n      Sevilla FC\n      Manchester City\n      Inter\n      FC Bayern München\n      Real Madrid CF\n      Al Ahli\n      Borussia Dortmund\n      Manchester City\n      ...\n      Örebro SK\n      Wuhan Three Towns\n      Gaz Metan Mediaş\n      Crewe Alexandra\n      RB Leipzig\n      Meizhou Hakka\n      Jeju United FC\n      Ümraniyespor\n      Fleetwood Town\n      IFK Norrköping\n    \n    \n      Club Logo\n      https://cdn.sofifa.net/teams/21/30.png\n      https://cdn.sofifa.net/teams/11/30.png\n      https://cdn.sofifa.net/teams/481/30.png\n      https://cdn.sofifa.net/teams/10/30.png\n      https://cdn.sofifa.net/teams/44/30.png\n      https://cdn.sofifa.net/teams/21/30.png\n      https://cdn.sofifa.net/teams/243/30.png\n      https://cdn.sofifa.net/teams/112387/30.png\n      https://cdn.sofifa.net/teams/22/30.png\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      https://cdn.sofifa.net/teams/705/30.png\n      https://cdn.sofifa.net/teams/116361/30.png\n      https://cdn.sofifa.net/teams/112637/30.png\n      https://cdn.sofifa.net/teams/121/30.png\n      https://cdn.sofifa.net/teams/112172/30.png\n      https://cdn.sofifa.net/teams/114628/30.png\n      https://cdn.sofifa.net/teams/1478/30.png\n      https://cdn.sofifa.net/teams/113796/30.png\n      https://cdn.sofifa.net/teams/112260/30.png\n      https://cdn.sofifa.net/teams/702/30.png\n    \n    \n      Value\n      €91M\n      €78.5M\n      €46.5M\n      €107.5M\n      €89.5M\n      €105.5M\n      €55.5M\n      €28.5M\n      €30.5M\n      €82.5M\n      ...\n      €150K\n      €30K\n      €180K\n      €110K\n      €210K\n      €100K\n      €100K\n      €70K\n      €90K\n      €90K\n    \n    \n      Wage\n      €115K\n      €190K\n      €46K\n      €350K\n      €110K\n      €130K\n      €220K\n      €61K\n      €63K\n      €250K\n      ...\n      €500\n      €2K\n      €500\n      €850\n      €500\n      €500\n      €500\n      €2K\n      €500\n      €500\n    \n    \n      Special\n      2312\n      2305\n      2303\n      2303\n      2296\n      2283\n      2277\n      2273\n      2271\n      2262\n      ...\n      779\n      777\n      775\n      768\n      767\n      762\n      761\n      759\n      758\n      749\n    \n    \n      Preferred Foot\n      Right\n      Right\n      Left\n      Right\n      Right\n      Right\n      Left\n      Right\n      Right\n      Right\n      ...\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Right\n      Left\n    \n    \n      International Reputation\n      4.0\n      3.0\n      2.0\n      4.0\n      3.0\n      4.0\n      4.0\n      3.0\n      3.0\n      3.0\n      ...\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      Weak Foot\n      4.0\n      3.0\n      3.0\n      5.0\n      3.0\n      4.0\n      4.0\n      4.0\n      4.0\n      4.0\n      ...\n      3.0\n      2.0\n      2.0\n      2.0\n      3.0\n      3.0\n      2.0\n      2.0\n      2.0\n      2.0\n    \n    \n      Skill Moves\n      3.0\n      4.0\n      3.0\n      4.0\n      3.0\n      3.0\n      3.0\n      4.0\n      3.0\n      4.0\n      ...\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      Work Rate\n      High/ Medium\n      High/ High\n      High/ High\n      High/ High\n      High/ High\n      High/ Medium\n      Medium/ Medium\n      High/ High\n      Medium/ High\n      High/ Medium\n      ...\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n      Medium/ Medium\n    \n    \n      Body Type\n      Unique\n      Unique\n      Stocky (170-185)\n      Unique\n      Normal (170-)\n      Normal (170-185)\n      Normal (170-185)\n      Normal (170-185)\n      Stocky (185+)\n      Unique\n      ...\n      Normal (185+)\n      Normal (185+)\n      Lean (185+)\n      Lean (185+)\n      Lean (185+)\n      Normal (185+)\n      Lean (185+)\n      Lean (185+)\n      Normal (185+)\n      Normal (185+)\n    \n    \n      Real Face\n      Yes\n      Yes\n      No\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      Yes\n      ...\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n    \n    \n      Position\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos15\">LCM\n      <span class=\"pos pos7\">LB\n      <span class=\"pos pos13\">RCM\n      <span class=\"pos pos13\">RCM\n      <span class=\"pos pos9\">RDM\n      <span class=\"pos pos6\">LCB\n      <span class=\"pos pos15\">LCM\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos7\">LB\n      ...\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos28\">SUB\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n      <span class=\"pos pos29\">RES\n    \n    \n      Joined\n      Jul 1, 2018\n      Jan 30, 2020\n      Sep 14, 2020\n      Aug 30, 2015\n      Sep 1, 2020\n      Jul 1, 2015\n      Jul 1, 2021\n      Jul 22, 2021\n      Feb 18, 2020\n      Aug 7, 2019\n      ...\n      Jun 14, 2020\n      Feb 15, 2019\n      Jul 1, 2020\n      Jul 1, 2019\n      Feb 7, 2022\n      Apr 11, 2022\n      Jan 1, 2022\n      Jun 6, 2021\n      Jan 1, 2020\n      Jan 8, 2020\n    \n    \n      Loaned From\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      Contract Valid Until\n      2026\n      2026\n      2024\n      2025\n      2026\n      2025\n      2026\n      2024\n      2024\n      2027\n      ...\n      2022\n      2022\n      2022\n      2022\n      2023\n      2027\n      2026\n      2023\n      2021\n      2021\n    \n    \n      Height\n      189cm\n      179cm\n      172cm\n      181cm\n      172cm\n      177cm\n      180cm\n      183cm\n      186cm\n      182cm\n      ...\n      188cm\n      186cm\n      190cm\n      195cm\n      186cm\n      190cm\n      195cm\n      190cm\n      187cm\n      186cm\n    \n    \n      Weight\n      82kg\n      69kg\n      69kg\n      70kg\n      68kg\n      75kg\n      78kg\n      80kg\n      86kg\n      74kg\n      ...\n      81kg\n      78kg\n      70kg\n      80kg\n      78kg\n      78kg\n      84kg\n      82kg\n      79kg\n      78kg\n    \n    \n      Release Clause\n      €157M\n      €155M\n      €97.7M\n      €198.9M\n      €154.4M\n      €182M\n      €113.8M\n      €48.5M\n      €51.9M\n      €152.6M\n      ...\n      €218K\n      €47K\n      €356K\n      €215K\n      €488K\n      €218K\n      €188K\n      €142K\n      €214K\n      €131K\n    \n    \n      Kit Number\n      8.0\n      8.0\n      19.0\n      17.0\n      23.0\n      6.0\n      4.0\n      15.0\n      23.0\n      7.0\n      ...\n      33.0\n      1.0\n      99.0\n      27.0\n      43.0\n      35.0\n      21.0\n      12.0\n      40.0\n      30.0\n    \n    \n      Best Overall Rating\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n29 rows × 17660 columns\n\n\n\n- column이름조사\n\ndf.keys()\n\nIndex(['ID', 'Name', 'Age', 'Photo', 'Nationality', 'Flag', 'Overall',\n       'Potential', 'Club', 'Club Logo', 'Value', 'Wage', 'Special',\n       'Preferred Foot', 'International Reputation', 'Weak Foot',\n       'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position',\n       'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight',\n       'Release Clause', 'Kit Number', 'Best Overall Rating'],\n      dtype='object')\n\n\n\n이름에 space가 있어서 좀 거슬림\n\nQuiz column이름에 space를 제거할 수 있을까?\n- 각 column 별로 자료형조사\n\ndf.ID\n\n0        209658\n1        212198\n2        224334\n3        192985\n4        224232\n          ...  \n17655    269526\n17656    267946\n17657    270567\n17658    256624\n17659    256376\nName: ID, Length: 17660, dtype: int64\n\n\n\ndf.ID.dtype\n\ndtype('int64')\n\n\nQuiz 각 컬럼별로 자료형을 조사할 수 있을까?\n- 결측치조사\n\ndf.Club \n\n0        FC Bayern München\n1        Manchester United\n2               Sevilla FC\n3          Manchester City\n4                    Inter\n               ...        \n17655        Meizhou Hakka\n17656       Jeju United FC\n17657         Ümraniyespor\n17658       Fleetwood Town\n17659       IFK Norrköping\nName: Club, Length: 17660, dtype: object\n\n\n\n무소속인 선수도 있지 않나?\n\n(예비학습)\n\npd.Series([1,2,None,2,3]).isna()\n\n0    False\n1    False\n2     True\n3    False\n4    False\ndtype: bool\n\n\n예비학습 끝\n\ndf.Club.isna().sum() # 무소속인 선수는 211명 \n\n211\n\n\nQuiz 각 컬럼별로 결측시의 수를 조사할 수 있을까?\nQuiz 각 col별로 자료형과 결측치의 수를 조사한 표를 얻을 수 있을까?\n\n# 이런식으로!!\n\n\n\n\n\n  \n    \n      \n      colname\n      dtype\n      na\n    \n  \n  \n    \n      0\n      ID\n      int64\n      0\n    \n    \n      1\n      Name\n      object\n      0\n    \n    \n      2\n      Age\n      int64\n      0\n    \n    \n      3\n      Photo\n      object\n      0\n    \n    \n      4\n      Nationality\n      object\n      0\n    \n    \n      5\n      Flag\n      object\n      0\n    \n    \n      6\n      Overall\n      int64\n      0\n    \n    \n      7\n      Potential\n      int64\n      0\n    \n    \n      8\n      Club\n      object\n      211\n    \n    \n      9\n      Club Logo\n      object\n      0\n    \n    \n      10\n      Value\n      object\n      0\n    \n    \n      11\n      Wage\n      object\n      0\n    \n    \n      12\n      Special\n      int64\n      0\n    \n    \n      13\n      Preferred Foot\n      object\n      0\n    \n    \n      14\n      International Reputation\n      float64\n      0\n    \n    \n      15\n      Weak Foot\n      float64\n      0\n    \n    \n      16\n      Skill Moves\n      float64\n      0\n    \n    \n      17\n      Work Rate\n      object\n      0\n    \n    \n      18\n      Body Type\n      object\n      38\n    \n    \n      19\n      Real Face\n      object\n      38\n    \n    \n      20\n      Position\n      object\n      35\n    \n    \n      21\n      Joined\n      object\n      1098\n    \n    \n      22\n      Loaned From\n      object\n      16966\n    \n    \n      23\n      Contract Valid Until\n      object\n      361\n    \n    \n      24\n      Height\n      object\n      0\n    \n    \n      25\n      Weight\n      object\n      0\n    \n    \n      26\n      Release Clause\n      object\n      1151\n    \n    \n      27\n      Kit Number\n      float64\n      35\n    \n    \n      28\n      Best Overall Rating\n      object\n      17639\n    \n  \n\n\n\n\nQuiz 열의선택: 결측치가 10000개 이상인 열을 보고싶다면? (먼가 문제가 있는 열 같은데?)\n\ndf.loc[:,[df[key].isna().sum()>10000 for key in df.keys()]]\n\n\n\n\n\n  \n    \n      \n      Loaned From\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n    \n    \n      1\n      NaN\n      NaN\n    \n    \n      2\n      NaN\n      NaN\n    \n    \n      3\n      NaN\n      NaN\n    \n    \n      4\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      17655\n      NaN\n      NaN\n    \n    \n      17656\n      NaN\n      NaN\n    \n    \n      17657\n      NaN\n      NaN\n    \n    \n      17658\n      NaN\n      NaN\n    \n    \n      17659\n      NaN\n      NaN\n    \n  \n\n17660 rows × 2 columns\n\n\n\n- .info()\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 17660 entries, 0 to 17659\nData columns (total 29 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   ID                        17660 non-null  int64  \n 1   Name                      17660 non-null  object \n 2   Age                       17660 non-null  int64  \n 3   Photo                     17660 non-null  object \n 4   Nationality               17660 non-null  object \n 5   Flag                      17660 non-null  object \n 6   Overall                   17660 non-null  int64  \n 7   Potential                 17660 non-null  int64  \n 8   Club                      17449 non-null  object \n 9   Club Logo                 17660 non-null  object \n 10  Value                     17660 non-null  object \n 11  Wage                      17660 non-null  object \n 12  Special                   17660 non-null  int64  \n 13  Preferred Foot            17660 non-null  object \n 14  International Reputation  17660 non-null  float64\n 15  Weak Foot                 17660 non-null  float64\n 16  Skill Moves               17660 non-null  float64\n 17  Work Rate                 17660 non-null  object \n 18  Body Type                 17622 non-null  object \n 19  Real Face                 17622 non-null  object \n 20  Position                  17625 non-null  object \n 21  Joined                    16562 non-null  object \n 22  Loaned From               694 non-null    object \n 23  Contract Valid Until      17299 non-null  object \n 24  Height                    17660 non-null  object \n 25  Weight                    17660 non-null  object \n 26  Release Clause            16509 non-null  object \n 27  Kit Number                17625 non-null  float64\n 28  Best Overall Rating       21 non-null     object \ndtypes: float64(4), int64(5), object(20)\nmemory usage: 3.9+ MB"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson13.html#데이터정리하기",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson13.html#데이터정리하기",
    "title": "Lesson 13: 데이터 전처리",
    "section": "데이터정리하기",
    "text": "데이터정리하기\n- 칼럼이름변경\n\ndf.set_axis(pd.Index(map(lambda x: x.replace(' ','_'), df.columns)), axis=1)\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club_Logo\n      ...\n      Real_Face\n      Position\n      Joined\n      Loaned_From\n      Contract_Valid_Until\n      Height\n      Weight\n      Release_Clause\n      Kit_Number\n      Best_Overall_Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n- 결측치제거\n\ndf.drop(columns=['Loaned From', 'Best Overall Rating']).dropna()\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Work Rate\n      Body Type\n      Real Face\n      Position\n      Joined\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      High/ Medium\n      Unique\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      2026\n      189cm\n      82kg\n      €157M\n      8.0\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      2026\n      179cm\n      69kg\n      €155M\n      8.0\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      High/ High\n      Stocky (170-185)\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      2024\n      172cm\n      69kg\n      €97.7M\n      19.0\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      2025\n      181cm\n      70kg\n      €198.9M\n      17.0\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      High/ High\n      Normal (170-)\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      2026\n      172cm\n      68kg\n      €154.4M\n      23.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      2027\n      190cm\n      78kg\n      €218K\n      35.0\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      2026\n      195cm\n      84kg\n      €188K\n      21.0\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      2023\n      190cm\n      82kg\n      €142K\n      12.0\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      2021\n      187cm\n      79kg\n      €214K\n      40.0\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      2021\n      186cm\n      78kg\n      €131K\n      30.0\n    \n  \n\n16364 rows × 27 columns\n\n\n\n- Height, Weight의 자료형을 float형으로 수정하기\n\ndf.assign(\n    Height= list(map(lambda x: float(x[:-2]), df.Height)),\n    Weight= list(map(lambda x: float(x[:-2]), df.Weight))\n)\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189.0\n      82.0\n      €157M\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179.0\n      69.0\n      €155M\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172.0\n      69.0\n      €97.7M\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181.0\n      70.0\n      €198.9M\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172.0\n      68.0\n      €154.4M\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190.0\n      78.0\n      €218K\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195.0\n      84.0\n      €188K\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190.0\n      82.0\n      €142K\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187.0\n      79.0\n      €214K\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186.0\n      78.0\n      €131K\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n- Release Clause의 자료형을 float으로 수정하기\n\ndf['Release Clause']\n\n0          €157M\n1          €155M\n2         €97.7M\n3        €198.9M\n4        €154.4M\n          ...   \n17655      €218K\n17656      €188K\n17657      €142K\n17658      €214K\n17659      €131K\nName: Release Clause, Length: 17660, dtype: object\n\n\n\n_f = lambda x: float(x[1:-1])*1000 if x[-1]=='K' else float(x[1:-1])*1000000\n\n\n_f('€157M')\n\n157000000.0\n\n\n\n_f('€131K')\n\n131000.0\n\n\n(시도1–실패)\n\nlist(map(_f,df['Release Clause']))\n\nTypeError: 'float' object is not subscriptable\n\n\n(시도1이 실패한 이유)\n\ndf['Release Clause'].isna().sum() # 이 column에는 1151개의 결측치가 존재\n\n1151\n\n\n(nan에 대한 예비학습)\n\ndf.loc[df['Release Clause'].isna(), 'Release Clause']\n\n18       NaN\n34       NaN\n38       NaN\n49       NaN\n50       NaN\n        ... \n17378    NaN\n17386    NaN\n17535    NaN\n17590    NaN\n17618    NaN\nName: Release Clause, Length: 1151, dtype: object\n\n\n\ndf.loc[18, 'Release Clause']\n\nnan\n\n\n\npd.isna(df.loc[18, 'Release Clause'])\n\nTrue\n\n\n\ntype(df.loc[18, 'Release Clause'])\n\nfloat\n\n\n\ndf.loc[18, 'Release Clause'][-1]\n\nTypeError: 'float' object is not subscriptable\n\n\n(시도2–성공)\n\ndf.rename(columns={'Release Clause':'ReleaseClause'})\\\n.assign(ReleaseClause = list(map(lambda x: _f(x) if pd.isna(x)==False else x , df['Release Clause'])))\\\n.rename(columns={'ReleaseClause':'Release Clause'})\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Real Face\n      Position\n      Joined\n      Loaned From\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n      Best Overall Rating\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      NaN\n      2026\n      189cm\n      82kg\n      157000000.0\n      8.0\n      NaN\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      NaN\n      2026\n      179cm\n      69kg\n      155000000.0\n      8.0\n      NaN\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      NaN\n      2024\n      172cm\n      69kg\n      97700000.0\n      19.0\n      NaN\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      NaN\n      2025\n      181cm\n      70kg\n      198900000.0\n      17.0\n      NaN\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      NaN\n      2026\n      172cm\n      68kg\n      154400000.0\n      23.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      NaN\n      2027\n      190cm\n      78kg\n      218000.0\n      35.0\n      NaN\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      NaN\n      2026\n      195cm\n      84kg\n      188000.0\n      21.0\n      NaN\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      NaN\n      2023\n      190cm\n      82kg\n      142000.0\n      12.0\n      NaN\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      NaN\n      2021\n      187cm\n      79kg\n      214000.0\n      40.0\n      NaN\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      NaN\n      2021\n      186cm\n      78kg\n      131000.0\n      30.0\n      NaN\n    \n  \n\n17660 rows × 29 columns\n\n\n\n(시도3–성공) 그냥 결측치를 제거하고 변형해도 무방..\n\ndf2 = df.drop(columns=['Loaned From', 'Best Overall Rating']).dropna()\ndf2['Release Clause'] = list(map(lambda x: _f(x) if pd.isna(x)==False else x , df2['Release Clause']))\ndf2\n\n\n\n\n\n  \n    \n      \n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      Club Logo\n      ...\n      Work Rate\n      Body Type\n      Real Face\n      Position\n      Joined\n      Contract Valid Until\n      Height\n      Weight\n      Release Clause\n      Kit Number\n    \n  \n  \n    \n      0\n      209658\n      L. Goretzka\n      27\n      https://cdn.sofifa.net/players/209/658/23_60.png\n      Germany\n      https://cdn.sofifa.net/flags/de.png\n      87\n      88\n      FC Bayern München\n      https://cdn.sofifa.net/teams/21/30.png\n      ...\n      High/ Medium\n      Unique\n      Yes\n      <span class=\"pos pos28\">SUB\n      Jul 1, 2018\n      2026\n      189cm\n      82kg\n      157000000.0\n      8.0\n    \n    \n      1\n      212198\n      Bruno Fernandes\n      27\n      https://cdn.sofifa.net/players/212/198/23_60.png\n      Portugal\n      https://cdn.sofifa.net/flags/pt.png\n      86\n      87\n      Manchester United\n      https://cdn.sofifa.net/teams/11/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos15\">LCM\n      Jan 30, 2020\n      2026\n      179cm\n      69kg\n      155000000.0\n      8.0\n    \n    \n      2\n      224334\n      M. Acuña\n      30\n      https://cdn.sofifa.net/players/224/334/23_60.png\n      Argentina\n      https://cdn.sofifa.net/flags/ar.png\n      85\n      85\n      Sevilla FC\n      https://cdn.sofifa.net/teams/481/30.png\n      ...\n      High/ High\n      Stocky (170-185)\n      No\n      <span class=\"pos pos7\">LB\n      Sep 14, 2020\n      2024\n      172cm\n      69kg\n      97700000.0\n      19.0\n    \n    \n      3\n      192985\n      K. De Bruyne\n      31\n      https://cdn.sofifa.net/players/192/985/23_60.png\n      Belgium\n      https://cdn.sofifa.net/flags/be.png\n      91\n      91\n      Manchester City\n      https://cdn.sofifa.net/teams/10/30.png\n      ...\n      High/ High\n      Unique\n      Yes\n      <span class=\"pos pos13\">RCM\n      Aug 30, 2015\n      2025\n      181cm\n      70kg\n      198900000.0\n      17.0\n    \n    \n      4\n      224232\n      N. Barella\n      25\n      https://cdn.sofifa.net/players/224/232/23_60.png\n      Italy\n      https://cdn.sofifa.net/flags/it.png\n      86\n      89\n      Inter\n      https://cdn.sofifa.net/teams/44/30.png\n      ...\n      High/ High\n      Normal (170-)\n      Yes\n      <span class=\"pos pos13\">RCM\n      Sep 1, 2020\n      2026\n      172cm\n      68kg\n      154400000.0\n      23.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      17655\n      269526\n      Deng Xiongtao\n      19\n      https://cdn.sofifa.net/players/269/526/23_60.png\n      China PR\n      https://cdn.sofifa.net/flags/cn.png\n      48\n      61\n      Meizhou Hakka\n      https://cdn.sofifa.net/teams/114628/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Apr 11, 2022\n      2027\n      190cm\n      78kg\n      218000.0\n      35.0\n    \n    \n      17656\n      267946\n      22 Lim Jun Sub\n      17\n      https://cdn.sofifa.net/players/267/946/22_60.png\n      Korea Republic\n      https://cdn.sofifa.net/flags/kr.png\n      48\n      64\n      Jeju United FC\n      https://cdn.sofifa.net/teams/1478/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2022\n      2026\n      195cm\n      84kg\n      188000.0\n      21.0\n    \n    \n      17657\n      270567\n      A. Demir\n      25\n      https://cdn.sofifa.net/players/270/567/23_60.png\n      Turkey\n      https://cdn.sofifa.net/flags/tr.png\n      51\n      56\n      Ümraniyespor\n      https://cdn.sofifa.net/teams/113796/30.png\n      ...\n      Medium/ Medium\n      Lean (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jun 6, 2021\n      2023\n      190cm\n      82kg\n      142000.0\n      12.0\n    \n    \n      17658\n      256624\n      21 S. Czajor\n      18\n      https://cdn.sofifa.net/players/256/624/21_60.png\n      Poland\n      https://cdn.sofifa.net/flags/pl.png\n      50\n      65\n      Fleetwood Town\n      https://cdn.sofifa.net/teams/112260/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 1, 2020\n      2021\n      187cm\n      79kg\n      214000.0\n      40.0\n    \n    \n      17659\n      256376\n      21 F. Jakobsson\n      20\n      https://cdn.sofifa.net/players/256/376/21_60.png\n      Sweden\n      https://cdn.sofifa.net/flags/se.png\n      50\n      61\n      IFK Norrköping\n      https://cdn.sofifa.net/teams/702/30.png\n      ...\n      Medium/ Medium\n      Normal (185+)\n      No\n      <span class=\"pos pos29\">RES\n      Jan 8, 2020\n      2021\n      186cm\n      78kg\n      131000.0\n      30.0\n    \n  \n\n16364 rows × 27 columns\n\n\n\n\n분석의 편의를 위하여 (1) colnames를 변경하고 (2) 결측치를 제거하고 (3) 몇 가지 전 처리를 추가로 진행한 뒤 df2를 만들어서 분석하는게 좋음"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#데이터프레임-준비",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#데이터프레임-준비",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "데이터프레임 준비",
    "text": "데이터프레임 준비\n- 데이터준비\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/dv2022.csv')\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n      10\n    \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      2\n      65\n      85\n      15\n      20\n    \n    \n      3\n      55\n      35\n      35\n      5\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      195\n      55\n      70\n      40\n      95\n    \n    \n      196\n      65\n      85\n      25\n      85\n    \n    \n      197\n      85\n      85\n      100\n      10\n    \n    \n      198\n      80\n      65\n      35\n      60\n    \n    \n      199\n      50\n      95\n      45\n      85\n    \n  \n\n200 rows × 4 columns\n\n\n\n- 앞으로는 위와 같은 df형태를 가정할 것이다. 즉 column의 이름은 문자열, row의 이름은 0부터 시작하는 정수로 가정한다.\n- 아래와 같은 형태는 일단 생각하지 않는다.\n\npd.DataFrame({'att':[60,65,80,90],'rep':[50,100,90,100]},index=['규빈','영미','성준','혜미'])\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      규빈\n      60\n      50\n    \n    \n      영미\n      65\n      100\n    \n    \n      성준\n      80\n      90\n    \n    \n      혜미\n      90\n      100"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#df의-4가지-컨셉",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#df의-4가지-컨셉",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "df의 4가지 컨셉",
    "text": "df의 4가지 컨셉\n- 원소에 접근하는 4가지 방법: ., [], .iloc[], .loc[]"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉1-클래스느낌",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉1-클래스느낌",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "컨셉1: 클래스느낌",
    "text": "컨셉1: 클래스느낌\n- 컨셉1: df는 인스턴스이다. 그리고 df.att, df.rep,df.mid, df.fin 와 같이 col이름에 대응하는 속성이 있다.\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n      10\n    \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      2\n      65\n      85\n      15\n      20\n    \n    \n      3\n      55\n      35\n      35\n      5\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n  \n\n\n\n\n\ndf.fin\n\n0      10\n1      10\n2      20\n3       5\n4      70\n       ..\n195    95\n196    85\n197    10\n198    60\n199    85\nName: fin, Length: 200, dtype: int64\n\n\n- 언제유용? col의 이름을 대충 알고 있을 경우 자동완성으로 쉽게 선택가능"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉2-딕셔너리-alpha-느낌",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉2-딕셔너리-alpha-느낌",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "컨셉2: 딕셔너리 + \\(\\alpha\\) 느낌",
    "text": "컨셉2: 딕셔너리 + \\(\\alpha\\) 느낌\n- 컨셉2: df는 컬럼이름이 key, 컬럼의데이터가 value가 되는 dictionary로 이해할 수 있다. 즉 아래의 dct와 같은 딕셔너리로 이해할 수 있다.\n\ndct = dict(df) \n#dct\n\n(예시) .keys() 메소드를 이용하여 컬럼들의 이름을 살펴볼 수 있음.\n\ndct.keys()\n\ndict_keys(['att', 'rep', 'mid', 'fin'])\n\n\n\ndct.keys(), df.keys()\n\n(dict_keys(['att', 'rep', 'mid', 'fin']),\n Index(['att', 'rep', 'mid', 'fin'], dtype='object'))\n\n\n\n# col indexing\n- 예시1: dct가 가능하면 df도 가능하다.\n\ndf['att']\n#dct['att'] \n\n0      65\n1      95\n2      65\n3      55\n4      80\n       ..\n195    55\n196    65\n197    85\n198    80\n199    50\nName: att, Length: 200, dtype: int64\n\n\n- 예시2: dct가 가능하면 df도 가능하다. (2)\n\ndf.get('att')\n#dct.get('att') \n\n0      65\n1      95\n2      65\n3      55\n4      80\n       ..\n195    55\n196    65\n197    85\n198    80\n199    50\nName: att, Length: 200, dtype: int64\n\n\n- 예시3: dct에서 불가능하지만 df에서 가능한것도 있다.\n\ndct.get(['att','rep'])\n\nTypeError: unhashable type: 'list'\n\n\n\ndf.get(['att','rep'])\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      0\n      65\n      45\n    \n    \n      1\n      95\n      30\n    \n    \n      2\n      65\n      85\n    \n    \n      3\n      55\n      35\n    \n    \n      4\n      80\n      60\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      195\n      55\n      70\n    \n    \n      196\n      65\n      85\n    \n    \n      197\n      85\n      85\n    \n    \n      198\n      80\n      65\n    \n    \n      199\n      50\n      95\n    \n  \n\n200 rows × 2 columns\n\n\n\n- 예시4: dct에서 불가능하지만 df에서 가능한것도 있다. (2)\n\ndct[['att','rep']]\n\nTypeError: unhashable type: 'list'\n\n\n\ndf[['att','rep']]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      0\n      65\n      45\n    \n    \n      1\n      95\n      30\n    \n    \n      2\n      65\n      85\n    \n    \n      3\n      55\n      35\n    \n    \n      4\n      80\n      60\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      195\n      55\n      70\n    \n    \n      196\n      65\n      85\n    \n    \n      197\n      85\n      85\n    \n    \n      198\n      80\n      65\n    \n    \n      199\n      50\n      95\n    \n  \n\n200 rows × 2 columns\n\n\n\n\n\n# row indexing\n- 예시5: dct에서 불가능하지만 df에서 가능한것도 있다. (3)\n\ndct[:5] \n\nTypeError: unhashable type: 'slice'\n\n\n\ndf[:5]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n      10\n    \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      2\n      65\n      85\n      15\n      20\n    \n    \n      3\n      55\n      35\n      35\n      5\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n  \n\n\n\n\nQuiz\n\ndf의 마지막 열을 출력\ndf의 마지막 행을 출력"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉3-넘파이느낌",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉3-넘파이느낌",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "컨셉3: 넘파이느낌",
    "text": "컨셉3: 넘파이느낌\n- 컨셉3: df.iloc은 넘파이에러이처럼 생각가능하다. 즉 아래의 arr와 같은 넘파이어레이로 생각가능하다.\n\narr = np.array(df)\n#arr\n\n\n# row indexing\n- 예시1: 단일레이블\n\narr[0,:] # first row \narr[0,] \narr[0]\n\narray([65, 45,  0, 10])\n\n\n\ndf.iloc[0,:] # first row \ndf.iloc[0,] \ndf.iloc[0]\n\natt    65\nrep    45\nmid     0\nfin    10\nName: 0, dtype: int64\n\n\n- 예시2: 레이블의 리스트\n\narr[[0,1,2],:] # 처음 3개의 row 선택 \narr[[0,1,2],] \narr[[0,1,2]]\n\narray([[65, 45,  0, 10],\n       [95, 30, 60, 10],\n       [65, 85, 15, 20]])\n\n\n\ndf.iloc[[0,1,2],:] # 처음 3개의 row 선택 \ndf.iloc[[0,1,2],] \ndf.iloc[[0,1,2]]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n      10\n    \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      2\n      65\n      85\n      15\n      20\n    \n  \n\n\n\n\n- 예시3: 슬라이싱\n\narr[0:3,:] # 처음 3개의 row선택, 끝점포함X\narr[0:3,] \narr[0:3]\n\narray([[65, 45,  0, 10],\n       [95, 30, 60, 10],\n       [65, 85, 15, 20]])\n\n\n\ndf.iloc[0:3,:] # 처음 3개의 row선택, 끝점포함X\ndf.iloc[0:3,] \ndf.iloc[0:3]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n      10\n    \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      2\n      65\n      85\n      15\n      20\n    \n  \n\n\n\n\n\n\n# col indexing\n- 예시1: 단일레이블\n\ndf.iloc[:,0] # first column \n# arr[:,0] # first column \n\n0      65\n1      95\n2      65\n3      55\n4      80\n       ..\n195    55\n196    65\n197    85\n198    80\n199    50\nName: att, Length: 200, dtype: int64\n\n\n- 예시2: 레이블의 리스트\n\ndf.iloc[:,[0,2]] # col1, col3 을 선택\n# arr[:,[0,2]] # col1, col3 을 선택\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      65\n      0\n    \n    \n      1\n      95\n      60\n    \n    \n      2\n      65\n      15\n    \n    \n      3\n      55\n      35\n    \n    \n      4\n      80\n      55\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      195\n      55\n      40\n    \n    \n      196\n      65\n      25\n    \n    \n      197\n      85\n      100\n    \n    \n      198\n      80\n      35\n    \n    \n      199\n      50\n      45\n    \n  \n\n200 rows × 2 columns\n\n\n\n- 예시3: 슬랑이싱\n\ndf.iloc[:,0:3] # 처음 3개의 col선택, 끝점포함X\n#arr[:,0:3]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n    \n    \n      1\n      95\n      30\n      60\n    \n    \n      2\n      65\n      85\n      15\n    \n    \n      3\n      55\n      35\n      35\n    \n    \n      4\n      80\n      60\n      55\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      195\n      55\n      70\n      40\n    \n    \n      196\n      65\n      85\n      25\n    \n    \n      197\n      85\n      85\n      100\n    \n    \n      198\n      80\n      65\n      35\n    \n    \n      199\n      50\n      95\n      45\n    \n  \n\n200 rows × 3 columns\n\n\n\n\n\n# row + col indexing\n\ndf.iloc[::2,:] ## 홀수번째(=짝수인덱스)행을 출력,\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n      10\n    \n    \n      2\n      65\n      85\n      15\n      20\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n    \n      6\n      65\n      70\n      60\n      75\n    \n    \n      8\n      95\n      55\n      65\n      90\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n    \n      194\n      65\n      40\n      65\n      70\n    \n    \n      196\n      65\n      85\n      25\n      85\n    \n    \n      198\n      80\n      65\n      35\n      60\n    \n  \n\n100 rows × 4 columns\n\n\n\nQuiz\n\ndf의 마지막 열을 출력\ndf의 마지막 행을 출력\ndf의 마지막 행의 마지막 열을 출력\ndf의 짝수번째 열을 출력"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉4-데이터프레임-느낌",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉4-데이터프레임-느낌",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "컨셉4: 데이터프레임 느낌",
    "text": "컨셉4: 데이터프레임 느낌\n- 컨셉4: df.loc은 새로운 느낌..\n\n# row indexing\n- 예시1: 단일레이블\n\ndf.loc[0,:] # 첫번째 row를 선택 \ndf.loc[0,]\ndf.loc[0] \n\natt    65\nrep    45\nmid     0\nfin    10\nName: 0, dtype: int64\n\n\n- 예시2: 레이블의 리스트\n\ndf.loc[[0,1,2],:] # 처음 3개의 row를 선택 \ndf.loc[[0,1,2],]\ndf.loc[[0,1,2]] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n      10\n    \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      2\n      65\n      85\n      15\n      20\n    \n  \n\n\n\n\n- 예시3: 슬라이싱 (끝점포함 O)\n\ndf.loc[0:3,:] # 처음 4개의 row를 선택, 끝점포함 \ndf.loc[0:3,]\ndf.loc[0:3] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n      10\n    \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      2\n      65\n      85\n      15\n      20\n    \n    \n      3\n      55\n      35\n      35\n      5\n    \n  \n\n\n\n\nQuiz\n2번째 row부터 5번째 row까지 출력하라. loc과 iloc으로 각각 출력해볼 것 (슬라이싱을 이용)\n\n\n# col indexing\n- 예시1: 단일레이블\n\ndf.loc[:,'att'] \n\n0      65\n1      95\n2      65\n3      55\n4      80\n       ..\n195    55\n196    65\n197    85\n198    80\n199    50\nName: att, Length: 200, dtype: int64\n\n\n- 예시2: 레이블의 리스트\n\ndf.loc[:,['att','mid']] \n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      65\n      0\n    \n    \n      1\n      95\n      60\n    \n    \n      2\n      65\n      15\n    \n    \n      3\n      55\n      35\n    \n    \n      4\n      80\n      55\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      195\n      55\n      40\n    \n    \n      196\n      65\n      25\n    \n    \n      197\n      85\n      100\n    \n    \n      198\n      80\n      35\n    \n    \n      199\n      50\n      45\n    \n  \n\n200 rows × 2 columns\n\n\n\n- 예시3: 슬라이싱 (끝점포함 O)\n\ndf.loc[:,'att':'mid'] # 끝점포함 \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n    \n  \n  \n    \n      0\n      65\n      45\n      0\n    \n    \n      1\n      95\n      30\n      60\n    \n    \n      2\n      65\n      85\n      15\n    \n    \n      3\n      55\n      35\n      35\n    \n    \n      4\n      80\n      60\n      55\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      195\n      55\n      70\n      40\n    \n    \n      196\n      65\n      85\n      25\n    \n    \n      197\n      85\n      85\n      100\n    \n    \n      198\n      80\n      65\n      35\n    \n    \n      199\n      50\n      95\n      45\n    \n  \n\n200 rows × 3 columns\n\n\n\n\n\n# row + col indexing\n\ndf.loc[::-1,'att':'mid'] # 끝점포함 \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n    \n  \n  \n    \n      199\n      50\n      95\n      45\n    \n    \n      198\n      80\n      65\n      35\n    \n    \n      197\n      85\n      85\n      100\n    \n    \n      196\n      65\n      85\n      25\n    \n    \n      195\n      55\n      70\n      40\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      4\n      80\n      60\n      55\n    \n    \n      3\n      55\n      35\n      35\n    \n    \n      2\n      65\n      85\n      15\n    \n    \n      1\n      95\n      30\n      60\n    \n    \n      0\n      65\n      45\n      0\n    \n  \n\n200 rows × 3 columns\n\n\n\nQuiz\n출석점수의 짝수번째 row를 출력하라."
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉14-정리",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#컨셉14-정리",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "컨셉1~4 정리",
    "text": "컨셉1~4 정리\n\n\n\n\n.\n[]\n.iloc\n.loc\n\n\n\n\nrow/단일레이블\nX\nX\nO\nO\n\n\ncol/단일레이블\nO\nO\nO\nO\n\n\nrow/레이블리스트\nX\nX\nO\nO\n\n\ncol/레이블리스트\nX\nO\nO\nO\n\n\nrow/슬라이싱\nX\nO\nO\nO\n\n\ncol/슬라이싱\nX\nX\nO\nO\n\n\n\n- col 이름을 알아야하는 부담감 - . : 앞글자만 대충 알아도 자동완성 가능 - []: 정확한 col 이름을 알아야 함 - .loc: 보통 정확한 col 이름을 알아야 하지만 슬라이싱 이용시 양 끝의 컬럼이름만 알면 무방 - .iloc: 정확한 col 이름을 몰라도 번호로 인덱싱 가능\n- 자주하는 실수\n\ndf['att'] # 가능 \n# df.loc['att'] # 불가능\ndf.loc[:,'att'] # 가능\n\n0      65\n1      95\n2      65\n3      55\n4      80\n       ..\n195    55\n196    65\n197    85\n198    80\n199    50\nName: att, Length: 200, dtype: int64"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#att-90-and-rep-50",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#att-90-and-rep-50",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "att > 90 and rep < 50",
    "text": "att > 90 and rep < 50\n- 방법1: .query()를 이용\n\ndf.query('att>90 and rep<50')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      12\n      95\n      35\n      0\n      25\n    \n    \n      48\n      95\n      45\n      35\n      80\n    \n    \n      56\n      95\n      25\n      95\n      90\n    \n    \n      78\n      95\n      45\n      90\n      35\n    \n    \n      107\n      100\n      30\n      60\n      65\n    \n    \n      112\n      100\n      35\n      70\n      0\n    \n    \n      113\n      95\n      45\n      55\n      65\n    \n    \n      163\n      100\n      25\n      10\n      20\n    \n    \n      174\n      100\n      40\n      40\n      15\n    \n    \n      176\n      100\n      30\n      70\n      70\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n  \n\n\n\n\n\ndf.query('(att>90)&(rep<50)') \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      12\n      95\n      35\n      0\n      25\n    \n    \n      48\n      95\n      45\n      35\n      80\n    \n    \n      56\n      95\n      25\n      95\n      90\n    \n    \n      78\n      95\n      45\n      90\n      35\n    \n    \n      107\n      100\n      30\n      60\n      65\n    \n    \n      112\n      100\n      35\n      70\n      0\n    \n    \n      113\n      95\n      45\n      55\n      65\n    \n    \n      163\n      100\n      25\n      10\n      20\n    \n    \n      174\n      100\n      40\n      40\n      15\n    \n    \n      176\n      100\n      30\n      70\n      70\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n  \n\n\n\n\n\ndf.query('att>90 & rep<50') \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      12\n      95\n      35\n      0\n      25\n    \n    \n      48\n      95\n      45\n      35\n      80\n    \n    \n      56\n      95\n      25\n      95\n      90\n    \n    \n      78\n      95\n      45\n      90\n      35\n    \n    \n      107\n      100\n      30\n      60\n      65\n    \n    \n      112\n      100\n      35\n      70\n      0\n    \n    \n      113\n      95\n      45\n      55\n      65\n    \n    \n      163\n      100\n      25\n      10\n      20\n    \n    \n      174\n      100\n      40\n      40\n      15\n    \n    \n      176\n      100\n      30\n      70\n      70\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n  \n\n\n\n\n- 방법2: [], .iloc, .loc\n(예비학습)\n\nTrue&True, True&False, False&True, False&False\n\n(True, False, False, False)\n\n\n\nTrue|True, True|False, False|True, False|False\n\n(True, True, True, False)\n\n\n\n(df.att>90) & (df.rep<50)\n\n0      False\n1       True\n2      False\n3      False\n4      False\n       ...  \n195    False\n196    False\n197    False\n198    False\n199    False\nLength: 200, dtype: bool\n\n\n예비학습 끝\n\ndf[(df.att > 90)&(df.rep < 50)]\ndf.loc[(df.att > 90)&(df.rep < 50)]\ndf.iloc[list((df.att > 90)&(df.rep < 50))]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      12\n      95\n      35\n      0\n      25\n    \n    \n      48\n      95\n      45\n      35\n      80\n    \n    \n      56\n      95\n      25\n      95\n      90\n    \n    \n      78\n      95\n      45\n      90\n      35\n    \n    \n      107\n      100\n      30\n      60\n      65\n    \n    \n      112\n      100\n      35\n      70\n      0\n    \n    \n      113\n      95\n      45\n      55\n      65\n    \n    \n      163\n      100\n      25\n      10\n      20\n    \n    \n      174\n      100\n      40\n      40\n      15\n    \n    \n      176\n      100\n      30\n      70\n      70\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n  \n\n\n\n\n- 방법3: [], .iloc, .loc // map, lambda\n\ndf.att > 90\n\n0      False\n1       True\n2      False\n3      False\n4      False\n       ...  \n195    False\n196    False\n197    False\n198    False\n199    False\nName: att, Length: 200, dtype: bool\n\n\n\ndf[list(map(lambda x,y: (x>90)&(y<50), df.att, df.rep))]\n# df[map(lambda x,y: (x>90)&(y<50), df.att, df.rep)] # 이것은 불가능\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      12\n      95\n      35\n      0\n      25\n    \n    \n      48\n      95\n      45\n      35\n      80\n    \n    \n      56\n      95\n      25\n      95\n      90\n    \n    \n      78\n      95\n      45\n      90\n      35\n    \n    \n      107\n      100\n      30\n      60\n      65\n    \n    \n      112\n      100\n      35\n      70\n      0\n    \n    \n      113\n      95\n      45\n      55\n      65\n    \n    \n      163\n      100\n      25\n      10\n      20\n    \n    \n      174\n      100\n      40\n      40\n      15\n    \n    \n      176\n      100\n      30\n      70\n      70\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n  \n\n\n\n\n\ndf.iloc[list(map(lambda x,y: (x>90)&(y<50), df.att, df.rep))]\ndf.iloc[map(lambda x,y: (x>90)&(y<50), df.att, df.rep)]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      12\n      95\n      35\n      0\n      25\n    \n    \n      48\n      95\n      45\n      35\n      80\n    \n    \n      56\n      95\n      25\n      95\n      90\n    \n    \n      78\n      95\n      45\n      90\n      35\n    \n    \n      107\n      100\n      30\n      60\n      65\n    \n    \n      112\n      100\n      35\n      70\n      0\n    \n    \n      113\n      95\n      45\n      55\n      65\n    \n    \n      163\n      100\n      25\n      10\n      20\n    \n    \n      174\n      100\n      40\n      40\n      15\n    \n    \n      176\n      100\n      30\n      70\n      70\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n  \n\n\n\n\n\ndf.loc[list(map(lambda x,y: (x>90)&(y<50), df.att, df.rep))]\ndf.loc[map(lambda x,y: (x>90)&(y<50), df.att, df.rep)]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      12\n      95\n      35\n      0\n      25\n    \n    \n      48\n      95\n      45\n      35\n      80\n    \n    \n      56\n      95\n      25\n      95\n      90\n    \n    \n      78\n      95\n      45\n      90\n      35\n    \n    \n      107\n      100\n      30\n      60\n      65\n    \n    \n      112\n      100\n      35\n      70\n      0\n    \n    \n      113\n      95\n      45\n      55\n      65\n    \n    \n      163\n      100\n      25\n      10\n      20\n    \n    \n      174\n      100\n      40\n      40\n      15\n    \n    \n      176\n      100\n      30\n      70\n      70\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#att-meanatt",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#att-meanatt",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "att > mean(att)",
    "text": "att > mean(att)\n- 방법1: .query()를 이용\n\ndf.query('att> att.mean()') \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n    \n      8\n      95\n      55\n      65\n      90\n    \n    \n      9\n      90\n      25\n      95\n      50\n    \n    \n      11\n      95\n      60\n      25\n      55\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n    \n      197\n      85\n      85\n      100\n      10\n    \n    \n      198\n      80\n      65\n      35\n      60\n    \n  \n\n95 rows × 4 columns\n\n\n\n- 방법2: [], .iloc, .loc\n\ndf[df.att > df.att.mean()]\ndf.loc[df.att > df.att.mean()]\ndf.iloc[list(df.att > df.att.mean())]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n    \n      8\n      95\n      55\n      65\n      90\n    \n    \n      9\n      90\n      25\n      95\n      50\n    \n    \n      11\n      95\n      60\n      25\n      55\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n    \n      197\n      85\n      85\n      100\n      10\n    \n    \n      198\n      80\n      65\n      35\n      60\n    \n  \n\n95 rows × 4 columns\n\n\n\n- 방법3: [], .iloc, .loc // map, lambda\n\ndf[list(map(lambda x: x>df.att.mean() , df.att))]\n# df[map(lambda x: x>df.att.mean() , df.att)] # 이것은 불가능\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n    \n      8\n      95\n      55\n      65\n      90\n    \n    \n      9\n      90\n      25\n      95\n      50\n    \n    \n      11\n      95\n      60\n      25\n      55\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n    \n      197\n      85\n      85\n      100\n      10\n    \n    \n      198\n      80\n      65\n      35\n      60\n    \n  \n\n95 rows × 4 columns\n\n\n\n\ndf.iloc[list(map(lambda x: x>df.att.mean() , df.att))]\ndf.iloc[map(lambda x: x>df.att.mean() , df.att)]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n    \n      8\n      95\n      55\n      65\n      90\n    \n    \n      9\n      90\n      25\n      95\n      50\n    \n    \n      11\n      95\n      60\n      25\n      55\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n    \n      197\n      85\n      85\n      100\n      10\n    \n    \n      198\n      80\n      65\n      35\n      60\n    \n  \n\n95 rows × 4 columns\n\n\n\n\ndf.loc[list(map(lambda x: x>df.att.mean() , df.att))]\ndf.loc[map(lambda x: x>df.att.mean() , df.att)]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      1\n      95\n      30\n      60\n      10\n    \n    \n      4\n      80\n      60\n      55\n      70\n    \n    \n      8\n      95\n      55\n      65\n      90\n    \n    \n      9\n      90\n      25\n      95\n      50\n    \n    \n      11\n      95\n      60\n      25\n      55\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      184\n      100\n      30\n      30\n      85\n    \n    \n      190\n      95\n      35\n      40\n      95\n    \n    \n      192\n      100\n      40\n      80\n      80\n    \n    \n      197\n      85\n      85\n      100\n      10\n    \n    \n      198\n      80\n      65\n      35\n      60\n    \n  \n\n95 rows × 4 columns\n\n\n\n\n\n\n\n.\n[]\n.iloc\n.loc\n\n\n\n\nrow/단일레이블\nX\nX\nO\nO\n\n\ncol/단일레이블\nO\nO\nO\nO\n\n\nrow/레이블리스트\nX\nX\nO\nO\n\n\ncol/레이블리스트\nX\nO\nO\nO\n\n\nrow/슬라이싱\nX\nO\nO\nO\n\n\ncol/슬라이싱\nX\nX\nO\nO\n\n\nrow/bool,list\nX\nO\nO\nO\n\n\nrow/bool,ser\nX\nO\nX\nO\n\n\nrow/bool,map\nX\nX\nO\nO\n\n\n\nQuiz\n아래와 같은 데이터 프레임을 만들어라.\n\n\n\n\nname\nscore\n\n\n\n\n0\nGuebin\n50\n\n\n1\nJaein\n60\n\n\n2\nDaho\n70\n\n\n3\nSeoyeon\n80\n\n\n\n이름이 5글자 이상이고 점수가 55점 이상한 학생을 출력하라.\n\ndf=pd.DataFrame({'name':['Guebin','Jaein','Daho','Seoyeon'],'score':[50,60,70,80]})\ndf\n\n\n\n\n\n  \n    \n      \n      name\n      score\n    \n  \n  \n    \n      0\n      Guebin\n      50\n    \n    \n      1\n      Jaein\n      60\n    \n    \n      2\n      Daho\n      70\n    \n    \n      3\n      Seoyeon\n      80\n    \n  \n\n\n\n\n\ndf[list(map((lambda name,score: (len(name) >= 5)& (score>55)),df.name,df.score))]\n\n\n\n\n\n  \n    \n      \n      name\n      score\n    \n  \n  \n    \n      1\n      Jaein\n      60\n    \n    \n      3\n      Seoyeon\n      80"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#데이터",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#데이터",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "데이터",
    "text": "데이터\n\ndf=pd.read_csv('https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/movie.csv')\ndf\n\nURLError: <urlopen error [Errno -3] Temporary failure in name resolution>\n\n\nQuiz 열의 이름을 출력하여 보자."
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#기본인덱싱-df-인덱싱공부-1단계-내용",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#기본인덱싱-df-인덱싱공부-1단계-내용",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "기본인덱싱 (df 인덱싱공부 1단계 내용)",
    "text": "기본인덱싱 (df 인덱싱공부 1단계 내용)\n- color ~ num_voted_user 를 뽑고 + aspect_ratio 도 추가적으로 뽑고싶다. -> loc으로는 못하겠어요..\n\ndf.loc[:,['color':'num_voted_users','aspect_ratio']]\n\nSyntaxError: invalid syntax (1210972629.py, line 1)\n\n\n- (팁) 복잡한 조건은 iloc으로 쓰는게 편할때가 있다. \\(\\to\\) 그런데 df.columns 변수들이 몇번인지 알아보기 힘듬 \\(\\to\\) 아래와 같이 하면 열의 이름을 인덱스와 함께 출력할 수 있음\n\npd.Series(df.columns)\n\n0                         color\n1                 director_name\n2        num_critic_for_reviews\n3                      duration\n4       director_facebook_likes\n5        actor_3_facebook_likes\n6                  actor_2_name\n7        actor_1_facebook_likes\n8                         gross\n9                        genres\n10                 actor_1_name\n11                  movie_title\n12              num_voted_users\n13    cast_total_facebook_likes\n14                 actor_3_name\n15         facenumber_in_poster\n16                plot_keywords\n17              movie_imdb_link\n18         num_user_for_reviews\n19                     language\n20                      country\n21               content_rating\n22                       budget\n23                   title_year\n24       actor_2_facebook_likes\n25                   imdb_score\n26                 aspect_ratio\n27         movie_facebook_likes\ndtype: object\n\n\n\nlist(range(13))+[26]\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 26]\n\n\n\ndf.iloc[:,list(range(13))+[26]] \n\n\n\n\n\n  \n    \n      \n      color\n      director_name\n      num_critic_for_reviews\n      duration\n      director_facebook_likes\n      actor_3_facebook_likes\n      actor_2_name\n      actor_1_facebook_likes\n      gross\n      genres\n      actor_1_name\n      movie_title\n      num_voted_users\n      aspect_ratio\n    \n  \n  \n    \n      0\n      Color\n      James Cameron\n      723.0\n      178.0\n      0.0\n      855.0\n      Joel David Moore\n      1000.0\n      760505847.0\n      Action|Adventure|Fantasy|Sci-Fi\n      CCH Pounder\n      Avatar\n      886204\n      1.78\n    \n    \n      1\n      Color\n      Gore Verbinski\n      302.0\n      169.0\n      563.0\n      1000.0\n      Orlando Bloom\n      40000.0\n      309404152.0\n      Action|Adventure|Fantasy\n      Johnny Depp\n      Pirates of the Caribbean: At World's End\n      471220\n      2.35\n    \n    \n      2\n      Color\n      Sam Mendes\n      602.0\n      148.0\n      0.0\n      161.0\n      Rory Kinnear\n      11000.0\n      200074175.0\n      Action|Adventure|Thriller\n      Christoph Waltz\n      Spectre\n      275868\n      2.35\n    \n    \n      3\n      Color\n      Christopher Nolan\n      813.0\n      164.0\n      22000.0\n      23000.0\n      Christian Bale\n      27000.0\n      448130642.0\n      Action|Thriller\n      Tom Hardy\n      The Dark Knight Rises\n      1144337\n      2.35\n    \n    \n      4\n      NaN\n      Doug Walker\n      NaN\n      NaN\n      131.0\n      NaN\n      Rob Walker\n      131.0\n      NaN\n      Documentary\n      Doug Walker\n      Star Wars: Episode VII - The Force Awakens\n      8\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      Color\n      Scott Smith\n      1.0\n      87.0\n      2.0\n      318.0\n      Daphne Zuniga\n      637.0\n      NaN\n      Comedy|Drama\n      Eric Mabius\n      Signed Sealed Delivered\n      629\n      NaN\n    \n    \n      4912\n      Color\n      NaN\n      43.0\n      43.0\n      NaN\n      319.0\n      Valorie Curry\n      841.0\n      NaN\n      Crime|Drama|Mystery|Thriller\n      Natalie Zea\n      The Following\n      73839\n      16.00\n    \n    \n      4913\n      Color\n      Benjamin Roberds\n      13.0\n      76.0\n      0.0\n      0.0\n      Maxwell Moody\n      0.0\n      NaN\n      Drama|Horror|Thriller\n      Eva Boehnke\n      A Plague So Pleasant\n      38\n      NaN\n    \n    \n      4914\n      Color\n      Daniel Hsia\n      14.0\n      100.0\n      0.0\n      489.0\n      Daniel Henney\n      946.0\n      10443.0\n      Comedy|Drama|Romance\n      Alan Ruck\n      Shanghai Calling\n      1255\n      2.35\n    \n    \n      4915\n      Color\n      Jon Gunn\n      43.0\n      90.0\n      16.0\n      16.0\n      Brian Herzlinger\n      86.0\n      85222.0\n      Documentary\n      John August\n      My Date with Drew\n      4285\n      1.85\n    \n  \n\n4916 rows × 14 columns"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#actor라는-단어가-포함된-column-선택",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#actor라는-단어가-포함된-column-선택",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "actor라는 단어가 포함된 column 선택",
    "text": "actor라는 단어가 포함된 column 선택\n- 다시 열의 이름들을 확인\n\ndf.columns\n\nIndex(['color', 'director_name', 'num_critic_for_reviews', 'duration',\n       'director_facebook_likes', 'actor_3_facebook_likes', 'actor_2_name',\n       'actor_1_facebook_likes', 'gross', 'genres', 'actor_1_name',\n       'movie_title', 'num_voted_users', 'cast_total_facebook_likes',\n       'actor_3_name', 'facenumber_in_poster', 'plot_keywords',\n       'movie_imdb_link', 'num_user_for_reviews', 'language', 'country',\n       'content_rating', 'budget', 'title_year', 'actor_2_facebook_likes',\n       'imdb_score', 'aspect_ratio', 'movie_facebook_likes'],\n      dtype='object')\n\n\n- 방법1\n\ndf.iloc[:,list(map(lambda x : 'actor' in x, df.columns) )]\n\n\n\n\n\n  \n    \n      \n      actor_3_facebook_likes\n      actor_2_name\n      actor_1_facebook_likes\n      actor_1_name\n      actor_3_name\n      actor_2_facebook_likes\n    \n  \n  \n    \n      0\n      855.0\n      Joel David Moore\n      1000.0\n      CCH Pounder\n      Wes Studi\n      936.0\n    \n    \n      1\n      1000.0\n      Orlando Bloom\n      40000.0\n      Johnny Depp\n      Jack Davenport\n      5000.0\n    \n    \n      2\n      161.0\n      Rory Kinnear\n      11000.0\n      Christoph Waltz\n      Stephanie Sigman\n      393.0\n    \n    \n      3\n      23000.0\n      Christian Bale\n      27000.0\n      Tom Hardy\n      Joseph Gordon-Levitt\n      23000.0\n    \n    \n      4\n      NaN\n      Rob Walker\n      131.0\n      Doug Walker\n      NaN\n      12.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      318.0\n      Daphne Zuniga\n      637.0\n      Eric Mabius\n      Crystal Lowe\n      470.0\n    \n    \n      4912\n      319.0\n      Valorie Curry\n      841.0\n      Natalie Zea\n      Sam Underwood\n      593.0\n    \n    \n      4913\n      0.0\n      Maxwell Moody\n      0.0\n      Eva Boehnke\n      David Chandler\n      0.0\n    \n    \n      4914\n      489.0\n      Daniel Henney\n      946.0\n      Alan Ruck\n      Eliza Coupe\n      719.0\n    \n    \n      4915\n      16.0\n      Brian Herzlinger\n      86.0\n      John August\n      Jon Gunn\n      23.0\n    \n  \n\n4916 rows × 6 columns\n\n\n\n- 방법2\n\ndf.loc[:,list(map(lambda x : 'actor' in x, df.columns) )]\n\n\n\n\n\n  \n    \n      \n      actor_3_facebook_likes\n      actor_2_name\n      actor_1_facebook_likes\n      actor_1_name\n      actor_3_name\n      actor_2_facebook_likes\n    \n  \n  \n    \n      0\n      855.0\n      Joel David Moore\n      1000.0\n      CCH Pounder\n      Wes Studi\n      936.0\n    \n    \n      1\n      1000.0\n      Orlando Bloom\n      40000.0\n      Johnny Depp\n      Jack Davenport\n      5000.0\n    \n    \n      2\n      161.0\n      Rory Kinnear\n      11000.0\n      Christoph Waltz\n      Stephanie Sigman\n      393.0\n    \n    \n      3\n      23000.0\n      Christian Bale\n      27000.0\n      Tom Hardy\n      Joseph Gordon-Levitt\n      23000.0\n    \n    \n      4\n      NaN\n      Rob Walker\n      131.0\n      Doug Walker\n      NaN\n      12.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      318.0\n      Daphne Zuniga\n      637.0\n      Eric Mabius\n      Crystal Lowe\n      470.0\n    \n    \n      4912\n      319.0\n      Valorie Curry\n      841.0\n      Natalie Zea\n      Sam Underwood\n      593.0\n    \n    \n      4913\n      0.0\n      Maxwell Moody\n      0.0\n      Eva Boehnke\n      David Chandler\n      0.0\n    \n    \n      4914\n      489.0\n      Daniel Henney\n      946.0\n      Alan Ruck\n      Eliza Coupe\n      719.0\n    \n    \n      4915\n      16.0\n      Brian Herzlinger\n      86.0\n      John August\n      Jon Gunn\n      23.0\n    \n  \n\n4916 rows × 6 columns\n\n\n\n- 방법3\n\ndf.iloc[:,map(lambda x : 'actor' in x, df.columns)]\n\n\n\n\n\n  \n    \n      \n      actor_3_facebook_likes\n      actor_2_name\n      actor_1_facebook_likes\n      actor_1_name\n      actor_3_name\n      actor_2_facebook_likes\n    \n  \n  \n    \n      0\n      855.0\n      Joel David Moore\n      1000.0\n      CCH Pounder\n      Wes Studi\n      936.0\n    \n    \n      1\n      1000.0\n      Orlando Bloom\n      40000.0\n      Johnny Depp\n      Jack Davenport\n      5000.0\n    \n    \n      2\n      161.0\n      Rory Kinnear\n      11000.0\n      Christoph Waltz\n      Stephanie Sigman\n      393.0\n    \n    \n      3\n      23000.0\n      Christian Bale\n      27000.0\n      Tom Hardy\n      Joseph Gordon-Levitt\n      23000.0\n    \n    \n      4\n      NaN\n      Rob Walker\n      131.0\n      Doug Walker\n      NaN\n      12.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      318.0\n      Daphne Zuniga\n      637.0\n      Eric Mabius\n      Crystal Lowe\n      470.0\n    \n    \n      4912\n      319.0\n      Valorie Curry\n      841.0\n      Natalie Zea\n      Sam Underwood\n      593.0\n    \n    \n      4913\n      0.0\n      Maxwell Moody\n      0.0\n      Eva Boehnke\n      David Chandler\n      0.0\n    \n    \n      4914\n      489.0\n      Daniel Henney\n      946.0\n      Alan Ruck\n      Eliza Coupe\n      719.0\n    \n    \n      4915\n      16.0\n      Brian Herzlinger\n      86.0\n      John August\n      Jon Gunn\n      23.0\n    \n  \n\n4916 rows × 6 columns\n\n\n\n- 방법4\n\ndf.loc[:,map(lambda x : 'actor' in x, df.columns)]\n\n\n\n\n\n  \n    \n      \n      actor_3_facebook_likes\n      actor_2_name\n      actor_1_facebook_likes\n      actor_1_name\n      actor_3_name\n      actor_2_facebook_likes\n    \n  \n  \n    \n      0\n      855.0\n      Joel David Moore\n      1000.0\n      CCH Pounder\n      Wes Studi\n      936.0\n    \n    \n      1\n      1000.0\n      Orlando Bloom\n      40000.0\n      Johnny Depp\n      Jack Davenport\n      5000.0\n    \n    \n      2\n      161.0\n      Rory Kinnear\n      11000.0\n      Christoph Waltz\n      Stephanie Sigman\n      393.0\n    \n    \n      3\n      23000.0\n      Christian Bale\n      27000.0\n      Tom Hardy\n      Joseph Gordon-Levitt\n      23000.0\n    \n    \n      4\n      NaN\n      Rob Walker\n      131.0\n      Doug Walker\n      NaN\n      12.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      318.0\n      Daphne Zuniga\n      637.0\n      Eric Mabius\n      Crystal Lowe\n      470.0\n    \n    \n      4912\n      319.0\n      Valorie Curry\n      841.0\n      Natalie Zea\n      Sam Underwood\n      593.0\n    \n    \n      4913\n      0.0\n      Maxwell Moody\n      0.0\n      Eva Boehnke\n      David Chandler\n      0.0\n    \n    \n      4914\n      489.0\n      Daniel Henney\n      946.0\n      Alan Ruck\n      Eliza Coupe\n      719.0\n    \n    \n      4915\n      16.0\n      Brian Herzlinger\n      86.0\n      John August\n      Jon Gunn\n      23.0\n    \n  \n\n4916 rows × 6 columns"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#s로-끝나는-column-선택",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#s로-끝나는-column-선택",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "s로 끝나는 column 선택",
    "text": "s로 끝나는 column 선택\n- 방법1\n\ndf.iloc[:,map(lambda x: 's' == x[-1],df.columns )]\n\n\n\n\n\n  \n    \n      \n      num_critic_for_reviews\n      director_facebook_likes\n      actor_3_facebook_likes\n      actor_1_facebook_likes\n      gross\n      genres\n      num_voted_users\n      cast_total_facebook_likes\n      plot_keywords\n      num_user_for_reviews\n      actor_2_facebook_likes\n      movie_facebook_likes\n    \n  \n  \n    \n      0\n      723.0\n      0.0\n      855.0\n      1000.0\n      760505847.0\n      Action|Adventure|Fantasy|Sci-Fi\n      886204\n      4834\n      avatar|future|marine|native|paraplegic\n      3054.0\n      936.0\n      33000\n    \n    \n      1\n      302.0\n      563.0\n      1000.0\n      40000.0\n      309404152.0\n      Action|Adventure|Fantasy\n      471220\n      48350\n      goddess|marriage ceremony|marriage proposal|pi...\n      1238.0\n      5000.0\n      0\n    \n    \n      2\n      602.0\n      0.0\n      161.0\n      11000.0\n      200074175.0\n      Action|Adventure|Thriller\n      275868\n      11700\n      bomb|espionage|sequel|spy|terrorist\n      994.0\n      393.0\n      85000\n    \n    \n      3\n      813.0\n      22000.0\n      23000.0\n      27000.0\n      448130642.0\n      Action|Thriller\n      1144337\n      106759\n      deception|imprisonment|lawlessness|police offi...\n      2701.0\n      23000.0\n      164000\n    \n    \n      4\n      NaN\n      131.0\n      NaN\n      131.0\n      NaN\n      Documentary\n      8\n      143\n      NaN\n      NaN\n      12.0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      1.0\n      2.0\n      318.0\n      637.0\n      NaN\n      Comedy|Drama\n      629\n      2283\n      fraud|postal worker|prison|theft|trial\n      6.0\n      470.0\n      84\n    \n    \n      4912\n      43.0\n      NaN\n      319.0\n      841.0\n      NaN\n      Crime|Drama|Mystery|Thriller\n      73839\n      1753\n      cult|fbi|hideout|prison escape|serial killer\n      359.0\n      593.0\n      32000\n    \n    \n      4913\n      13.0\n      0.0\n      0.0\n      0.0\n      NaN\n      Drama|Horror|Thriller\n      38\n      0\n      NaN\n      3.0\n      0.0\n      16\n    \n    \n      4914\n      14.0\n      0.0\n      489.0\n      946.0\n      10443.0\n      Comedy|Drama|Romance\n      1255\n      2386\n      NaN\n      9.0\n      719.0\n      660\n    \n    \n      4915\n      43.0\n      16.0\n      16.0\n      86.0\n      85222.0\n      Documentary\n      4285\n      163\n      actress name in title|crush|date|four word tit...\n      84.0\n      23.0\n      456\n    \n  \n\n4916 rows × 12 columns\n\n\n\n- 방법2\n\ndf.loc[:,map(lambda x: 's' == x[-1],df.columns )]\n\n\n\n\n\n  \n    \n      \n      num_critic_for_reviews\n      director_facebook_likes\n      actor_3_facebook_likes\n      actor_1_facebook_likes\n      gross\n      genres\n      num_voted_users\n      cast_total_facebook_likes\n      plot_keywords\n      num_user_for_reviews\n      actor_2_facebook_likes\n      movie_facebook_likes\n    \n  \n  \n    \n      0\n      723.0\n      0.0\n      855.0\n      1000.0\n      760505847.0\n      Action|Adventure|Fantasy|Sci-Fi\n      886204\n      4834\n      avatar|future|marine|native|paraplegic\n      3054.0\n      936.0\n      33000\n    \n    \n      1\n      302.0\n      563.0\n      1000.0\n      40000.0\n      309404152.0\n      Action|Adventure|Fantasy\n      471220\n      48350\n      goddess|marriage ceremony|marriage proposal|pi...\n      1238.0\n      5000.0\n      0\n    \n    \n      2\n      602.0\n      0.0\n      161.0\n      11000.0\n      200074175.0\n      Action|Adventure|Thriller\n      275868\n      11700\n      bomb|espionage|sequel|spy|terrorist\n      994.0\n      393.0\n      85000\n    \n    \n      3\n      813.0\n      22000.0\n      23000.0\n      27000.0\n      448130642.0\n      Action|Thriller\n      1144337\n      106759\n      deception|imprisonment|lawlessness|police offi...\n      2701.0\n      23000.0\n      164000\n    \n    \n      4\n      NaN\n      131.0\n      NaN\n      131.0\n      NaN\n      Documentary\n      8\n      143\n      NaN\n      NaN\n      12.0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      1.0\n      2.0\n      318.0\n      637.0\n      NaN\n      Comedy|Drama\n      629\n      2283\n      fraud|postal worker|prison|theft|trial\n      6.0\n      470.0\n      84\n    \n    \n      4912\n      43.0\n      NaN\n      319.0\n      841.0\n      NaN\n      Crime|Drama|Mystery|Thriller\n      73839\n      1753\n      cult|fbi|hideout|prison escape|serial killer\n      359.0\n      593.0\n      32000\n    \n    \n      4913\n      13.0\n      0.0\n      0.0\n      0.0\n      NaN\n      Drama|Horror|Thriller\n      38\n      0\n      NaN\n      3.0\n      0.0\n      16\n    \n    \n      4914\n      14.0\n      0.0\n      489.0\n      946.0\n      10443.0\n      Comedy|Drama|Romance\n      1255\n      2386\n      NaN\n      9.0\n      719.0\n      660\n    \n    \n      4915\n      43.0\n      16.0\n      16.0\n      86.0\n      85222.0\n      Documentary\n      4285\n      163\n      actress name in title|crush|date|four word tit...\n      84.0\n      23.0\n      456\n    \n  \n\n4916 rows × 12 columns"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#c-혹은-d로-시작하는-column-선택",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#c-혹은-d로-시작하는-column-선택",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "c 혹은 d로 시작하는 column 선택",
    "text": "c 혹은 d로 시작하는 column 선택\n- 방법1\n\ndf.iloc[:,map(lambda x: 'c' == x[0] or 'd' == x[0] ,df.columns )]\n\n\n\n\n\n  \n    \n      \n      color\n      director_name\n      duration\n      director_facebook_likes\n      cast_total_facebook_likes\n      country\n      content_rating\n    \n  \n  \n    \n      0\n      Color\n      James Cameron\n      178.0\n      0.0\n      4834\n      USA\n      PG-13\n    \n    \n      1\n      Color\n      Gore Verbinski\n      169.0\n      563.0\n      48350\n      USA\n      PG-13\n    \n    \n      2\n      Color\n      Sam Mendes\n      148.0\n      0.0\n      11700\n      UK\n      PG-13\n    \n    \n      3\n      Color\n      Christopher Nolan\n      164.0\n      22000.0\n      106759\n      USA\n      PG-13\n    \n    \n      4\n      NaN\n      Doug Walker\n      NaN\n      131.0\n      143\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      Color\n      Scott Smith\n      87.0\n      2.0\n      2283\n      Canada\n      NaN\n    \n    \n      4912\n      Color\n      NaN\n      43.0\n      NaN\n      1753\n      USA\n      TV-14\n    \n    \n      4913\n      Color\n      Benjamin Roberds\n      76.0\n      0.0\n      0\n      USA\n      NaN\n    \n    \n      4914\n      Color\n      Daniel Hsia\n      100.0\n      0.0\n      2386\n      USA\n      PG-13\n    \n    \n      4915\n      Color\n      Jon Gunn\n      90.0\n      16.0\n      163\n      USA\n      PG\n    \n  \n\n4916 rows × 7 columns\n\n\n\n- 방법2\n\ndf.loc[:,map(lambda x: 'c' == x[0] or 'd' == x[0] ,df.columns )]\n\n\n\n\n\n  \n    \n      \n      color\n      director_name\n      duration\n      director_facebook_likes\n      cast_total_facebook_likes\n      country\n      content_rating\n    \n  \n  \n    \n      0\n      Color\n      James Cameron\n      178.0\n      0.0\n      4834\n      USA\n      PG-13\n    \n    \n      1\n      Color\n      Gore Verbinski\n      169.0\n      563.0\n      48350\n      USA\n      PG-13\n    \n    \n      2\n      Color\n      Sam Mendes\n      148.0\n      0.0\n      11700\n      UK\n      PG-13\n    \n    \n      3\n      Color\n      Christopher Nolan\n      164.0\n      22000.0\n      106759\n      USA\n      PG-13\n    \n    \n      4\n      NaN\n      Doug Walker\n      NaN\n      131.0\n      143\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4911\n      Color\n      Scott Smith\n      87.0\n      2.0\n      2283\n      Canada\n      NaN\n    \n    \n      4912\n      Color\n      NaN\n      43.0\n      NaN\n      1753\n      USA\n      TV-14\n    \n    \n      4913\n      Color\n      Benjamin Roberds\n      76.0\n      0.0\n      0\n      USA\n      NaN\n    \n    \n      4914\n      Color\n      Daniel Hsia\n      100.0\n      0.0\n      2386\n      USA\n      PG-13\n    \n    \n      4915\n      Color\n      Jon Gunn\n      90.0\n      16.0\n      163\n      USA\n      PG\n    \n  \n\n4916 rows × 7 columns\n\n\n\nquiz\n\ncolumn이름에 _가 포함되어있는 열을 모두 출력하라.\ncolumn이름에 _가 포함되어있는 열은 모두 몇개인가?"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#방법1-concat",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#방법1-concat",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "방법1: concat",
    "text": "방법1: concat\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\n_df = pd.DataFrame({'c':[3,4,5]}) \n_df\n\n\n\n\n\n  \n    \n      \n      c\n    \n  \n  \n    \n      0\n      3\n    \n    \n      1\n      4\n    \n    \n      2\n      5\n    \n  \n\n\n\n\n\npd.concat([df,_df],axis=1)\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n    \n    \n      1\n      2\n      3\n      4\n    \n    \n      2\n      3\n      4\n      5"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#방법2-4가지-컨셉에-따른-할당",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#방법2-4가지-컨셉에-따른-할당",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "방법2: 4가지 컨셉에 따른 할당",
    "text": "방법2: 4가지 컨셉에 따른 할당\n\n# 컨셉1: 불가능\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.c = pd.Series([1,2,3]) \ndf\n\n/home/cgb2/anaconda3/envs/py37/lib/python3.7/site-packages/ipykernel_launcher.py:1: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n  \"\"\"Entry point for launching an IPython kernel.\n\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\n\n# 컨셉2: 가능\n(예시1)\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf['c']=[3,4,5]\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n    \n    \n      1\n      2\n      3\n      4\n    \n    \n      2\n      3\n      4\n      5\n    \n  \n\n\n\n\n(예시2)\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf[['c','d']]=np.array([[3,4,5],[4,5,6]]).T # 굳이.. \ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n(예시3)\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf['c'],df['d']=[3,4,5],[4,5,6]\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\n\n# 컨셉3: 불가능\n(예시1)\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.iloc[:,2] = [3,4,5] \ndf\n\nIndexError: iloc cannot enlarge its target object\n\n\n\n\n# 컨셉4: 가능\n(예시1)\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.loc[:,'c'] = [3,4,5] \ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n    \n    \n      1\n      2\n      3\n      4\n    \n    \n      2\n      3\n      4\n      5\n    \n  \n\n\n\n\n(예시2)\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.loc[:,['c','d']] = np.array([[3,4,5],[4,5,6]]).T # 이거 솔직히 되는지 몰랐어요.. \ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n(예시3)\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.loc[:,'c'],df.loc[:,'d'] = [3,4,5],[4,5,6] \ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#방법3-.assign으로-할당-star-제-최애",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#방법3-.assign으로-할당-star-제-최애",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "방법3: .assign으로 할당 (\\(\\star\\)) – 제 최애",
    "text": "방법3: .assign으로 할당 (\\(\\star\\)) – 제 최애\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.assign(c=[3,4,5])\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n    \n    \n      1\n      2\n      3\n      4\n    \n    \n      2\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.assign(c=[3,4,5],d=[4,5,6])\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\ndf.assign(c=[3,4,5]).assign(d=[4,5,6])\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#방법4-.eval을-이용한-할당",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#방법4-.eval을-이용한-할당",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "방법4: .eval을 이용한 할당",
    "text": "방법4: .eval을 이용한 할당\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.eval('c=[3,4,5]')\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n    \n    \n      1\n      2\n      3\n      4\n    \n    \n      2\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.eval('c=[3,4,5]').eval('d=[4,5,6]')\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#연습해보기",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#연습해보기",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "연습해보기",
    "text": "연습해보기\n\n# 데이터프레임 생성\n\ndf=pd.DataFrame({'x':np.random.randn(1000),'y':np.random.randn(1000)})\ndf\n\n\n\n\n\n  \n    \n      \n      x\n      y\n    \n  \n  \n    \n      0\n      -0.813856\n      0.635606\n    \n    \n      1\n      0.457182\n      0.334678\n    \n    \n      2\n      -0.473772\n      -1.169757\n    \n    \n      3\n      -0.273939\n      -1.044208\n    \n    \n      4\n      -0.619499\n      -0.356150\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      995\n      0.205837\n      0.422563\n    \n    \n      996\n      -0.058614\n      0.478894\n    \n    \n      997\n      1.874445\n      0.057198\n    \n    \n      998\n      -0.376114\n      1.574681\n    \n    \n      999\n      -0.031349\n      0.341959\n    \n  \n\n1000 rows × 2 columns\n\n\n\n\n\n# 새로운열 r을 생성하고 \\(r=\\sqrt{x^2 + y^2}\\)를 계산\n- 방법1: 브로드캐스팅\n\ndf.assign(r=np.sqrt(df.x**2 + df.y**2))\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      r\n    \n  \n  \n    \n      0\n      -0.813856\n      0.635606\n      1.032645\n    \n    \n      1\n      0.457182\n      0.334678\n      0.566591\n    \n    \n      2\n      -0.473772\n      -1.169757\n      1.262058\n    \n    \n      3\n      -0.273939\n      -1.044208\n      1.079542\n    \n    \n      4\n      -0.619499\n      -0.356150\n      0.714578\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      0.205837\n      0.422563\n      0.470030\n    \n    \n      996\n      -0.058614\n      0.478894\n      0.482468\n    \n    \n      997\n      1.874445\n      0.057198\n      1.875318\n    \n    \n      998\n      -0.376114\n      1.574681\n      1.618976\n    \n    \n      999\n      -0.031349\n      0.341959\n      0.343393\n    \n  \n\n1000 rows × 3 columns\n\n\n\n- 방법2: (quiz) lambda + map을 이용한 개별원소 계산\n- 방법3: eval\n\ndf.eval('r=sqrt(x**2+y**2)')\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      r\n    \n  \n  \n    \n      0\n      -0.813856\n      0.635606\n      1.032645\n    \n    \n      1\n      0.457182\n      0.334678\n      0.566591\n    \n    \n      2\n      -0.473772\n      -1.169757\n      1.262058\n    \n    \n      3\n      -0.273939\n      -1.044208\n      1.079542\n    \n    \n      4\n      -0.619499\n      -0.356150\n      0.714578\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      0.205837\n      0.422563\n      0.470030\n    \n    \n      996\n      -0.058614\n      0.478894\n      0.482468\n    \n    \n      997\n      1.874445\n      0.057198\n      1.875318\n    \n    \n      998\n      -0.376114\n      1.574681\n      1.618976\n    \n    \n      999\n      -0.031349\n      0.341959\n      0.343393\n    \n  \n\n1000 rows × 3 columns"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#모티브",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#모티브",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "모티브",
    "text": "모티브\n- 원본데이터를 가급적 손상시키지 않으면서 데이터를 변형하고 싶음.\n\ndf = pd.DataFrame({'A':range(0,5),'B':range(1,6)})\ndf\n\n\n\n\n\n  \n    \n      \n      A\n      B\n    \n  \n  \n    \n      0\n      0\n      1\n    \n    \n      1\n      1\n      2\n    \n    \n      2\n      2\n      3\n    \n    \n      3\n      3\n      4\n    \n    \n      4\n      4\n      5\n    \n  \n\n\n\n\n복사본 생성\n\ndf2 = df \ndf2\n\n\n\n\n\n  \n    \n      \n      A\n      B\n    \n  \n  \n    \n      0\n      0\n      1\n    \n    \n      1\n      1\n      2\n    \n    \n      2\n      2\n      3\n    \n    \n      3\n      3\n      4\n    \n    \n      4\n      4\n      5\n    \n  \n\n\n\n\n\ndf2['C'] = (df2.A+ df2.B)/2\ndf2\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n    \n    \n      1\n      1\n      2\n      1.5\n    \n    \n      2\n      2\n      3\n      2.5\n    \n    \n      3\n      3\n      4\n      3.5\n    \n    \n      4\n      4\n      5\n      4.5\n    \n  \n\n\n\n\n\ndf2['D']= (df2.C - np.mean(df2.C))/np.std(df2.C) \ndf2\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n      -1.414214\n    \n    \n      1\n      1\n      2\n      1.5\n      -0.707107\n    \n    \n      2\n      2\n      3\n      2.5\n      0.000000\n    \n    \n      3\n      3\n      4\n      3.5\n      0.707107\n    \n    \n      4\n      4\n      5\n      4.5\n      1.414214\n    \n  \n\n\n\n\n\ndf # 니가 왜 거기서 나와??\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n      -1.414214\n    \n    \n      1\n      1\n      2\n      1.5\n      -0.707107\n    \n    \n      2\n      2\n      3\n      2.5\n      0.000000\n    \n    \n      3\n      3\n      4\n      3.5\n      0.707107\n    \n    \n      4\n      4\n      5\n      4.5\n      1.414214"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#해결책1-df.copy이용-.eval이용",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#해결책1-df.copy이용-.eval이용",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "해결책1: df.copy()이용, .eval()이용",
    "text": "해결책1: df.copy()이용, .eval()이용\n- 올바른코드1\n\ndf = pd.DataFrame({'A':range(0,5),'B':range(1,6)})\ndf2 = df.copy() \ndf2['C'] = (df2.A+ df2.B)/2\ndf2['D']= (df2.C - np.mean(df2.C))/np.std(df2.C) \n\n\ndf2\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n      -1.414214\n    \n    \n      1\n      1\n      2\n      1.5\n      -0.707107\n    \n    \n      2\n      2\n      3\n      2.5\n      0.000000\n    \n    \n      3\n      3\n      4\n      3.5\n      0.707107\n    \n    \n      4\n      4\n      5\n      4.5\n      1.414214\n    \n  \n\n\n\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      A\n      B\n    \n  \n  \n    \n      0\n      0\n      1\n    \n    \n      1\n      1\n      2\n    \n    \n      2\n      2\n      3\n    \n    \n      3\n      3\n      4\n    \n    \n      4\n      4\n      5\n    \n  \n\n\n\n\n- 올바른코드2\n\ndf = pd.DataFrame({'A':range(0,5),'B':range(1,6)})\nmean = np.mean \nstd = np.std \ndf.eval('C=(A+B)/2').eval('D=(C-@mean(C))/@std(C)')\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n      -1.414214\n    \n    \n      1\n      1\n      2\n      1.5\n      -0.707107\n    \n    \n      2\n      2\n      3\n      2.5\n      0.000000\n    \n    \n      3\n      3\n      4\n      3.5\n      0.707107\n    \n    \n      4\n      4\n      5\n      4.5\n      1.414214\n    \n  \n\n\n\n\n\n어디까지 eval expression 안에서 지원되는지 명확하지 않고\n외부에 함수를 선언하고 eval expression 안에 @를 붙이는게 좀 귀찮음\n\n- 올바른코드3 (assign) –> 실패\n\ndf = pd.DataFrame({'A':range(0,5),'B':range(1,6)})\ndf.assign(C= (df.A+df.B)/2) \n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n    \n    \n      1\n      1\n      2\n      1.5\n    \n    \n      2\n      2\n      3\n      2.5\n    \n    \n      3\n      3\n      4\n      3.5\n    \n    \n      4\n      4\n      5\n      4.5\n    \n  \n\n\n\n\n\ndf.assign(C= (df.A+df.B)/2).assign(D= (df.C- np.mean(df.C))/np.std(df.C))\n\nAttributeError: 'DataFrame' object has no attribute 'C'\n\n\n아래와 같이 고쳐야함\n\n_df = df.assign(C= (df.A+df.B)/2)\n_df.assign(D= (_df.C- np.mean(_df.C))/np.std(_df.C))\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n      -1.414214\n    \n    \n      1\n      1\n      2\n      1.5\n      -0.707107\n    \n    \n      2\n      2\n      3\n      2.5\n      0.000000\n    \n    \n      3\n      3\n      4\n      3.5\n      0.707107\n    \n    \n      4\n      4\n      5\n      4.5\n      1.414214\n    \n  \n\n\n\n\n\n이건 우리의 철학이랑 안맞음.."
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#해결책2-assign을-이용한-연쇄할당",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#해결책2-assign을-이용한-연쇄할당",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "해결책2: assign을 이용한 연쇄할당",
    "text": "해결책2: assign을 이용한 연쇄할당\n실패한코드는 아래와 같다.\n\ndf.assign(C= (df.A+df.B)/2).assign(D= (df.C- np.mean(df.C))/np.std(df.C))\n\nAttributeError: 'DataFrame' object has no attribute 'C'\n\n\n두번째 assign에서 표현된 df.C 에서, df가 current df (= df.assign(C= (df.A+df.B)/2) 까지 연산된 상태) 를 의미하도록 만들고 싶다. \\(\\to\\) 아래와 같이 lambda df: 를 추가하면 된다.\n\ndf.assign(C= (df.A+df.B)/2).assign(D= lambda df: (df.C- np.mean(df.C))/np.std(df.C))\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n      -1.414214\n    \n    \n      1\n      1\n      2\n      1.5\n      -0.707107\n    \n    \n      2\n      2\n      3\n      2.5\n      0.000000\n    \n    \n      3\n      3\n      4\n      3.5\n      0.707107\n    \n    \n      4\n      4\n      5\n      4.5\n      1.414214\n    \n  \n\n\n\n\n- 연쇄할당\n\ndf.assign(C = (df.A+df.B)/2).assign(D = lambda df: df.C +2).assign(E = lambda df: df.D - 2)\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n      E\n    \n  \n  \n    \n      0\n      0\n      1\n      0.5\n      2.5\n      0.5\n    \n    \n      1\n      1\n      2\n      1.5\n      3.5\n      1.5\n    \n    \n      2\n      2\n      3\n      2.5\n      4.5\n      2.5\n    \n    \n      3\n      3\n      4\n      3.5\n      5.5\n      3.5\n    \n    \n      4\n      4\n      5\n      4.5\n      6.5\n      4.5"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#section",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson12.html#section",
    "title": "Lesson 12: pandas + lambda, map",
    "section": "2.",
    "text": "2.\n아래의 결과를 관찰하고 drop의 기능을 유추하라.\n(예시1)\n\ndf.drop(columns='a')\n\n\n\n\n\n  \n    \n      \n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      2\n      3\n      4\n    \n    \n      1\n      3\n      4\n      5\n    \n    \n      2\n      4\n      5\n      6\n    \n    \n      3\n      5\n      6\n      7\n    \n  \n\n\n\n\n(예시2)\n\ndf.drop(columns=['a','b'])\n\n\n\n\n\n  \n    \n      \n      c\n      d\n    \n  \n  \n    \n      0\n      3\n      4\n    \n    \n      1\n      4\n      5\n    \n    \n      2\n      5\n      6\n    \n    \n      3\n      6\n      7\n    \n  \n\n\n\n\n(예시3)\n\ndf.drop(index=0)\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n    \n      3\n      4\n      5\n      6\n      7\n    \n  \n\n\n\n\n(예시4)\n\ndf.drop(index=range(2,4))\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n  \n\n\n\n\n문제: df 에서 a,c열을 삭제하고 첫행을 삭제하라.\n\n#출력결과는 아래와 같아야 한다. \n\n\n\n\n\n  \n    \n      \n      b\n      d\n    \n  \n  \n    \n      1\n      3\n      5\n    \n    \n      2\n      4\n      6\n    \n    \n      3\n      5\n      7"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson11.html#lambda",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson11.html#lambda",
    "title": "Lesson 11: lambda, map",
    "section": "lambda",
    "text": "lambda\n- 예제1: 람다표현식(lambda expression)자체가 하나의 오브젝트임\n\nlambda x: (x-2)**2 ### lambda x: (x-2)**2 가 실행되는 순간 메모리상에 함수 오브젝트가 저장됨 \n\n<function __main__.<lambda>(x)>\n\n\n\n“lambda x: (x-2)**2” 는 \\(lambda(x)=(x-2)^2\\)의 느낌으로 기억하면 쉬움\n\n(사용방법)\n\n(lambda x: (x-2)**2)(2) # 입력2 -> 출력 (2-2)^2 =0 \n\n0\n\n\n\n(lambda x: (x-2)**2)(5) # 입력5 -> 출력 (5-2)^2 =9\n\n9\n\n\n\n(lambda x: (x-2)**2)(6) # 입력6 -> 출력 (6-2)^2 =16\n\n16\n\n\n\n(lambda x: (x-2)**2)(-2) # 입력-2 -> 출력 (-2-2)^2 =16\n\n16\n\n\nQuiz\n\\(f(x)=\\sqrt{x}\\) 를 수행하는 함수를 lambda를 이용하여 구성하라.\n- 예제2: 람다표현식에 이름을 줄 수 있음.\n\nf = lambda x: (x-2)**2\n\n\nf(2),f(4),f(6),f(-2)\n\n(0, 4, 16, 16)\n\n\n위의 코드는 아래와 같다.\n\ndef f(x):\n    return (x-2)**2\nf(2),f(4),f(6),f(-2)\n\n(0, 4, 16, 16)\n\n\n- 예제3: 조건부 출력\n\nf = lambda x,y: x if x>y else y # x,y가 입력 -> x>y 일때만 x를 리턴하고 그렇지않으면 y를 리턴 = 큰값을 리턴하라는 소리임 \n\n\nf(1,20)\n\n20\n\n\nQuiz\n임의의 알파벳 문자열을 입력으로 하고, 알파벳이 대문자이면 “대문자 입니다”를 출력하고 소문자이면 “소문자 입니다”를 출력하는 함수를 구성하라.\n(힌트) 아래코드 이용\n\n'a'.isupper()\n\nFalse\n\n\n- 예제4: 람다표현식들의 리스트\n\nfl = [lambda x: x, lambda x: x**2, lambda x: x**3]\n\n\nfor f in fl: \n    print(f(2))\n\n2\n4\n8\n\n\n\nx = np.linspace(-1,1,100)\nfor f in fl:\n    plt.plot(x,f(x),'--') \n\n\n\n\n- 예제5: 람다표현식들의 딕셔너리\n\nfd = {'f1':lambda x: x, 'f2':lambda x: x**2, 'f3':lambda x: x**3}\nfd\n\n{'f1': <function __main__.<lambda>(x)>,\n 'f2': <function __main__.<lambda>(x)>,\n 'f3': <function __main__.<lambda>(x)>}\n\n\n\nfor k in fd:\n    plt.plot(x,fd[k](x),'--')\n\n\n\n\n- 예제6: 람다표현식을 리턴하는 함수 (함수를 리턴하는 함수)\n(예비학습) 함수 \\(g(x)\\)가 정의되어 있을때 \\(\\frac{d}{dx}g(x)\\)의 값을 계산해보기\n\ng = lambda x: x**2 \n\n\ngg = lambda x : (g(x+0.001)-g(x))/0.001\n\n\ngg(4)\n\n8.0010000000037\n\n\n(목표) 도함수를 구해주는 derivate 함수를 정의하자. 이 함수는 임의의 함수 g를 입력으로 받으면, g의 도함수(gg)가 리턴되는 기능을 가진다.\n\ndef derivate(g):\n    return lambda x : (g(x+0.001)-g(x))/0.001\n\n(사용1)\n\ngg = derivate(g) \n\n\nx = np.linspace(0,6.28,1000) \n\n\nplt.plot(x,g(x),label=r'$f(x)=sin(x)$')\nplt.plot(x,gg(x),label=r'$\\frac{d}{dx}f(x)=cos(x)$')\nplt.legend(fontsize=15)\n\n<matplotlib.legend.Legend at 0x7fa54cde3a50>\n\n\n\n\n\n(사용2)\n\ng0 = lambda x: (1/6)*x**3\ng1 = derivate(g0) # (1/2)x^2 \ng2 = derivate(g1) # x \n\n\nx = np.linspace(-1,1,100)\nplt.plot(x,g0(x),'--',label=r'$g_0(x)=\\frac{1}{6}x^3$')\nplt.plot(x,g1(x),'--',label=r'$g_1(x)=\\frac{1}{2}x^2$')\nplt.plot(x,g2(x),'--',label=r'$g_2(x)=x$')\nplt.legend(fontsize=15)\n\n<matplotlib.legend.Legend at 0x7f662b86ed10>\n\n\n\n\n\n- 예제7: 예제6의 다른표현\n\nderivate = lambda g: lambda x : (g(x+0.001)-g(x))/0.001\n\n(사용1)\n\ng = lambda x: np.sin(x) \n\n\ngg = derivate(g) \n\n\nx = np.linspace(0,6.28,1000) \n\n\nplt.plot(x,g(x),label=r'$f(x)=sin(x)$')\nplt.plot(x,gg(x),label=r'$\\frac{d}{dx}f(x)=cos(x)$')\nplt.legend(fontsize=15)\n\n<matplotlib.legend.Legend at 0x7f662b5fef50>\n\n\n\n\n\n(사용2)\n\ng0 = lambda x: (1/6)*x**3\ng1 = derivate(g0) # (1/2)x^2 \ng2 = derivate(g1) # x \n\n\nx = np.linspace(-1,1,100)\nplt.plot(x,g0(x),'--',label=r'$g_0(x)=\\frac{1}{6}x^3$')\nplt.plot(x,g1(x),'--',label=r'$g_1(x)=\\frac{1}{2}x^2$')\nplt.plot(x,g2(x),'--',label=r'$g_2(x)=x$')\nplt.legend(fontsize=15)\n\n<matplotlib.legend.Legend at 0x7f662b4e78d0>"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson11.html#map",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson11.html#map",
    "title": "Lesson 11: lambda, map",
    "section": "map",
    "text": "map\n- 개념: $(f,[x_1,x_2,,x_n] )=$\n- 예제1:\n\nx = [1,2,3] \nf = lambda x: x+1 \ny = list(map(f,x))\n\n(다른구현1)\n\nlist(map(lambda x: x+1,[1,2,3]))\n\n[2, 3, 4]\n\n\n(다른구현2)\n\nf = lambda x: x+1 \n[f(xi) for xi in [1,2,3]]\n\n[2, 3, 4]\n\n\n(다른구현3)\n\n[(lambda x: x+1)(xi) for xi in [1,2,3]]\n\n[2, 3, 4]\n\n\n(다른구현4)–최악\n\ny = [] \nx = [1,2,3] \nf = lambda x: x+1 \nfor xi in x:\n    y.append(f(xi))\n\n\ny\n\n[2, 3, 4]\n\n\n(다른구현5)–더 최악\n\ny = [] \nx = [1,2,3] \nf = lambda x: x+1 \nfor i in range(len(x)):\n    y.append(f(x[i]))\n\n\ny\n\n[2, 3, 4]\n\n\nQuiz\n\\(x=[1,2,3,4,5]\\)에 대하여 \\(x^2\\)을 수행하는 함수를 구현하라.\n- 예제2: 문자열을 입력으로 받고 대문자이면 True, 소문자이면 False\n입력: A,B,C,a,b,c\n출력: T,T,T,F,F,F\n\nx= list('ABCabc')\n# x = ['A','B','C','a','b','c']\nf = lambda s: s.isupper()\ny = list(map(f,x))\n\n\nx,y\n\n(['A', 'B', 'C', 'a', 'b', 'c'], [True, True, True, False, False, False])\n\n\n- 예제3: 두개의 입력을 받는 함수 (map을 이용하는 것이 리스트 컴프리헨션보다 조금 편한것 같다)\n\nlist(map(lambda x,y: x+y, [1,2,3],[-1,-2,-3]))\n\n[0, 0, 0]\n\n\n(다른구현)– 리스트컴프리헨션\n\nf = lambda x,y: x+y \n[f(x,y) for x,y in zip([1,2,3],[-1,-2,-3])] \n\n[0, 0, 0]\n\n\nquiz\n\nt=np.linspace(-3.14,3.14,100)\nx=np.sin(t)\ny=np.cos(t)\n\n\nplt.plot(t,x)\nplt.plot(t,y)\n\n\n\n\n\\(f(x,y) = max(x,y)\\) 를 구현하여 \\({\\bf x}\\),\\({\\bf y}\\) 각 원소에 적용하고 결과를 시각화 하라.\n\nf = (lambda x,y: max(x,y))\nf(3,4)\n\n4\n\n\n\nz= list(map(f,x,y))\n\n\nplt.plot(t,z)\n\n\n\n\n- 예제4: map은 “하나의 함수에 다양한 입력”을 적용하는 경우에만 사용가능, 리스트컴프리헨션은 “다양한 함수에 다양한 입력” 지원\n\nflst = [lambda x: x+1, lambda x: x+2, lambda x:x+3] \n\nmap으로 구현시도 \\(\\to\\) 실패\n\nlist(map(flst,[-1,-2,-3])) # 결과가 0,0,0\n\nTypeError: 'list' object is not callable\n\n\n리스트컴프리헨션으로 구현시도 \\(\\to\\) 성공\n\n[f(x) for f,x in zip(flst,[-1,-2,-3])]\n\n[0, 0, 0]\n\n\n- 종합: map과 리스트컴프리헨션과 비교\n\nmap은 for문을 위한 \\(i\\)등의 인덱스를 쓰지 않지만 리스트컴프리헨션은 필요함\nmap은 좀더 리스트컴프리헨션보다 제약적으로 사용할 수 밖에 없음."
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson11.html#section",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson11.html#section",
    "title": "Lesson 11: lambda, map",
    "section": "1.",
    "text": "1.\n아래와 같은 수열이 있다고 하자.\n\nx=np.random.randint(low=0,high=5,size=100)\nx\n\narray([1, 1, 4, 0, 2, 3, 2, 1, 4, 4, 0, 0, 3, 0, 1, 3, 1, 0, 0, 1, 2, 1,\n       1, 0, 0, 1, 2, 1, 2, 0, 0, 1, 3, 4, 0, 0, 3, 0, 0, 0, 3, 4, 3, 4,\n       0, 3, 0, 0, 4, 0, 4, 0, 3, 3, 4, 0, 4, 2, 0, 1, 1, 1, 3, 0, 1, 1,\n       4, 1, 1, 4, 1, 0, 4, 2, 1, 2, 0, 0, 1, 3, 3, 2, 0, 3, 3, 3, 0, 4,\n       2, 1, 3, 0, 2, 3, 0, 3, 4, 2, 1, 3])\n\n\n\\({\\tt x}\\)의 각 원소에 아래와 같은 변환을 수행하라.\n\n0 \\(\\to\\) ‘사과’\n1 \\(\\to\\) ‘배’\n2 \\(\\to\\) ‘오렌지’\n3 \\(\\to\\) ‘자동차’\n4 \\(\\to\\) ‘오토바이’\n\n\n_dct = {0:'사과',1:'배',2:'오렌지',3:'자동차',4:'오토바이'}\nlst = list(map(lambda x: _dct[x],x))\nlst[:10] # 첫 10개만 출력\n\n['배', '배', '오토바이', '사과', '오렌지', '자동차', '오렌지', '배', '오토바이', '오토바이']"
  },
  {
    "objectID": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson11.html#section-1",
    "href": "posts/Day2/06_Functions, ControlFlow/2023-01-31-Lesson11.html#section-1",
    "title": "Lesson 11: lambda, map",
    "section": "2.",
    "text": "2.\n1의 결과에서 아래와 같은 변환을 수행하라.\n\n‘사과’ \\(\\to\\) ‘과일’\n‘배’ \\(\\to\\) ‘과일’\n‘오렌지’ \\(\\to\\) ‘과일’\n‘자동차’ \\(\\to\\) ‘탈것’\n‘오토바이’ \\(\\to\\) ‘탈것’\n\n\n_dct = {'과일':['사과','배','오렌지'],'탈것':['자동차','오토바이']}\nrslt = [key for l in lst for key in _dct if l in _dct[key]]\nrslt[:10] # 첫 10개만 출력\n\n['과일', '과일', '탈것', '과일', '과일', '탈것', '과일', '과일', '탈것', '탈것']"
  },
  {
    "objectID": "posts/Day2/05_Modules/2023-01-31-Lesson10.html",
    "href": "posts/Day2/05_Modules/2023-01-31-Lesson10.html",
    "title": "Lesson 10: 소스코드 관리, 모듈, 라이브러리",
    "section": "",
    "text": "생략함. 아래의 강의를 참고하세요.\n파이썬입문: (4주차) 3월23일\n파이썬입문: (5주차) 4월4일"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#연산",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#연산",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "연산",
    "text": "연산\n- 하나있어요..\n\nscore = {'guebin':49, 'iu':80} \nscore \n\n{'guebin': 49, 'iu': 80}\n\n\n\n'guebin' in score\n\nTrue\n\n\n\n'iu' in score\n\nTrue\n\n\n\n'hynn' in score\n\nFalse\n\n\n- in은 사실 다른자료형도 가능했음\n(관찰1)\n\n'a' in 'guebin' \n\nFalse\n\n\n\n'b' in 'guebin' \n\nTrue\n\n\n\n'c' in 'guebin' \n\nFalse\n\n\n(관찰2)\n\ntpl = 1,2,3 \ntpl\n\n(1, 2, 3)\n\n\n\n1 in tpl\n\nTrue\n\n\n\n4 in tpl\n\nFalse\n\n\n(관찰3)\n\nscore = [['guebin',49],['iu',80],['hynn',99]] \nscore\n\n[['guebin', 49], ['iu', 80], ['hynn', 99]]\n\n\n\n['guebin',49] in score \n\nTrue\n\n\n- in연산자가 dict형에 사용되면 key를 기준으로 True, False를 판단한다."
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#메소드",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#메소드",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "메소드",
    "text": "메소드\n(get)\n\nscore = {'guebin':49, 'iu':80} \nscore \n\n{'guebin': 49, 'iu': 80}\n\n\n\nscore.get('guebin') \n\n49\n\n\n아래와 같은 기능\n\nscore['guebin']\n\n49\n\n\n미묘한 차이점이 존재함\n\nscore['hynn'] # hynn이 없어서 키에러 출력, 그런 key는 없다.. \n\nKeyError: 'hynn'\n\n\n\nscore.get('hynn') # hynn이 없으면 아무것도 출력안함 \n\n(keys,values,items)\n- .keys()는 딕셔너리의 키를 리턴한다.\n\nscore = {'guebin':49, 'iu':80} \nscore \n\n{'guebin': 49, 'iu': 80}\n\n\n\n_keys=score.keys()\n_keys\n\ndict_keys(['guebin', 'iu'])\n\n\n\ntype(_keys) # 리턴된 자료형은 이상한것임\n\ndict_keys\n\n\n\nlist(_keys) # 아무튼 그 이상한 자료형도 리스트화 가능 \n\n['guebin', 'iu']\n\n\n- .values()는 딕셔너리의 값들을 리턴한다.\n\n_values =score.values()\n_values \n\ndict_values([49, 80])\n\n\n\ntype(_values)\n\ndict_values\n\n\n\nlist(_values)\n\n[49, 80]\n\n\n- .items()는 딕셔너리의 (키,값)을 리턴한다.\n\n_items = score.items()\n_items \n\ndict_items([('guebin', 49), ('iu', 80)])\n\n\n\ntype(_items)\n\ndict_items\n\n\n\nlist(_items)\n\n[('guebin', 49), ('iu', 80)]"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#for문",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#for문",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "for문",
    "text": "for문\n(예시1)\n\nfor i in score.keys():\n    print(i)\n\nguebin\niu\n\n\n\nfor i in score:\n    print(i)\n\nguebin\niu\n\n\n\n딕셔너리 그자체도 for문에 넣을 수 있다.\ni에는 value가 삭제되어 들어간다. (즉 key만)\n결과를 보면 score대신에 score.keys()와 list(score)를 넣었을때와 결과가 같다.\n\n\nNote: list(score) 하면 key만 리턴된다.\n\n(예시2)\n\nfor v in score.values():\n    print(v)\n\n49\n80\n\n\n(예시3)\n\nfor k in score.items():\n    print(k)\n\n('guebin', 49)\n('iu', 80)\n\n\n(예시4)\n\nfor k,v in score.items():\n    print(k,v)\n\nguebin 49\niu 80\n\n\n(예시5)\n\nfor k,v in score.items():\n    print(k + '의 중간고사 점수는 %s점 입니다.' % v)\n\nguebin의 중간고사 점수는 49점 입니다.\niu의 중간고사 점수는 80점 입니다.\n\n\n[보충학습] 문자열 새치기\n\n'제 이름은 %s입니다' % '최규빈'\n\n'제 이름은 최규빈입니다'\n\n\n\n%는 새치기연산자임. %s는 새치기하는 자리라고 생각\n\n보충학습끝"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#딕셔너리-고급",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#딕셔너리-고급",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "딕셔너리 고급",
    "text": "딕셔너리 고급\n\n키는 문자열만 가능한 것이 아니다.\n- 정수키\n\nscore = {0:49, 1:80, 2:99} # key를 0,1,2로 \nscore\n\n{0: 49, 1: 80, 2: 99}\n\n\n- 인덱싱은?\n\nscore[0] # 키로 인덱싱을 하고 있는데 마치 원소의 위치로 인덱싱을 하는 기분 \n\n49\n\n\n- 그럼 혹시 이것도?\n\nscore[:2]\n\nTypeError: unhashable type: 'slice'\n\n\n\nscore[-1] # 이것도 될리가 없죠.. \n\nKeyError: -1\n\n\n\n\n키로가능한것? 문자열, 숫자값, 튜플\n\nscore = {('guebin',0): 10, ('guebin',1): 20, ('guebin',2):49}  # 0은 출석점수, 1은 레포트 점수, 2는 중간고사 점수 \nscore\n\n{('guebin', 0): 10, ('guebin', 1): 20, ('guebin', 2): 49}\n\n\n\nscore[('guebin',0)]\n\n10\n\n\n\nscore['guebin',2]\n\n49\n\n\n\nscore[('guebin',3)] = 99 # 규빈의 기말고사 점수를 추가 \n\n\nscore\n\n{('guebin', 0): 10, ('guebin', 1): 20, ('guebin', 2): 49, ('guebin', 3): 99}\n\n\n\n문자열, 숫자값, 튜플의 공통점? 불변객체\n\n\n\n참고 (불변형과 가변형)\n(인트형은 불변)\n\na=1\na,id(a)\n\n(1, 140554269835504)\n\n\n\na=2\na,id(a)\n\n(2, 140554269835536)\n\n\n(문자열도 불변)\n\na='guebin'\na,id(a)\n\n('guebin', 140553659148336)\n\n\n\na='Guebin'\na,id(a)\n\n('Guebin', 140553649883440)\n\n\n(리스트는 가변)\n\na=list('guebin')\na,id(a)\n\n(['g', 'u', 'e', 'b', 'i', 'n'], 140553645841408)\n\n\n\na[0]='G'\n\n\na,id(a)\n\n(['G', 'u', 'e', 'b', 'i', 'n'], 140553645841408)"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#선언",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#선언",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "선언",
    "text": "선언\n\na={'notebook','desktop'}"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#원소추출",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#원소추출",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "원소추출",
    "text": "원소추출\n- 일단 인덱스로는 못합니다.\n\na={'notebook','desktop'}\na[0]\n\nTypeError: 'set' object is not subscriptable\n\n\n- 딱히 하는 방법이 없어요.. 그리고 이걸 하는 의미가 없어요.. (원소에 접근해서 뭐하려고??)"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#원소추가",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#원소추가",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "원소추가",
    "text": "원소추가\n- 이건 의미가 있죠\n\na={'notebook','desktop'} \na\n\n{'desktop', 'notebook'}\n\n\n\na.add('ipad')\na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\na.add('notebook') # 이미 원소로 있는건 추가되지 않음. \na\n\n{'desktop', 'ipad', 'notebook'}"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#원소삭제",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#원소삭제",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "원소삭제",
    "text": "원소삭제\n\na={'desktop', 'ipad', 'notebook'}\na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\na.remove('notebook')\n\n\na\n\n{'desktop', 'ipad'}"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#연산-1",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#연산-1",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "연산",
    "text": "연산\n- in 연산자\n\na={'desktop', 'ipad', 'notebook'}\na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\n'notebook' in a\n\nTrue\n\n\n\n참고로 in연산자는 집합에서만 쓰는것은 아님\n\n- 합집합, 교집합, 차집합\n\nday1 = {'notebook','desktop'}\nday2 = {'notebook','ipad'}\n\n\nday1 | day2 # 합집합\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\nday1 & day2 # 교집합\n\n{'notebook'}\n\n\n\nday1 - day2 # 차집합 \n\n{'desktop'}\n\n\n\nday2 - day1 # 차집합\n\n{'ipad'}\n\n\n- 부분집합\n\nday1 = {'notebook', 'desktop'}\nday2 = day1 | {'ipad'} \n\n\nday1 < day2  # day1는 day2의 부분집합인가? \n\nTrue\n\n\n\nday2 < day1\n\nFalse"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#메소드-1",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#메소드-1",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "메소드",
    "text": "메소드\n- 합집합\n\nday1 = {'notebook', 'desktop'}\nday2 = {'notebook','ipad'}\n\n\nday1.union(day2)\n\n{'desktop', 'ipad', 'notebook'}\n\n\n- 나머지 메소드는 스스로 찾아보세요"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#for문-1",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson4.html#for문-1",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "for문",
    "text": "for문\n\nday1 = {'notebook', 'desktop'}\nday2 = {'notebook','ipad'}\n\n\nfor i in day1|day2: \n    print(i)\n\nipad\nnotebook\ndesktop"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson3.html#튜플을-왜-쓰지-1",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson3.html#튜플을-왜-쓰지-1",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "튜플을 왜 쓰지? (1)",
    "text": "튜플을 왜 쓰지? (1)\n그냥 리스트를 쓰면 되는거 아닌가 하는 생각이 듭니다. 그냥 튜플은 값이 바뀌지 않는 리스트 느낌. 이게 왜 쓸모있지?\n\n책의설명: 코딩을 하다보면 값을 바꾸지 말아야 할 것을 실수로 값을 바꾸는 경우가 있음. 이런 실수를 방지할 수 있다.\nshallow copy/deep copy 에 대한 개념을 모르면 생기는 여러가지 side effect이 있음. 이러한 side effect을 막을 수 있는 무기임."
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson3.html#슬기로운-튜플-사용-starstarstarstarstar",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson3.html#슬기로운-튜플-사용-starstarstarstarstar",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "슬기로운 튜플 사용 (\\(\\star\\star\\star\\star\\star\\))",
    "text": "슬기로운 튜플 사용 (\\(\\star\\star\\star\\star\\star\\))\n\n상황1: 다중출력(?)\n- 예제: 여러변수를 동시에 출력하고 싶을 경우 (다중출력?)\n변수를 아래와 같이 선언하였다고 하자.\n\na=1\nb=2\nc=3 \n\n선언된 값을 확인하려면?\n\na\n\n1\n\n\n\nb\n\n2\n\n\n\nc\n\n3\n\n\n튜플을 이용하면?\n\na,b,c # 괄호하나 생략하는것이 이렇게 편하다..\n\n(1, 2, 3)\n\n\n\n\n상황2: 다중할당\n- 예제: 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우)\n\nname, age, sex, height, weight = 'Tom', 20, 'M', 180, 70 \n\n\nname, age, sex, height, weight\n\n('Tom', 20, 'M', 180, 70)\n\n\n\nheight\n\n180\n\n\n- 예제: 다중할당2, 위도와 경도\n\ncoor = (37,127) # 서울 \ncoor\n\n(37, 127)\n\n\n\nlat, lon = coor\n\n\nlat \n\n37\n\n\n\nlon\n\n127\n\n\n- 잠깐만: 다중할당은 꼭 튜플에서만 가능한가?\n그건 아니다…\n\n[x,y,z] = [1,2,3] \nx,y,z # 다중출력 \n\n(1, 2, 3)\n\n\n\n[x,y] = 'hi'\nx,y \n\n('h', 'i')\n\n\n튜플과 같이 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과 세트로 사용함)\n\nx,y,z = 1,2,3\nx,y,z # 다중출력 \n\n(1, 2, 3)\n\n\n\nx,y = 'hi'\nx,y \n\n('h', 'i')\n\n\n\n\n상황3: 변수값을 교환\n- 예제: 임시변수 사용없이 두 변수의 값을 교환\n\na=10\nb=20\n\n\na,b = b,a \n\n\na\n\n20\n\n\n\nb\n\n10\n\n\n\n\n상황4: for문과 함께\n- 예제: for문과 튜플\n\nlst = [['guebin', 202112345, 'M'],\n       ['iu',202254321, 'F'],\n       ['hodong', 202011223, 'M']]\nlst\n\n[['guebin', 202112345, 'M'],\n ['iu', 202254321, 'F'],\n ['hodong', 202011223, 'M']]\n\n\n\nfor i in lst: \n    print(i)\n\n['guebin', 202112345, 'M']\n['iu', 202254321, 'F']\n['hodong', 202011223, 'M']\n\n\n\nfor name,studentid,sex in lst: \n    print(name)\n\nguebin\niu\nhodong\n\n\n\nfor name,studentid,sex in lst: \n    print(name,sex)\n\nguebin M\niu F\nhodong M\n\n\n- 예제: for문과 튜플, dummy variable _\n\nfor name,studentid,sex in lst: \n    print(studentid)\n\n202112345\n202254321\n202011223\n\n\n\nfor _,studentid,_ in lst: \n    print(studentid)\n\n202112345\n202254321\n202011223\n\n\n\nfor _,_,sex in lst: \n    print(sex)\n\nM\nF\nM\n\n\n\nfor name,_,sex in lst: \n    print(name,sex)\n\nguebin M\niu F\nhodong M\n\n\n- 예제: for문과 튜플, * 연산자\n(motive)\n\nfor name,_,_  in lst: \n    print(name)\n\nguebin\niu\nhodong\n\n\n\n귀찮냐..\n\n(신기술)\n\nfor name,*args  in lst: \n    print(name)\n\nguebin\niu\nhodong\n\n\n\n\n상황4: 언패킹연산자와 함께\n- 예제: 튜플과 언패킹연산자 *\n\nhead, body, *tail = range(1,11) \nhead, body, tail\n\n(1, 2, [3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\nhead1,head2, *body, tail1,tail2,tail3 = range(1,11) \nhead1,head2, body, tail1,tail2,tail3 \n\n(1, 2, [3, 4, 5, 6, 7], 8, 9, 10)\n\n\n\n*head, body, tail = range(1,11) \nhead, body, tail\n\n([1, 2, 3, 4, 5, 6, 7, 8], 9, 10)\n\n\n\nAppendix: 언패킹연산자\n(관찰)\n그러고 보니까..\nhead1,head2, body, tail1,tail2,tail3  = (1, 2, [3,4,5,6,7], 8, 9, 10)\nhead1,head2, *body, tail1,tail2,tail3   = (1, 2, 3,4,5,6,7, 8, 9, 10)\n이렇다는 거잖아?\n*를 붙이면 1차원 자료구조가 풀린다..?\n\n*[1,2,3] # ?? 뭐하누?\n\nSyntaxError: can't use starred expression here (<ipython-input-6-a543979d8d3c>, line 4)\n\n\n\nprint(*[1,2,3]) ## 이런 느낌!!\n\n1 2 3\n\n\n\nprint([1,2,3]) # 비교\n\n[1, 2, 3]"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson3.html#튜플을-왜-쓰지-2",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson3.html#튜플을-왜-쓰지-2",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "튜플을 왜 쓰지? (2)",
    "text": "튜플을 왜 쓰지? (2)\n- 책의 설명 (이 설명이 꼭 파이썬에 한정되는 것은 아님. 모든 언어에 존재하는 불변형 객체에 적용가능한 설명)\n\n실수방지\n빠르다, 다중작업에 유리하다, 여러사람과 작업하기에 유리하다, 깊은복사/얕은복사시 원하지않는 오류(side effect이라고 함)를 방지할 수 있다, 메모리관리에도 유리함…\n느낌: 불변형은 기능제한이 있는데 가볍고 빠른, 가변형은 기능은 풍부하지만 약간 느리고 무거운 느낌임 (불변형:라면사리, 가변형:라면)\n\n- 제 생각\n\n튜플의 장점은 소괄호의 생략에 있음 (이것은 파이썬과 줄리아만 가능)\n이것이 언패킹구문과 결합하여 엄청난 가독성을 제공\n\n(예시) 튜플의 막강함\n\ndef mycal(a,b):\n    return a+b, a-b, a*b, a/b  #여러개의 값을 리턴하는듯 보임. -> 사실은 길이가 4인 튜플 1개를 리턴\n\n\nmycal(2,3)\n\n(5, -1, 6, 0.6666666666666666)\n\n\n\n_, _, mulrslt, _ = mycal(2,3) # 병렬할당 \n\n\nmulrslt\n\n6\n\n\n- 의문: 왜 튜플만 괄호를 생략할 수 있지?\n- 내 망상\n\n튜플을 먼저 만들고, 괄호를 생략하는 문법을 추가한것은 아닐것임\n원래 괄호없이 컴마만 대충찍어서 선언가능한 아주 간단한 타입의 벡터형을 만들고 싶었을 것임.\n왜? 괄호없는 벡터를 만들고 + 언패킹을 사용하면 여러가지 구문들이 엄청나게 간단해짐.\n컴마컴마로 선언하는 벡터는 한 두번 쓰고 버리는 경우가 많으며 대부분 이름도 필요없음 \\(\\to\\) 원소에 접근해서 sorting하여 순서를 바꾸고 싶다던가 원소를 추가할 이유가 없음 \\(\\to\\) 비싼 가변형으로 만들 이유가 없다는 것..\n우리가 필요한 것: 데이터가 벡터의 형태로 모여있기만 하면 된다!\n\n- 다른 사람들 의견 (컴공과 인터뷰)\n\n튜플 + 언패킹에 충격 \\(\\to\\) 파이썬 편하더라.."
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson1.html#선언",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson1.html#선언",
    "title": "Lesson 01: 파이썬의 자료형 I (int, float, bool, str)",
    "section": "선언",
    "text": "선언\n\na='guebin'\n\n\na\n\n'guebin'"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson1.html#연산",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson1.html#연산",
    "title": "Lesson 01: 파이썬의 자료형 I (int, float, bool, str)",
    "section": "연산",
    "text": "연산\n- 더하기(+)연산\n\na='X'\nb='2'\n\n\nc=a+b\nc\n\n'X2'\n\n\n- 빼기(-)연산\n\na='X2'\nb='2'\na-b\n\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n\n\n이런건 없다.\n\n- 곱하기(*)연산\n\na='X'\n\n\na+a+a\n\n'XXX'\n\n\n\na*3 # a*3 = a+a+a = 'X'+'X+'X'\n\n'XXX'\n\n\n아래도 가능하다.\n\n3*a\n\n'XXX'\n\n\n그리고 아래도 가능하다.\n\na='X'\nb=3 \na*b\n\n'XXX'\n\n\n대신에 의미상 맞지 않는 것은 수행되지 않고 에러가 난다.\n\na='X'\nb='Y'\na+b\n\n'XY'\n\n\n\na*b\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n- 나눗셈(/)연산\n\na='XX'\n\n\na/2\n\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n\n\n\n이런건 없다.."
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson1.html#인덱싱",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson1.html#인덱싱",
    "title": "Lesson 01: 파이썬의 자료형 I (int, float, bool, str)",
    "section": "인덱싱",
    "text": "인덱싱\n- str은 하나의 벡터 문자가 여러개 있는 형태라고 생각하면 된다.\n\na='guebin'\n\n\na\n\n'guebin'\n\n\n\n6개의 칸에 글씨가 하나씩 들어가 있음.\n\n- 대괄호 []안에 숫자를 넣는 방식으로 벡터의 원소를 호출할 수 있다. (주의: 인덱스가 0부터 시작함)\n\na[0] #첫번째원소\n\n'g'\n\n\n\na[1] #두번째원소 \n\n'u'\n\n\n마지막원소는 -1로 호출할 수도 있다.\n\na[-1]\n\n'n'\n\n\n마지막에서 2번째 원소는 -2로 호출가능하다.\n\na[-2]\n\n'i'\n\n\n- 요약하면 아래와 같은 방식으로 호출가능함.\n\n\n\ng\nu\ne\nb\ni\nn\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n0\n-5\n-4\n-3\n-2\n-1\n\n\n\n\na[4]\n\n'i'\n\n\n\na[-2]\n\n'i'\n\n\n\na[-4]\n\n'e'\n\n\n- :을 이용하여 여러개의 원소를 호출할 수 있음.\n\na='guebin'\n\n\na[0:3] # a[0],a[1],a[2],a[3]이 아니라 a[0],a[1],a[2]까지만 뽑힌다. 즉 마지막의 3은 호출되지 않는다. \n\n'gue'\n\n\n\na[1:3] # a[1], a[2] 만 호출 // start=1,  stop=3 \n\n'ue'\n\n\nindex=1부터 시작해서 마지막원소까지 호출하려면?\n\na[5] # guebin의 마지막원소 'n'이 출려 \n\n'n'\n\n\n\na[1:5] # 5는 포함되지 않으므로 틀림\n\n'uebi'\n\n\n\na[1:6] # 정답\n\n'uebin'\n\n\n안 헷갈리는 방법은 없을까?\n\na[-1]\n\n'n'\n\n\n\na[1:-1] # 이것은 결국 (a[1:5]와 같은 것임) \n\n'uebi'\n\n\n해결책? 생략한다!!\n\na[1:]\n\n'uebin'\n\n\n- 생략의 응용1\n\na='k-pop' \na\n\n'k-pop'\n\n\n\na[2:5]\n\n'pop'\n\n\n\na[2:]\n\n'pop'\n\n\n- 생략의 응용2\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:2] # a[0],a[1]\n\n'k-'\n\n\n\na[:2] # a[0],a[1] \n\n'k-'\n\n\n- 생략의 응용3\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:5] # a[0],...,a[4]\n\n'k-pop'\n\n\n\na[:]\n\n'k-pop'"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson1.html#str-특수기능",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson1.html#str-특수기능",
    "title": "Lesson 01: 파이썬의 자료형 I (int, float, bool, str)",
    "section": "str 특수기능",
    "text": "str 특수기능\n- 파이썬의 변수는 단순히 정보를 담는 그릇이 아니다. 유용한 기능을 제공하는 경우가 있다.\n\na='ABCD' # a라는 변수는 'ABCD'라는 정보를 담는 그릇의 역할만 하지 않고, 특화된 어떠한 기능도 제공한다. \na\n\n'ABCD'\n\n\n\na.lower() # a.lower()를 쓰면 a의 모든 문자를 소문자로 바꾸는 기능을 제공, lower(a)라고 읽자!\n\n'abcd'\n\n\n여기에서 lower()는 문자열에 특화된 기능임. 따라서 당연히 아래는 불가능\n\na=3.14\na.lower() # lower(a)\n\nAttributeError: 'float' object has no attribute 'lower'\n\n\n- 자료형에 특화된 기능(=함수)을 확인하는 방법? a.+ tab 으로 목록 확인 가능\n\na='guebin'\n\n\na.upper?\n\n\nSignature: a.upper()\nDocstring: Return a copy of the string converted to uppercase.\nType:      builtin_function_or_method\n\n\n\n\n\na.upper() # upper(a) \n\n'GUEBIN'\n\n\n\na.capitalize() # capitalize(a) \n\n'Guebin'\n\n\n- 문자열에 대한 다른 내용들은 추후에 다루겠음.\n- 마음의눈: a.f() 형태를 읽는 팁 - a.f()는 f(a)로 생각하면 편리함. - a.f(2)는 f(a,2)로 생각하면 편리함. - 이런점에서 R %>% 연산자와 비슷하다고 생각할 수 있다. (약간 다르긴함)\n- 사실 .은 좀 더 다양한 상황에서 쓰일 수 있다. 변수이름.함수이름() 의 형태가 아니라 - 패지키이름.함수이름() - 패키지이름.변수이름 - 패키지이름.패키지이름.함수이름() - …\n와 같이 다양한 형태가 가능하다. 근본적인 공통점은 .을 기준으로 상위개념.하위개념 으로 이해하는 것이 좋다.\n0차원 vs 1차원\n- len함수 소개: 원소의 갯수를 알려주는 함수.\n(0차원) len 함수가 동작하지 않음.\n\na=3.14\n\n\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nb=True\n\n\nlen(b)\n\nTypeError: object of type 'bool' has no len()\n\n\n(1차원) len 함수가 잘 동작함.\n\na='3.14'\nlen(a)\n\n4\n\n\n\nb=[1,2,3]\n\n\nlen(b)\n\n3\n\n\nQuiz\n본인이름으로 str을 생성\n\n성만 출력\n이름만 출력\n\n(예시)\n\na='GuebinChoi'\n\n\na[:6]\n\n'Guebin'\n\n\n\na[6:]\n\n'Choi'"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#선언",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#선언",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "선언",
    "text": "선언\n- 리스트의 선언\n\na=[11,22]\na\n\n[11, 22]\n\n\n\ntype(a)\n\nlist\n\n\n- 비어있는 리스트의 선언\n\na=[11] # 방법1\na\n\n[11]\n\n\n\nlen(a)\n\n1\n\n\n\na=11\n\n\na=list() # 방법2\na\n\n[]"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#연산",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#연산",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "연산",
    "text": "연산\n- 더하기연산\n\na=[11,12]\nb=[12,13]\n\n\na\n\n[11, 12]\n\n\n\nb\n\n[12, 13]\n\n\n\na+b\n\n[11, 12, 12, 13]\n\n\n\n우리의 예상과 다른 결과가 나옴 \\(\\to\\) 파이썬은 R처럼 자체적으로 좋은 계산기능을 내장하고 있지 않음.\n\n- 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음.\n\na=[1,2,3]\nb=1\na+b\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n- 뺄셈은 정의되지 않음\n\na=[1,2]\nb=[1,2]\na-b\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n- 곱하기는 정의가능\n\na=[1,2]\n\n\n2*a # a+a \n\n[1, 2, 1, 2]\n\n\n- 나눗셈은 정의되지 않음\n\na=[1,2,1,2]\na/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서 뺄셈과 나눗셈이 원소의 삭제를 의미하는것은 아님\n\na=[1,2,3]\na-[3] # 이런건 없다\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n\na=[1,2,1,2,1,2]\na/3 # 이런건 없다\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도 있긴하지만, 우리는 산술적인 +, * 를 원하는 경우도 있다. 이럴 경우는 어떻게 할 수 있을까?\n(예제)\n\na=[1,2]\nb=[3,4]\n\na+b = [4,6] 이 되도록 하려면?\n(풀이1)\n\na[0]+b[0] # a의 첫번째 원소를 추출, b의 첫번째 원소를 추출, 둘을 더함 \n\n4\n\n\n\na[1]+b[1] # a의 두번째 원소를 추출, b의 두번째 원소를 추출, 둘을 더함 \n\n6\n\n\n\n[a[0]+b[0],a[1]+b[1]]\n\n[4, 6]\n\n\n풀이가 가능한 이유? a,b는 리스트이지만 a[0], a[1], b[0], b[1] 은 각각 인트형임. 인트형은 + 연산이 가능했음.\n(풀이2)\nnumpy 패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리)\n\n이러한 벡터연산은 누구나 필요로 하는 연산임.\n내가 아니더라도 누군가가 프로그램화 해놓았을 것임.\n그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도 있음. (패키지를 배포한다고 표현)\n그 패키지를 우리는 가져와서 설치한뒤 사용하기만 하면된다.\n\n패키지를 설치하는 방법 (코랩은 이미 설치되어 있음)\n\n!pip install numpy # 최신버전을 설치함\n!conda install -c conda-forge numpy -y # 안전한 버전을 설치함\n\n설치된 패키지를 사용하는 방법\n\nimport numpy 한뒤에 numpy.??로 기능을 사용\nimport numpy as np 한뒤에 np.??로 기능을 사용\n\n\nimport numpy ## 설치한패키지를 쓰겠다고 선언함 \n\n\na=[1,2]\nb=[3,4]\n\n\naa=numpy.array(a) \nbb=numpy.array(b)\n# aa,bb는 리스트가 아니라 넘파이 어레이,\n# numpy.array()는 numpy패키지에서 제공하는 array함수를 쓰겠다는 의미. \n\n\naa+bb\n\narray([4, 6])\n\n\n이런것도 가능\n\n2*aa\n\narray([2, 4])\n\n\n\n2*aa+1\n\narray([3, 5])\n\n\n\n2*aa+1+bb\n\narray([6, 9])\n\n\n(풀이3)\n\nimport numpy as np ## 설치한 numpy라는 패키지를 쓰겠음. 그런데 numpy말고 np라는 이름으로 쓰겠음\n\n\nnp.array(a)\n\narray([1, 2])\n\n\n\na=[1,2]\nb=[3,4]\nnp.array(a)+np.array(b)\n\narray([4, 6])"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#인덱싱",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#인덱싱",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "인덱싱",
    "text": "인덱싱\n- str형과 동일한 방식\n\na=[11,22,33,44,55] # 0 -4 -3 -2 -1\n\n\na[-2:] # 끝의 2개의 원소를 뽑음 \n\n[44, 55]"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#list-고급",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#list-고급",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "list 고급",
    "text": "list 고급\n\n리스트는 컨테이너형 객체이다.\n- 리스트의 원소는 int, float 따위만 가능한 것이 아니다. (리스트는 컨테이너형 객체이므로)\n\nlst = [1,3.14,True,'a',[1,2], \n       (1,2),{'name':'iu','age':27},{1,2,3}]\n\n\nlst\n\n[1, 3.14, True, 'a', [1, 2], (1, 2), {'name': 'iu', 'age': 27}, {1, 2, 3}]\n\n\n각 원소의 타입을 알아보자.\n\ntype(lst[0])\n\nint\n\n\n\ntype(lst[1])\n\nfloat\n\n\n\ntype(lst[2])\n\nbool\n\n\n\ntype(lst[3])\n\nstr\n\n\n\ntype(lst[4])\n\nlist\n\n\n\ntype(lst[5])\n\ntuple\n\n\n\ntype(lst[6])\n\ndict\n\n\n\ntype(lst[7])\n\nset\n\n\n- str은 컨테이너형이 아니다.\n\n'abcd'[2]\n\n'c'\n\n\n\nstr의 모든 원소는 문자임\n\n\n\n리스트는 가변형 객체이다.\n\n리스트의 원소 수정\n- 리스트의 원소를 수정할 수 있다. (리스트는 가변객체이므로)\n\na=[11,22,33]\na\n\n[11, 22, 33]\n\n\n\na[0]\n\n11\n\n\n\na[0]=111\n\n\na\n\n[111, 22, 33]\n\n\n- 원소수정은 당연한 기능같은데 이것이 불가능한 경우도 있다.\n(가능한경우)\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\n\na\n\n['G', 'u', 'e', 'b', 'i', 'n']\n\n\n(불가능한경우)\n\na='guebin'\na\n\n'guebin'\n\n\n\ntype(a)\n\nstr\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\nTypeError: 'str' object does not support item assignment\n\n\n\n\n리스트의 원소 삭제\n(예제)\n아래와 같이 문자로 된 리스트를 선언하자.\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n사실 더 쉽게 선언할 수 있음\n\na= 'guebin' # string으로 a를 선언\na= list(a) # list(a)를 통하여 str을 ㅣist로 변환 -> 그 결과를 a에 다시 저장\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n첫번째 원소를 삭제하고 싶다면?\n\ndel a[0]\n\n\na\n\n['u', 'e', 'b', 'i', 'n']\n\n\n이 상태에서 다시 첫번쨰 원소를 삭제한다면?\n\ndel a[0]\n\n\na\n\n['e', 'b', 'i', 'n']\n\n\n\n\n리스트의 원소 추가\n(예제) 비어있는 리스트를 만들고 원소 0,1,2를 차례로 추가하여 보자.\n(풀이1)\n\na=[]\na\n\n[]\n\n\n\na= a + [0] \na\n\n[0]\n\n\n\na= a + [1]\na\n\n[0, 1]\n\n\n\na= a + [2]\na\n\n[0, 1, 2]\n\n\n(풀이2)\n\na=[]\na\n\n[]\n\n\n\na += [0] \na\n\n[0]\n\n\n\na += [1]\na\n\n[0, 1]\n\n\n\na += [2]\na\n\n[0, 1, 2]\n\n\n\n암기법: 중복되는 변수를 지우고 연산자의 순서를 바꾼다.\n\n(풀이3) 리스트 특화기능(=메소드)를 이용\n\na=[]\na\n\n[]\n\n\n\na.append(0)\na\n\n[0]\n\n\n\na.append(1)\na\n\n[0, 1]\n\n\n\na.append(2)\na\n\n[0, 1, 2]\n\n\n- a+[4]와 a.append(4)의 차이점은?\n(관찰1)\n\na=[1,2,3]\na+[4] ## 리스트 a와 리스트 [4]의 연산결과를 알려줘 \n\n[1, 2, 3, 4]\n\n\n\na ## a는 그대로임. 변화없음 \n\n[1, 2, 3]\n\n\n(관찰2)\n\na=[1,2,3]\na.append(4)\n\n\na ## a자체가 변화함 \n\n[1, 2, 3, 4]\n\n\n비슷해보이지만 굉장히 미묘한 차이가 있음\na.append(4): a에 4를 append하라 \\(\\to\\) a가 변함\na+[4]: a와 4를 연산하라"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#list-특수기능",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#list-특수기능",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "list 특수기능",
    "text": "list 특수기능\n(append)\n\na=[1,2,3,4]\na.append?\n\n\nSignature: a.append(object, /)\nDocstring: Append object to the end of the list.\nType:      builtin_function_or_method\n\n\n\n\n\na.append(5)\na\n\n[1, 2, 3, 4, 5]\n\n\n(clear)\n\na=[1,2,3,4]\na.clear?\n\n\nSignature: a.clear()\nDocstring: Remove all items from list.\nType:      builtin_function_or_method\n\n\n\n\n\na.clear()\na\n\n[]\n\n\n(copy)\n\na=[1,2,3,4]\na.copy?\n\n\nSignature: a.copy()\nDocstring: Return a shallow copy of the list.\nType:      builtin_function_or_method\n\n\n\n\n\nb=a.copy()\nb\n\n[1, 2, 3, 4]\n\n\n(count)\n\na=[1,1,2,3,3,4,4,4]\na.count?\n\n\nSignature: a.count(value, /)\nDocstring: Return number of occurrences of value.\nType:      builtin_function_or_method\n\n\n\n\n\na.count(1)\n\n2\n\n\n\na.count(2)\n\n1\n\n\n\na.count(3)\n\n2\n\n\n\na.count(4)\n\n3\n\n\n(extend)\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.extend(b)\na\n\n[1, 2, 3, 4, -1, -2, -3, -4]\n\n\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.append(b)\n\n\na\n\n[1, 2, 3, 4, [-1, -2, -3, -4]]\n\n\n(index)\n\na=[11,22,'a',True, 22,'a']\na.index?\n\n\nSignature: a.index(value, start=0, stop=9223372036854775807, /)\nDocstring:\nReturn first index of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\n\na.index(11)\n\n0\n\n\n\na.index(22)\n\n1\n\n\n\na.index('a')\n\n2\n\n\n\na.index(True)\n\n3\n\n\n(insert)\n\na=[1,2,3]\na.insert?\n\n\nSignature: a.insert(index, object, /)\nDocstring: Insert object before index.\nType:      builtin_function_or_method\n\n\n\n\n\na.insert(1,88) \na\n\n[1, 88, 2, 3]\n\n\n(pop)\n\na=['a',1,2,'d']\na.pop?\n\n\nSignature: a.pop(index=-1, /)\nDocstring:\nRemove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.\nType:      builtin_function_or_method\n\n\n\n\n\na.pop() # index=-1 이므로 마지막원소가 나타남\n\n'd'\n\n\n\na # a는 마지막 원소가 사라진 상태\n\n['a', 1, 2]\n\n\n\na.pop(0) # index=0 이므로 첫번쨰 원소가 나타남\n\n'a'\n\n\n\na # a에는 첫번째 원소가 사라진 상태\n\n[1, 2]\n\n\n(remove)\n\na=['a',2,3,'d']\na.remove?\n\n\nSignature: a.remove(value, /)\nDocstring:\nRemove first occurrence of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\n\na.remove('d')\n\n\na\n\n['a', 2, 3]\n\n\n\na.remove('a')\n\n\na\n\n[2, 3]\n\n\n(reverse)\n\na=[1,2,3,4]\na.reverse?\n\n\nSignature: a.reverse()\nDocstring: Reverse *IN PLACE*.\nType:      builtin_function_or_method\n\n\n\n\n\na.reverse()\na\n\n[4, 3, 2, 1]\n\n\n(sort)\n\na=[1,3,2,4]\na.sort?\n\n\n\nSignature: a.sort(*, key=None, reverse=False)\nDocstring:\nSort the list in ascending order and return None.\nThe sort is in-place (i.e. the list itself is modified) and stable (i.e. the\norder of two equal elements is maintained).\nIf a key function is given, apply it once to each list item and sort them,\nascending or descending, according to their function values.\nThe reverse flag can be set to sort in descending order.\nType:      builtin_function_or_method\n\n\n\n\n\na.sort()\na\n\n[1, 2, 3, 4]\n\n\n(다른예제들)\n\na=list('guebin')\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na.sort()\na\n\n['b', 'e', 'g', 'i', 'n', 'u']\n\n\n\na.sort(reverse=True)\na\n\n['u', 'n', 'i', 'g', 'e', 'b']"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#중첩-리스트",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#중첩-리스트",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "중첩 리스트",
    "text": "중첩 리스트\n\nA=[[1,2,3],[4,5,6],[7,8,9]]\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\nA[0][1]\n\n8\n\n\n- A는 아래와 같은 매트릭스로 이해할 수 있다\n$\n\\[\\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{bmatrix}\\]\n$\n- A에서 (2,1)의 원소를 뽑고싶다 = 4를 뽑고싶다\n\nA[1,0]\n\nTypeError: list indices must be integers or slices, not tuple\n\n\n\n실패\n\n\nA[1][0]\n\n4\n\n\n\n성공\n\n- 성공의 이유를 분석해보자.\n\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\nA[1]\n\n[4, 5, 6]\n\n\n\nA[1][0]\n\n4\n\n\n- 매트릭스는 아니지만 매트릭스 같음! - 1차원 배열을 다차원 배열로 확장할 수 있는 기본 아이디어를 제공함"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#리스트-컴프리헨션starstarstar",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#리스트-컴프리헨션starstarstar",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "리스트 컴프리헨션(\\(\\star\\star\\star\\))",
    "text": "리스트 컴프리헨션(\\(\\star\\star\\star\\))\n- 리스트 컴프리헨션을 이해하기 전에 for문에 대하여 알아보자.\n[예비학습] for문 벼락치기\n프로그램안에서 반복해서 무엇인가를 하고싶다 \\(\\to\\) for\n\nfor i in [0,1,2,3]: ## 반복실행계획\n    print(i) ## 반복실행할내용, 탭을이용하여 들여쓰기해야한다. \n\n0\n1\n2\n3\n\n\n(예제) 1,2,3,4의 합을 for문을 이용하여 구해보자.\n\n_sum = 0 \nfor i in [1,2,3,4]:\n    _sum = _sum + i\n\n\n_sum = 0\ni=1 \n_sum = _sum + i ## 1 <= 0+1\ni=2\n_sum = _sum + i ## 3 <= 1+2 \ni=3 \n_sum = _sum + i ## 6 <= 3+3\ni=4\n_sum = _sum + i ## 10 <= 6+4 \n\n\n_sum\n\n10\n\n\n예비학습끝\n- 예제: \\(2^0, 2^1, 2^2, 2^3\\)를 원소로 가지는 리스트를 생성하라.\n(풀이1) 직접입력\n\nx= [2**0, 2**1, 2**2, 2**3] \nx\n\n[1, 2, 4, 8]\n\n\n(풀이2) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x.append(2**i) \n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이3) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x = x+[2**i]\n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이4) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x += [2**i]\n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이5) 리스트컴프리헨션을 이용한 풀이\n\nx= [2**i for i in [0,1,2,3]] \nx\n\n[1, 2, 4, 8]\n\n\n- 리스트컴프리헨션의 문법 암기방법\n\n집합에서 조건제시법을 연상\n\\(\\{2^0,2^1,2^2,2^3\\}=\\{2^i: \\text{ for } i = 0,1,2,3 \\}\\)\n\n- 리스트컴프리헨션이란?\n\n리스트를 매우 효율적으로 만드는 테크닉\nfor문에 비하여 가지고 있는 장점: (1) 코드가 간결하다 (2) 빠르다\n\n- 예제: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['SSSS','PPPP','AAAA','MMMM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n(풀이)\n\n[i*4 for i in 'SPAM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['X1','X2','X3','Y1','Y2','Y3']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n(풀이)\n\n[i+j for i in 'XY' for j in '123']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 통계1,…,통계5,수학1,…,수학5를 만들어라.\n(풀이)\n\n[x+y for x in ['stat','math'] for y in '12345'] \n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n\n\\(\\{xy : x \\in \\{{\\tt stat},{\\tt math}\\}, y \\in \\{1,2,3,4,5\\} \\}\\)\n\n(다른풀이) 참고로 for문을 쓰면 좀 복잡해진다.\n\n_lst = [] \nfor x in ['stat','math']: \n    for y in '12345': \n        _lst = _lst + [x+y] \n\n\n_lst \n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n- 예제: ’jbnu’를 이용하여 아래와 같은 리스트를 만들어라. (리스트컴프리헨션을 이용할것)\n\n['j','b','n','u']\n\n['j', 'b', 'n', 'u']\n\n\n(다른풀이) 아래와 같이 풀면 된다는것은 알고 있음\n\nlist('jbnu')\n\n['j', 'b', 'n', 'u']\n\n\n(풀이)\n\n[x for x in 'jbnu']\n\n['j', 'b', 'n', 'u']\n\n\n- 예제: x에는 무엇이 있을까?\n(경우1)\n\nx=1 \nlst = [] \nfor x in 'jbnu': \n    lst = lst + [x]\nlst    \n\n['j', 'b', 'n', 'u']\n\n\n\nx \n\n'u'\n\n\n(경우2)\n\nx=1 \nlst = [x for x in 'jbnu'] \nlst \n\n['j', 'b', 'n', 'u']\n\n\n\nx\n\n1\n\n\n\n진짜 미묘하게 다르죠?\n\n- 예제: [X1,X2,X3,…,X100]와 같은 리스트를 만들어보라.\n(풀이)\n\n['X'+str(i) for i in [1,2,3,4]] ## 이걸 4까지가 아니라 100까지 써야함\n\n['X1', 'X2', 'X3', 'X4']\n\n\n\n['X'+str(i) for i in 1:100]\n\nSyntaxError: invalid syntax (<ipython-input-432-4555f37f5468>, line 1)\n\n\n[예비학습]\n\nrange(0,10)\n\nrange(0, 10)\n\n\n\n이게뭐야?\n\n\n_tmp = range(0,10)\n_tmp?\n\n\nType:        range\nString form: range(0, 10)\nLength:      10\nDocstring:  \nrange(stop) -> range object\nrange(start, stop[, step]) -> range object\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\n\n\n\n\n\n우리가 아는 범위에서는 모르겠음.. 이런게 있나보다 하고 넘어가야 하겠음\n\n\nlist(range(0,10)) # 0을 포함, 10을 미포함 \n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n이게 중요한것임. range(0,10)를 리스트화시키면 [0,1,2,…,9] 와 같은 리스트를 얻을 수 있음.\n\n\nlist(range(10)) # 0은 생략가능\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(2,10)) # 2는 포함, 10은 미포함 \n\n[2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(1,10,2)) # 2는 포함, 10은 미포함 \n\n[1, 3, 5, 7, 9]\n\n\n예비학습 끝\n\n['X'+str(i) for i in list(range(1,13))] ## 출력결과가 너무 기니까 101대신에 13으로 변경 \n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n\n(아래와 같은 풀이도 가능)\n\n['X'+str(i) for i in range(1,13)] ## 출력결과가 너무 기니까 101대신에 13으로 변경 \n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n\n(딴생각) 생각해보니까 for문 뒤에 올 수 있는것이 무엇인지 생각하는것도 흥미로울듯\n\nfor i in '1234':\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in [1,2,3,4]:\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in (1,2,3,4): # (1,2,3,4)는 튜플\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in {1,2,3,4}: # {1,2,3,4}는 set \n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in {'name':'iu','age':28}: #{'name':'iu','age':28} 는 딕셔너리\n    print(i)\n\nname\nage\n\n\n\nfor i in range(1,5): \n    print(i)\n\n1\n2\n3\n4"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#리스트-vs-튜플",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#리스트-vs-튜플",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "리스트 vs 튜플",
    "text": "리스트 vs 튜플\n- 컨테이너형타입이라는 점, 그리고 연산 및 인덱싱을 하는 방법은 리스트와 같음\n\n차이점1: [] 대신에 ()를 사용한다.\n차이점2: 불변형이다. (원소의 값을 바꿀 수 없음)\n차이점3: 하나의 원소를 선언할 때는 (1,)와 같이 해야 한다.\n차이점4: 의미가 명확할때는 튜플의 ()를 생략가능하다.\n\n- 컨테이너형이라는 것이 무슨의미?\n\na=(4,6,'pencil', 3.2+4.6j, [3,4]) \n\n\ntype(a[2])\n\nstr\n\n\n\ntype(a[3])\n\ncomplex\n\n\n- 불변형이라는 것은 무슨의미?\n\na[2] = 'Pencil'\n\nTypeError: 'tuple' object does not support item assignment\n\n\n참고로 a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀐다.\n\na=[4,6,'pencil', 3.2+4.6j, [3,4]]\n\n\na[2]\n\n'pencil'\n\n\n\na[2]='Pencil'\n\n\na\n\n[4, 6, 'Pencil', (3.2+4.6j), [3, 4]]\n\n\n- 하나의 원소로 이루어진 튜플을 만들때는 쉼표를 붙여야 함.\n\n[1]+[2,3,4]\n\n[1, 2, 3, 4]\n\n\n\n(1,)+(2,3,4)\n\n(1, 2, 3, 4)\n\n\n- 리스트와 중요한 차이점! 의미가 명확할때 튜플의 괄호는 생략가능하다. (이게 중요합니다)\n\na=1,2\na\n\n(1, 2)\n\n\n의미가 명확할때 생략해야함\n\n1,2 + 3,4,5 \n\n(1, 5, 4, 5)\n\n\n\n(1,2) + (3,4,5) \n\n(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#선언-1",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#선언-1",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "선언",
    "text": "선언\n- 소괄호를 이용\n\na=(1,2,3)\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 생략가능하다는 점이 포인트\n\na=1,2,3\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 원소가 하나인 튜플을 만들고 싶다면?\n\na=(1,)\na\n\n(1,)"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#연산-1",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#연산-1",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "연산",
    "text": "연산\n- 리스트와 동일\n\n(1,2)+(3,4,5)\n\n(1, 2, 3, 4, 5)\n\n\n\n(1,2)*2\n\n(1, 2, 1, 2)"
  },
  {
    "objectID": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#인덱싱-1",
    "href": "posts/Day1/01_PythonBasicSyntax/2023-01-30-Lesson2.html#인덱싱-1",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "인덱싱",
    "text": "인덱싱\n- 리스트와 동일\n\na=(1,2,3,-4,-5)\na\n\n(1, 2, 3, -4, -5)\n\n\n\na[-1]\n\n-5\n\n\n\na[-3:]\n\n(3, -4, -5)"
  },
  {
    "objectID": "posts/Day1/04_DataManipulation/2023-01-30-Lesson9(prob).html",
    "href": "posts/Day1/04_DataManipulation/2023-01-30-Lesson9(prob).html",
    "title": "Lesson 09: 데이터 조작 연습 (문제)",
    "section": "",
    "text": "imports\n아래코드를 이용하여 numpy 와 matplotlib을 import하라.\n\nimport numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n1. 코드구현 I\n주의: 문제에 조건이 있는 경우 조건을 준수할 것\n(1) a의 type을 bool로 바꾸어라.\n\na=1.0\n\n\n(2)-(6)\n아래의 문자열을 고려하자.\n\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n\n(2) 위 문자열에서 짝수번째 원소를 출력하는 코드를 작성하라.\n(3) 위 문자열에서 마지막 10개의 원소를 출력하는 코드를 작성하라.\n(4) 위 문자열을 뒤집은 문자열을 구하는 코드를 작성하라. 즉 아래를 출력하는 코드를 작성하라.\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n(5) 위 문자열에서 대문자의 수를 count하라.\nhint .isupper() 메소드를 이용할 것.\n\n'a'.isupper()\n\nFalse\n\n\n\n'A'.isupper()\n\nTrue\n\n\n\n'='.isupper()\n\nFalse\n\n\n\n'@'.isupper()\n\nFalse\n\n\n(6) 위 문자열에서 사용된 문자 및 특수문자의 종류는 모두 몇가지 인가?\n\nnote: 출제의도: set 자료형의 이해\n\nnote1: 문자열 ‘AAB @ab’ 에서 사용된 문자는 ‘A’, ‘B’, ’ ‘,’@‘, ’a’, ‘b’ 이므로 모두 6종류의 문자 및 특수문자가 사용되었다.\nnote2: ’ ‘,’+‘,’-‘,’.’, ‘/’, ‘=’, ‘@’, ‘1’, ‘a’, ‘A’ 등을 모두 다른 문자로 취급한다.\n\n(7) 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa'] <- a가 10개있음 \n(8) 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을 만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은 출력결과를 얻어라.\n(202143052,'guebin')\n(9) 아래와 같은 list가 있다고 하자.\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\ntest_lst와 리스트컴프리헨션을 이용하여 아래를 출력하는 코드를 구현하라.\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n(10) 다음은 학생들의 출석,레포트,중간고사,기말고사 점수를 입력으로 하여 학점을 계산하는 함수이다.\n\ndef grade(attendance, report, mid, final): \n    if attendance<70: \n        credit = 'F' \n    else: \n        total_score = attendance * 0.1 + report * 0.2 + mid * 0.3 + final * 0.4 \n        if total_score > 80: \n            credit = 'A+' \n        else:\n            credit = 'B0' \n    return credit \n\n아래는 학생들의 학번, 출석점수, 레포트, 중간고사, 기말고사 점수가 입력된 리스트이다.\n\ndata = [['202212345', [100,95,25,90]],\n        ['202212346', [60,90,95,95]],\n        ['202212347', [50,90,45,35]],\n        ['202212348', [90,90,50,75]],\n        ['202212349', [100,95,85,85]],\n        ['202212350', [90,90,100,95]],\n        ['202212351', [100,95,100,95]],\n        ['202212352', [95,85,80,60]],\n        ['202212353', [100,90,60,55]],\n        ['202212354', [100,85,70,95]],\n        ['202212355', [100,95,40,100]]]\n\n아래의 ???를 적절하게 완성하여 학생들의 학점을 계산하는 코드를 완성하라.\n[grade(???) for _, scores in data] \n(11) 길이가 0인 문자열을 선언하라.\n\n(12)-(15)\n(12) dir(plt)와 dir(np)를 각각 실행하라. 실행결과를 각각 a,b로 저장하라. a,b의 type은 무엇인가?\n(13) a의 원소와 b의 원소의 수를 각각 구하라.\n(14) a와 b의 공통원소의 수를 구하라.\n(15) a와 b의 원소를 합친 리스트를 만들어라. (공통원소는 중복하여 합치지 않는다)\n\n(16)-(18) 아래와 같은 dictionary가 있다.\n\ntest_dic = {'202212345': {'att':100,'rep':95,'mid':25,'fin':90},\n            '202212346': {'att':60,'rep':90,'mid':95,'fin':95},\n            '202212347': {'att':50,'rep':90,'mid':45,'fin':35},\n            '202212348': {'att':90,'rep':90,'mid':50,'fin':75},\n            '202212349': {'att':100,'rep':95,'mid':85,'fin':85},\n            '202212350': {'att':90,'rep':90,'mid':100,'fin':95},\n            '202212351': {'att':100,'rep':95,'mid':100,'fin':95},\n            '202212352': {'att':95,'rep':85,'mid':80,'fin':60},\n            '202212353': {'att':100,'rep':90,'mid':60,'fin':55},\n            '202212354': {'att':100,'rep':85,'mid':70,'fin':95},\n            '202212355': {'att':100,'rep':95,'mid':40,'fin':100}}\n\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(16) get 메소드를 이용하여 202212353에 해당하는 학생의 성적을 아래와 같이 리턴하라.\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n(17) 202212354의 레포트 점수를 리턴하라.\n(18) 학생들의 학번을 리턴하는 코드를 작성하라.\n\n(19) shape이 ()인 numpy이 array를 만들어라. (즉 차원이 0인 np.array를 만들어라)\n(20) shape이 (2,2)인 단위행렬을 만들어라.\n(21) a의 모든 원소에 1을 더하는 코드를 작성하라.\na=[1,3,2,5,-3,3,8,2,3,1] \n(22) 아래와 같은 수열을 생성하라.\n1,3,6,10,15,21,28,36,45, ... , 378, 406, 435\nhint: 이 수열에서 \\(a_n-a_{n-1}=n, ~n\\geq 2\\) 이다. 즉 3-1=2, 6-3=3, 10-6=4, …\n(23) 아래와 같은 수열을 생생성하라.\n0,1,2,3,4,5,...,99 \n위의 수열에서 1,4,7,10,13,… 번째의 원소를 뽑아라. (첫번째 원소는 0이다)\n(24) numpy를 이용하여 아래의 역행렬을 구하라. \\[\\begin{bmatrix}\n1&  0 \\\\\n0&  3\n\\end{bmatrix}\\]\n\n(25)-(30)\na,b가 아래와 같이 주어졌다고 하자.\n\na=[1]*10 \nb=[2]*10 \n\n(25) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n(26) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n(27) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(28) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(29) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(30) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(31) 아래와 같은 배열이 있다고 하자.\n\na=np.array([1,2,3,4,5])\nb=np.array([3,2,1,1,2])\n\nnumpy의 @ 연산자를 이용하여 \\(\\sum_{i=1}^{5}a_ib_i\\)를 계산하라.\n(32) 아래와 같은 배열을 생성하라.\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\sum_{i=1}^{100}x_i^2\\)을 계산하라.\n(33) 아래와 같은 배열을 생성하라.\na=np.array([1/100]*100)\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\frac{1}{n}\\sum_{i=1}^{n}x_i\\)를 계산하라.\n(34) 표준정규분포에서 100개의 난수를 생성하라.\n(35) 아래와 동일한 코드를 np.random.rand()로 구현하라.\nnp.random.uniform(low=2,high=4,size=(5,)) \n(36) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \nnp.where를 이용하여 a의 모든 음수를 0으로 바꾸는 코드를 작성하라.\n(37) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \n위 배열의 최소값이 위치한 index를 return하라.\n(38) 아래와 같은 배열을 선언하라.\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n차원의 수를 유지하면서 1열을 추출하는 코드를 작성하라. 즉 결과가 아래와 같이 나오도록 하라.\narray([[0],\n       [4],\n       [8]])\n(39)-(40)\n(39) 자신의 학번으로 random seed 를 설정하라. [20,25)의 범위에서 100개의 정수를 랜덤으로 생성해 (10,10) shape의 배열을 만들어라.\n(40) 39의 결과에서 20,21,22 는 각각 몇개씩 있는가?\n\n\n2. 코드구현 II\n\n(1)-(6) 아래의 코드를 실해하여 test_dic를 생성하라.\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ndel(att);del(rep);del(mid);del(fin);del(key)\n\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(1) test_dic에서 출석점수가 70이상(70>=)인 학생들의 학번을 출력하는 코드를 작성하라.\n(2) test_dic에서 출석점수가 70미만(<70)인 학생들의 수를 구하라.\n(3) test_dic에서 출석점수가 70이상(70>=)인 학생들의 중간고사 점수의 평균을 계산하라.\n(4) test_dic에서 중간고사 점수를 출력하는 코드를 작성하라.\n(5) test_dic에서 중간고사 점수의 표준편차와 레포트점수의 표준편차를 구하여라. 어떤것이 더 큰가?\n(6) test_dic에서 중간고사 점수가 가장 높은 사람의 학번을 출력하라.\n주의: att,rep,mid,fin,key를 실행하여 소멸시키지 않고 그대로 이용하거나 np.random.choice()를 이용하여 재생성한 뒤 계산할 하지 말 것.\n\n예를들면 (5)의 경우 np.std(mid), np.std(rep) 와 같은 식으로 구현하지 말 것.\n\n\n(7) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번의 시행하였을 경우 73번 이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(8) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번 시행하였을 경우 10번이하로 실패하거나 90번이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(9) 아래와 같은 행렬을 선언하자.\n\nA=np.arange(2*1).reshape(2,1)\nB=np.arange(2*2).reshape(2,2)\nC=np.arange(2*3).reshape(2,3)\nD=np.arange(3*3).reshape(3,3)\nE=np.arange(3*2).reshape(3,2)\nF=np.arange(3*1).reshape(3,1)\n\n아래의 블락매트릭스를 만들어라.\n\\(\\begin{bmatrix} a_{11} & b_{11} & b_{12} & c_{11} & c_{12} & c_{13} \\\\ a_{21} & b_{21} & b_{22} & c_{21} & c_{22} & c_{23} \\\\ d_{11} & d_{12} & d_{13} & e_{11} & e_{12} & f_{11} \\\\ d_{21} & d_{22} & d_{23} & e_{21} & e_{22} & f_{21} \\\\ d_{31} & d_{32} & d_{33} & e_{31} & e_{32} & f_{31} \\end{bmatrix}\\)\n여기에서 \\(a_{ij}\\)는 매트릭스 \\({\\bf A}\\)의 원소이다.\n(10) 표준정규분포에 10000개의 난수를 아래와 같이 생성하라.\n\nx=np.random.randn(10000)\ny=np.random.randn(10000)\n\n\\((i,j)\\) 번째 원소가 \\((x_i-y_j)^2\\)인 (10000,10000) 매트릭스를 만들어라.\n\n(11)-(16)\n아래와 같은 매트릭스를 생성하라.\n\nnp.random.seed(43052)\na=np.random.randn(10000).reshape(100,100)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825, ..., -0.18506968,\n         1.05538764,  1.18701443],\n       [-0.25027283, -1.58045215,  0.1124153 , ...,  1.0321894 ,\n         0.40438012, -0.13491595],\n       [-0.76763724, -0.64294232, -0.24782396, ..., -0.01530161,\n         0.89125897, -0.82683395],\n       ...,\n       [-1.41379028,  0.79611333, -0.71011837, ..., -0.9860352 ,\n         1.30755244,  2.18677233],\n       [ 1.33968105, -0.78457449, -0.10405858, ..., -0.71110186,\n         0.99841286,  2.34371635],\n       [-0.66422032, -0.07550233,  0.7405869 , ...,  1.03232398,\n        -0.18988252, -0.03578389]])\n\n\n(11) 각 행의 합을 구하라. 즉 1행의 합, 2행의 합, … 100행의 합을 계산하라.\n\n1행의합 = 0.38342049 + 1.0841745 + … + 1.18701443\n\n(12) (11)의 결과로 나온 배열의 표준편차를 구하라.\n(13) 각 열의 평균을 구하라. 즉 1열의 평균, 2열의 평균, … , 100열의 평균을 계산하라.\n(14) (13)의 결과로 나온 배열의 표준편차를 구하라.\n(15) a의 원소중 a>0 을 만족하는 원소의 평균을 구하여라.\n(16) a의 원소중 a>3을 만족하는 원소의 수를 count하라.\n\n(17)-(18)\n아래와 같은 배열 a를 고려하자.\n\nnp.random.seed(43052)\na=np.random.binomial(1,0.2,size=(10000,))\na\n\narray([1, 0, 1, ..., 1, 1, 0])\n\n\n(17) 0에서 1로 바뀌는 부분을 count하라.\n(18) 1에서 0으로 바뀌는 부분을 count하라.\n[예시] 아래의 배열에서 0에서 1로 부분은 모두 세 군데이고, 1에서 0으로 바뀌는 부분은 모두 두 군데 이다.\n0 0 0 1 0 1 0 0 0 1 1 1 \n\n(19)-(25)\n(19) \\(i=1,2,\\dots,1000\\)에 대하여 아래를 각각 구하라.\n\\[x_i= \\cos(t_i)+\\cos(3t_i)+\\cos(5t_i)\\]\n\\[y_i= \\sin(t_i)+\\sin(4t_i)\\]\n여기에서 \\(t_i=\\frac{2\\pi i }{1000}\\) 이다.\n(20) \\((x_i,y_i)\\)를 그려라.\n\n# 시각화예시\n\n\n\n\n(21) 아래와 같은 변환을 통하여 \\((w_i,z_i)\\)를 얻어라.\n\\[w_i= \\frac{1}{\\sqrt{2}}x_i - \\frac{1}{\\sqrt{2}}y_i\\]\n\\[z_i= \\frac{1}{\\sqrt{2}}x_i + \\frac{1}{\\sqrt{2}}y_i\\]\n\\((w_i,z_i)\\)를 시각화 하라.\n\n# 시각화예시\n\n\n\n\n(22) 아래와 같은 매트릭스를 만들어라.\n\\[{\\bf A}=\\begin{bmatrix}\nx_1 & y_1 \\\\\nx_2 & y_2 \\\\\n\\dots & \\dots \\\\\nx_n & y_n\n\\end{bmatrix}\\]\n(23) \\({\\bf A} {\\bf B}\\)의 첫번째 열과 두번째 열을 시각화한 결과가 \\((w_i,z_i)\\)과 동일하도록 적당한 (2,2) 매트릭스 \\({\\bf B}\\)를 만들어라.\n\n# 시각화예시\n\n\n\n\n(24) \\({\\bf A}{\\bf B}^2\\)의 첫번째 열과 두번째 열을 시각화 하라.\n\n# 시각화예시\n\n\n\n\n(25) \\(n=3,4,5,6,\\dots\\) 에 대하여 \\({\\bf A}{\\bf B}^n\\)을 반복적으로 그려보라. \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가? \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가?"
  },
  {
    "objectID": "posts/Day1/04_DataManipulation/2023-01-30-Lesson9(sol).html",
    "href": "posts/Day1/04_DataManipulation/2023-01-30-Lesson9(sol).html",
    "title": "Lesson 09: 데이터 조작 연습 (풀이)",
    "section": "",
    "text": "imports\n아래코드를 이용하여 numpy 와 matplotlib을 import하라.\n\nimport numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n1. 코드구현 I\n주의: 문제에 조건이 있는 경우 조건을 준수할 것\n(1) a의 type을 bool로 바꾸어라.\n\na=1.0\n\n(풀이)\n\nbool(a)\n\nTrue\n\n\n\nnote: 출제의도: 자료형의 변환\n\n\n(2)-(6)\n아래의 문자열을 고려하자.\n\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n\n(2) 위 문자열에서 짝수번째 원소를 출력하는 코드를 작성하라.\n(풀이)\n\ntest_arr[1::2]\n\n's-s AA3zCy2AABwAQAlUkHfY7bmINTKTo/WSGlnflDY7d4Ze1J4WjhFvQMxEEfhlXQkPpw0d3b7OJMylXC+A3XiBxXnhpAscL86jNQddFSV/XtFoosc19530w8eFbzUlQKrX8yNvYb6wP0wr/nZA4ZnP8ZmMuyDc8Zi8+wr+namkns10QalqSbNRiwfMQ=shcnmlpo.oa'\n\n\n\nnote: 출제의도: 인덱싱, 스트라이딩\n\n(3) 위 문자열에서 마지막 10개의 원소를 출력하는 코드를 작성하라.\n(풀이)\n\ntest_arr[-10:]\n\n'ptop.local'\n\n\n\nnote: 출제의도: -인덱싱\n\n(4) 위 문자열을 뒤집은 문자열을 구하는 코드를 작성하라. 즉 아래를 출력하는 코드를 작성하라.\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n(풀이)\n\ntest_arr[::-1]\n\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n\n\n\nnote: 출제의도: -1 스트라이딩\n\n(5) 위 문자열에서 대문자의 수를 count하라.\n(풀이)\n\nsum([s.isupper() for s in test_arr])\n\n155\n\n\n\nnote: 출제의도: 리스트컴프리헨션, bool자료형의 sum\n\nhint .isupper() 메소드를 이용할 것.\n\n'a'.isupper()\n\nFalse\n\n\n\n'A'.isupper()\n\nTrue\n\n\n\n'='.isupper()\n\nFalse\n\n\n\n'@'.isupper()\n\nFalse\n\n\n(6) 위 문자열에서 사용된 문자 및 특수문자의 종류는 모두 몇가지 인가?\n(풀이)\n\nlen(set(test_arr))\n\n69\n\n\n\nnote: 출제의도: set 자료형의 이해\n\nnote1: 문자열 ‘AAB @ab’ 에서 사용된 문자는 ‘A’, ‘B’, ’ ‘,’@‘, ’a’, ‘b’ 이므로 모두 6종류의 문자 및 특수문자가 사용되었다.\nnote2: ’ ‘,’+‘,’-‘,’.’, ‘/’, ‘=’, ‘@’, ‘1’, ‘a’, ‘A’ 등을 모두 다른 문자로 취급한다.\n\n(7) 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa'] <- a가 10개있음 \n(풀이)\n\n['a'*i for i in range(1,11)]\n\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa']\n\n\n\nnote: 출제의도: 문자열의 * 연산, 리스트컴프리헨션\n\n(8) 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을 만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은 출력결과를 얻어라.\n(202143052,'guebin')\n(풀이)\n\na=(202143052,)\nb=('guebin',)\na+b\n\n(202143052, 'guebin')\n\n\n\nnote: 출제의도: 튜플의 + 연산, 길이가 1인 튜플\n\n(9) 아래와 같은 list가 있다고 하자.\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\ntest_lst와 리스트컴프리헨션을 이용하여 아래를 출력하는 코드를 구현하라.\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n(풀이)\n\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\n[i*j for i,j in test_lst]\n\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n\n\n\nnote: 출제의도: 스트링의 + 연산, 리스트 컴프리헨션\n\n(10) 다음은 학생들의 출석,레포트,중간고사,기말고사 점수를 입력으로 하여 학점을 계산하는 함수이다.\n\ndef grade(attendance, report, mid, final): \n    if attendance<70: \n        credit = 'F' \n    else: \n        total_score = attendance * 0.1 + report * 0.2 + mid * 0.3 + final * 0.4 \n        if total_score > 80: \n            credit = 'A+' \n        else:\n            credit = 'B0' \n    return credit \n\n아래는 학생들의 학번, 출석점수, 레포트, 중간고사, 기말고사 점수가 입력된 리스트이다.\n\ndata = [['202212345', [100,95,25,90]],\n        ['202212346', [60,90,95,95]],\n        ['202212347', [50,90,45,35]],\n        ['202212348', [90,90,50,75]],\n        ['202212349', [100,95,85,85]],\n        ['202212350', [90,90,100,95]],\n        ['202212351', [100,95,100,95]],\n        ['202212352', [95,85,80,60]],\n        ['202212353', [100,90,60,55]],\n        ['202212354', [100,85,70,95]],\n        ['202212355', [100,95,40,100]]]\n\n아래의 ???를 적절하게 완성하여 학생들의 학점을 계산하는 코드를 완성하라.\n[grade(???) for _, scores in data] \n(풀이)\n\n[grade(*scores) for _, scores in data] \n\n['B0', 'F', 'F', 'B0', 'A+', 'A+', 'A+', 'B0', 'B0', 'A+', 'A+']\n\n\n\nnote: 출제의도: dummy variable _, 언패킹연산자 *, for문과 튜플언패킹, 리스트컴프리헨션\n\n(11) 길이가 0인 문자열을 선언하라.\n(풀이)\n\nlen('')\n\n0\n\n\n\nnote: 출제의도: 길이가 0인 문자열\n\n\n(12)-(15)\n(12) dir(plt)와 dir(np)를 각각 실행하라. 실행결과를 각각 a,b로 저장하라. a,b의 type은 무엇인가?\n(풀이)\n\na=dir(plt)\nb=dir(np)\ntype(a),type(b)\n\n(list, list)\n\n\n\nnote: 출제의도: tpye사용법\n\n(13) a의 원소와 b의 원소의 수를 각각 구하라.\n(풀이)\n\nlen(a),len(b)\n\n(254, 611)\n\n\n\nnote: 출제의도: len의 사용법 및 응용\n\n(14) a와 b의 공통원소의 수를 구하라.\n(풀이)\n\nlen(set(a)&set(b))\n\n9\n\n\n\nnote: 출제의도: set에서 & 연산자 이용\n\n(15) a와 b의 원소를 합친 리스트를 만들어라. (공통원소는 중복하여 합치지 않는다)\n(풀이)\n\nlst = list(set(a)|set(b))\n\n\nnote: 출제의도: set에서 | 연산자 이용\n\n\n(16)-(18) 아래와 같은 dictionary가 있다.\n\ntest_dic = {'202212345': {'att':100,'rep':95,'mid':25,'fin':90},\n            '202212346': {'att':60,'rep':90,'mid':95,'fin':95},\n            '202212347': {'att':50,'rep':90,'mid':45,'fin':35},\n            '202212348': {'att':90,'rep':90,'mid':50,'fin':75},\n            '202212349': {'att':100,'rep':95,'mid':85,'fin':85},\n            '202212350': {'att':90,'rep':90,'mid':100,'fin':95},\n            '202212351': {'att':100,'rep':95,'mid':100,'fin':95},\n            '202212352': {'att':95,'rep':85,'mid':80,'fin':60},\n            '202212353': {'att':100,'rep':90,'mid':60,'fin':55},\n            '202212354': {'att':100,'rep':85,'mid':70,'fin':95},\n            '202212355': {'att':100,'rep':95,'mid':40,'fin':100}}\n\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(16) get 메소드를 이용하여 202212353에 해당하는 학생의 성적을 아래와 같이 리턴하라.\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n(풀이)\n\ntest_dic.get('202212353')\n\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n\n\n\nnote: 출제의도: 딕셔너리에서 get 메소드 이용\n\n(17) 202212354의 레포트 점수를 리턴하라.\n(풀이)\n\ntest_dic['202212354']['rep']\n\n85\n\n\n\nnote: 출제의도: 딕셔너리에서 key를 이용한 원소추출\n\n(18) 학생들의 학번을 리턴하는 코드를 작성하라.\n(풀이)\n\n[k for k in test_dic]\n\n['202212345',\n '202212346',\n '202212347',\n '202212348',\n '202212349',\n '202212350',\n '202212351',\n '202212352',\n '202212353',\n '202212354',\n '202212355']\n\n\n\nnote: 출제의도: 딕셔너리와 for문\n\n\n(19) shape이 ()인 numpy이 array를 만들어라. (즉 차원이 0인 np.array를 만들어라)\n(풀이)\n\nnp.array(3).shape\n\n()\n\n\n\nnote: 출제의도: 0차원인 numpy array\n\n(20) shape이 (2,2)인 단위행렬을 만들어라.\n(풀이)\n\nnp.array([[1,0],[0,1]])\n\narray([[1, 0],\n       [0, 1]])\n\n\n\nnote: 출제의도: 넘파이에서의 배열선언\n\n(21) a의 모든 원소에 1을 더하는 코드를 작성하라.\na=[1,3,2,5,-3,3,8,2,3,1] \n(풀이)\n\nnp.array([1,3,2,5,-3,3,8,2,3,1])+1\n\narray([ 2,  4,  3,  6, -2,  4,  9,  3,  4,  2])\n\n\n\nnote: 출제의도: 브로드캐스팅\n\n(22) 아래와 같은 수열을 생성하라.\n1,3,6,10,15,21,28,36,45, ... , 378, 406, 435\nhint: 이 수열에서 \\(a_n-a_{n-1}=n, ~n\\geq 2\\) 이다. 즉 3-1=2, 6-3=3, 10-6=4, …\n(풀이)\n\n435-406\n\n29\n\n\n\nnp.arange(1,30).cumsum()\n\narray([  1,   3,   6,  10,  15,  21,  28,  36,  45,  55,  66,  78,  91,\n       105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351,\n       378, 406, 435])\n\n\n\nnote: 출제의도: np.arange, cumsum\n\n(23) 아래와 같은 수열을 생생성하라.\n0,1,2,3,4,5,...,99 \n위의 수열에서 1,4,7,10,13,… 번째의 원소를 뽑아라. (첫번째 원소는 0이다)\n(풀이)\n\nnp.arange(100)[::3]\n\narray([ 0,  3,  6,  9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48,\n       51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99])\n\n\n\nnote: 출제의도: np.arange, 스트라이딩\n\n(24) numpy를 이용하여 아래의 역행렬을 구하라. \\[\\begin{bmatrix}\n1&  0 \\\\\n0&  3\n\\end{bmatrix}\\]\n(풀이)\n\nnp.linalg.inv(np.array([[1,0],[0,3]]))\n\narray([[1.        , 0.        ],\n       [0.        , 0.33333333]])\n\n\n\nnote: 출제의도: np.linalg.inv\n\n\n(25)-(30)\na,b가 아래와 같이 주어졌다고 하자.\n\na=[1]*10 \nb=[2]*10 \n\n(25) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n(풀이)\n\nnp.concatenate([a,b])\n\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n\n\n\nnote: 출제의도: np.concatenate\n\n(26) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n(풀이)\n\nnp.concatenate([np.array(a).reshape(-1,1),np.array(b).reshape(-1,1)])\n\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n\n\n\nnote: 출제의도: np.concatenate\n\n(27) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(풀이)\n\nnp.concatenate([np.array(a).reshape(1,-1),np.array(b).reshape(1,-1)])\n\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])\n\n\n\nnote: 출제의도: np.concatenate\n\n(28) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(풀이)\n\nnp.concatenate([np.array(a).reshape(-1,1),np.array(b).reshape(-1,1)],axis=1)\n\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\n\n\nnote: 출제의도: np.concatenate\n\n(29) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(풀이)\n\nnp.stack([a,b])\n\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])\n\n\n\nnote: 출제의도: np.stack\n\n(30) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(풀이)\n\nnp.stack([a,b],axis=1)\n\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\n\n\nnote: 출제의도: np.stack\n\n(31) 아래와 같은 배열이 있다고 하자.\n\na=np.array([1,2,3,4,5])\nb=np.array([3,2,1,1,2])\n\nnumpy의 @ 연산자를 이용하여 \\(\\sum_{i=1}^{5}a_ib_i\\)를 계산하라.\n(풀이)\n\na@b\n\n24\n\n\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(32) 아래와 같은 배열을 생성하라.\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\sum_{i=1}^{100}x_i^2\\)을 계산하라.\n(풀이)\n\nx=np.random.randn(100)\nx@x\n\n69.28009497479688\n\n\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(33) 아래와 같은 배열을 생성하라.\na=np.array([1/100]*100)\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\frac{1}{n}\\sum_{i=1}^{n}x_i\\)를 계산하라.\n(풀이)\n\na=np.array([1/100]*100)\nx=np.random.randn(100)\na@x\n\n-0.010052841585430794\n\n\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(34) 표준정규분포에서 100개의 난수를 생성하라.\n(풀이)\n\nnp.random.randn(100)\n\narray([ 1.85418429,  1.74095494,  1.84238756,  0.11833414,  0.50517813,\n       -0.69557289, -1.72748266, -0.26601374,  0.57719853,  0.18027158,\n       -0.42542364,  0.85536403, -0.58893928,  0.55397097, -1.5535881 ,\n       -0.88229423, -0.71875421, -0.43570715, -0.30980515, -0.36179948,\n       -0.17548155,  1.44052988, -0.59466028,  0.17292887, -0.59491904,\n       -1.9695988 ,  0.11928747,  1.28964429,  0.53823904, -1.18030647,\n       -0.20558282, -1.08160482,  0.83372329,  0.28800561,  0.15599112,\n       -1.03586037, -1.06770958, -2.71210449,  0.58241292,  0.69235475,\n        1.37391505, -0.0326631 , -0.12266586, -0.20292358, -0.27657851,\n        0.56420234,  0.40045754, -0.63219726,  0.40820948, -0.612829  ,\n       -1.28695191,  0.46508036,  0.2463253 , -0.27429529, -0.65675501,\n       -1.01875321, -0.69944952, -0.31570476,  0.3646879 , -1.1631018 ,\n       -1.20414629, -0.90456531,  0.89434359, -0.29053615,  1.16408738,\n        0.71108284, -0.52138787,  1.07033411,  1.72342412,  0.90605155,\n       -0.28896114, -1.89628331, -1.71603025,  1.21529517,  0.23833153,\n       -0.52176073, -0.49144623, -0.75427022,  0.10468367,  0.36750664,\n        0.24346823,  0.20762347,  1.08915492,  1.89502878,  1.91479936,\n       -0.4241885 , -1.05989046,  0.96622936,  0.40962212, -2.16589513,\n        0.45357349, -1.23802044,  0.39859558,  0.02910548,  1.44679724,\n        1.16285902, -0.1593022 , -2.14983146,  0.42739322, -0.94301164])\n\n\n\nnote: 출제의도: 표준정규분포 생성\n\n(35) 아래와 동일한 코드를 np.random.rand()로 구현하라.\nnp.random.uniform(low=2,high=4,size=(5,)) \n(풀이)\n\nnp.random.rand(5)*2+2\n\narray([3.62616239, 2.4038075 , 2.64420359, 2.80481305, 2.2678642 ])\n\n\n\nnote: 출제의도: np.random.rand, np.random.uniform\n\n(36) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \nnp.where를 이용하여 a의 모든 음수를 0으로 바꾸는 코드를 작성하라.\n(풀이)\n\na=np.random.randn(100)\nnp.where(a<0,0,a)\n\narray([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.23392366e-01,\n       0.00000000e+00, 1.08600932e+00, 3.67178107e-01, 0.00000000e+00,\n       2.20251453e-01, 0.00000000e+00, 0.00000000e+00, 3.89764950e-02,\n       6.86794220e-01, 6.89479404e-01, 1.26211471e+00, 0.00000000e+00,\n       4.23611162e-01, 8.19460987e-01, 3.14530150e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 1.30354361e+00, 0.00000000e+00,\n       0.00000000e+00, 4.40581127e-01, 0.00000000e+00, 0.00000000e+00,\n       7.86386724e-01, 1.92151119e-02, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 3.23260088e-01, 0.00000000e+00, 7.13352290e-01,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.01771469e-01,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.01926360e+00,\n       0.00000000e+00, 1.00933996e+00, 0.00000000e+00, 5.55528483e-01,\n       5.99763436e-01, 0.00000000e+00, 1.35136571e-01, 1.35928670e-02,\n       9.35722269e-01, 0.00000000e+00, 8.64547752e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 1.68682634e+00, 0.00000000e+00,\n       1.07091321e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       8.27772542e-01, 0.00000000e+00, 7.65702396e-01, 0.00000000e+00,\n       0.00000000e+00, 3.29389519e-01, 0.00000000e+00, 2.51416616e-01,\n       0.00000000e+00, 8.17591580e-01, 0.00000000e+00, 1.09930438e-01,\n       8.71101099e-04, 2.17063699e-01, 2.06385934e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 3.19516814e-01, 5.92549379e-02,\n       1.92857588e+00, 1.39519785e+00, 3.77551912e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 5.16744013e-01, 0.00000000e+00,\n       1.87178822e+00, 1.75448718e+00, 3.40204387e-01, 7.69851631e-01])\n\n\n\nnote: 출제의도: np.where 을 이용한 마스킹\n\n(37) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \n위 배열의 최소값이 위치한 index를 return하라.\n(풀이)\n\na=np.random.randn(100)\nnp.where(a==np.min(a))\n\n(array([92]),)\n\n\n\nnote: 출제의도: np.where\n\n(38) 아래와 같은 배열을 선언하라.\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n차원의 수를 유지하면서 1열을 추출하는 코드를 작성하라. 즉 결과가 아래와 같이 나오도록 하라.\narray([[0],\n       [4],\n       [8]])\n(풀이)\n\na[:,[0]]\n\narray([[0],\n       [4],\n       [8]])\n\n\n\nnote: 출제의도: 차원을 유지하는 인덱싱\n\n(39)-(40)\n(39) 자신의 학번으로 random seed 를 설정하라. [20,25)의 범위에서 100개의 정수를 랜덤으로 생성해 (10,10) shape의 배열을 만들어라.\n(풀이)\n\nnp.random.seed(43052)\na=np.random.randint(low=20,high=25,size=(10,10))\n\n\nnote: 출제의도: np.random.randint\n\n(40) 39의 결과에서 20,21,22 는 각각 몇개씩 있는가?\n(풀이)\n\nnp.sum(a==20),np.sum(a==21),np.sum(a==22)\n\n(17, 20, 19)\n\n\n\nnote: 출제의도: bool형의 sum\n\n\n\n2. 코드구현 II\n\n(1)-(6) 아래의 코드를 실해하여 test_dic를 생성하라.\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ndel(att);del(rep);del(mid);del(fin);del(key)\n\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(1) test_dic에서 출석점수가 70이상(70>=)인 학생들의 학번을 출력하는 코드를 작성하라.\n(풀이)\n\nids= [k for k in test_dic if test_dic[k]['att']>=70]\n\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(2) test_dic에서 출석점수가 70미만(<70)인 학생들의 수를 구하라.\n(풀이)\n\nlen([k for k in test_dic if test_dic[k]['att']<70])\n\n70\n\n\n\nsum([test_dic[k]['att']<70 for k in test_dic])\n\n70\n\n\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(3) test_dic에서 출석점수가 70이상(70>=)인 학생들의 중간고사 점수의 평균을 계산하라.\n(풀이)\n\nnp.mean([test_dic[k]['mid'] for k in test_dic if test_dic[k]['att']>=70])\n\n57.15384615384615\n\n\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(4) test_dic에서 중간고사 점수를 출력하는 코드를 작성하라.\n(풀이)\n\nmid=[test_dic[k]['mid'] for k in test_dic]\n\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리\n\n(5) test_dic에서 중간고사 점수의 표준편차와 레포트점수의 표준편차를 구하여라. 어떤것이 더 큰가?\n(풀이)\n\nnp.std([test_dic[k]['mid'] for k in test_dic]),np.std([test_dic[k]['rep'] for k in test_dic])\n\n(29.88243631299162, 22.626533097229014)\n\n\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리, np.std\n\n(6) test_dic에서 중간고사 점수가 가장 높은 사람의 학번을 출력하라.\n(풀이)\n\n[k for k in test_dic if test_dic[k]['mid']==max(mid)]\n\n['202212326',\n '202212463',\n '202212383',\n '202212341',\n '202212417',\n '202212401',\n '202212405',\n '202212369',\n '202212403',\n '202212407',\n '202212315']\n\n\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리\n\n\n(7) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번의 시행하였을 경우 73번 이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(풀이)\n\nsum(np.random.binomial(n=100,p=0.45,size=(1000,)) >= 73)\n\n0\n\n\n\nnote: 출제의도: np.random.binomial, bool형의 합\n\n(8) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번 시행하였을 경우 10번이하로 실패하거나 90번이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(풀이)\n\na=np.random.binomial(n=100,p=0.45,size=(1000,))\nsum((a>=90) | (a<=10))\n\n0\n\n\n\nsum(a>=90) + sum(a<=10) # 이것도 좋은 풀이\n\n0\n\n\n\nnote: 출제의도: np.random.binomial, bool형의 합\n\n(9) 아래와 같은 행렬을 선언하자.\n\nA=np.arange(2*1).reshape(2,1)\nB=np.arange(2*2).reshape(2,2)\nC=np.arange(2*3).reshape(2,3)\nD=np.arange(3*3).reshape(3,3)\nE=np.arange(3*2).reshape(3,2)\nF=np.arange(3*1).reshape(3,1)\n\n아래의 블락매트릭스를 만들어라.\n\\(\\begin{bmatrix} a_{11} & b_{11} & b_{12} & c_{11} & c_{12} & c_{13} \\\\ a_{21} & b_{21} & b_{22} & c_{21} & c_{22} & c_{23} \\\\ d_{11} & d_{12} & d_{13} & e_{11} & e_{12} & f_{11} \\\\ d_{21} & d_{22} & d_{23} & e_{21} & e_{22} & f_{21} \\\\ d_{31} & d_{32} & d_{33} & e_{31} & e_{32} & f_{31} \\end{bmatrix}\\)\n여기에서 \\(a_{ij}\\)는 매트릭스 \\({\\bf A}\\)의 원소이다.\n(풀이)\n\ntop = np.concatenate([A,B,C],axis=1)\nbottom = np.concatenate([D,E,F],axis=1)\nnp.concatenate([top,bottom],axis=0)\n\narray([[0, 0, 1, 0, 1, 2],\n       [1, 2, 3, 3, 4, 5],\n       [0, 1, 2, 0, 1, 0],\n       [3, 4, 5, 2, 3, 1],\n       [6, 7, 8, 4, 5, 2]])\n\n\n\nnote: 출제의도: np.concatenate\n\n(10) 표준정규분포에 10000개의 난수를 아래와 같이 생성하라.\n\nx=np.random.randn(10000)\ny=np.random.randn(10000)\n\n\\((i,j)\\) 번째 원소가 \\((x_i-y_j)^2\\)인 (10000,10000) 매트릭스를 만들어라.\n(풀이)\n\n(x.reshape(10000,1) - y.reshape(1,10000))**2\n\narray([[9.94471594e-01, 1.59617444e+00, 4.89939117e-01, ...,\n        5.85763251e-02, 8.71831383e-01, 4.48231705e-02],\n       [3.82650425e-01, 7.82788668e-01, 1.16338019e+00, ...,\n        3.85231232e-01, 1.72229831e+00, 3.48524169e-01],\n       [2.19381916e-03, 4.81046770e-02, 3.04162913e+00, ...,\n        1.65404203e+00, 3.91165053e+00, 1.57699602e+00],\n       ...,\n       [4.06902110e-02, 4.15352671e-03, 3.60584637e+00, ...,\n        2.07641061e+00, 4.54827803e+00, 1.98997559e+00],\n       [6.35135252e-01, 1.13022358e+00, 8.10422594e-01, ...,\n        1.95632560e-01, 1.28594998e+00, 1.69738287e-01],\n       [3.93009857e+00, 5.05626325e+00, 8.13727798e-02, ...,\n        5.52331661e-01, 2.65189382e-03, 5.98303522e-01]])\n\n\n\nnote: 출제의도: 브로드캐스팅\n\n\n(11)-(16)\n아래와 같은 매트릭스를 생성하라.\n\nnp.random.seed(43052)\na=np.random.randn(10000).reshape(100,100)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825, ..., -0.18506968,\n         1.05538764,  1.18701443],\n       [-0.25027283, -1.58045215,  0.1124153 , ...,  1.0321894 ,\n         0.40438012, -0.13491595],\n       [-0.76763724, -0.64294232, -0.24782396, ..., -0.01530161,\n         0.89125897, -0.82683395],\n       ...,\n       [-1.41379028,  0.79611333, -0.71011837, ..., -0.9860352 ,\n         1.30755244,  2.18677233],\n       [ 1.33968105, -0.78457449, -0.10405858, ..., -0.71110186,\n         0.99841286,  2.34371635],\n       [-0.66422032, -0.07550233,  0.7405869 , ...,  1.03232398,\n        -0.18988252, -0.03578389]])\n\n\n(11) 각 행의 합을 구하라. 즉 1행의 합, 2행의 합, … 100행의 합을 계산하라.\n\n1행의합 = 0.38342049 + 1.0841745 + … + 1.18701443\n\n(풀이)\n\na.sum(axis=1)\n\narray([-8.13607922e+00,  9.87120533e+00, -1.41434956e+01, -2.21705363e+00,\n       -1.45535236e+01, -9.15821678e+00, -2.59866360e+00, -1.54562385e+01,\n       -1.42005088e+00, -3.51523111e+00,  9.70487578e+00, -1.26229105e+01,\n        1.66837113e+00,  2.43015457e+00,  2.72990184e+00, -7.99486429e+00,\n       -8.38305954e-01, -8.45002020e+00, -1.03610098e+00,  2.07251861e+01,\n        1.11461478e+01,  7.62144075e+00, -7.93734585e+00,  1.82844319e+01,\n       -2.63562392e+00, -8.97916930e+00, -1.88986183e+00, -9.32477049e+00,\n       -6.69074565e+00, -1.42463143e+01,  6.45540510e-01,  1.80911488e+00,\n        2.40997157e+00,  1.63367254e+01,  7.63990677e+00,  8.13524813e+00,\n        3.97159000e+00, -1.10542949e+00,  4.37564512e-01,  2.87299971e+00,\n       -4.01016768e+00,  5.71115215e+00, -4.64132698e+00, -9.13987753e+00,\n       -6.78326000e+00,  3.36308150e+00, -5.13704342e+00, -5.09782466e+00,\n        6.54192465e-03,  7.19722660e+00, -4.64674820e+00, -9.24124039e+00,\n        6.73530841e+00,  1.12168921e+00,  1.61615988e+00,  1.37602200e+01,\n        6.67289840e-01, -2.09578108e+00, -2.81826564e-01, -8.52416541e+00,\n       -7.21970047e+00,  2.27146777e+01, -1.40341974e+01,  1.69263136e+01,\n       -1.80568372e+01,  6.52142336e+00, -1.73092812e+01, -1.34999285e+01,\n       -7.85539317e+00, -4.74940393e-01, -2.75765037e+01,  8.74991555e+00,\n       -9.77324158e+00,  1.42854121e+01, -1.10130356e+00, -1.39206483e-01,\n       -1.54638921e+01,  1.36814794e+00,  8.41394160e+00, -2.42153833e+00,\n       -2.57155344e+01, -6.72423820e+00, -9.49366257e-01,  3.79493472e+00,\n       -6.23508582e+00,  7.75657189e+00,  9.69403620e+00,  1.46847519e+01,\n        7.36500792e+00, -2.54755192e+01,  1.22792449e+01, -1.02497847e+01,\n        1.30452028e+01,  3.92943038e+00, -3.27227585e+00, -1.06633071e+01,\n       -1.56942302e+01,  8.01451222e+00,  2.81546938e+00,  5.56774384e+00])\n\n\n\nnote: 출제의도: np.sum with axis\n\n(12) (11)의 결과로 나온 배열의 표준편차를 구하라.\n(풀이)\n\na.sum(axis=1).std()\n\n9.98012658863081\n\n\n\nnote: 출제의도: np.sum with axis, np.std\n\n(13) 각 열의 평균을 구하라. 즉 1열의 평균, 2열의 평균, … , 100열의 평균을 계산하라.\n(풀이)\n\na.sum(axis=0)\n\narray([ 5.05543481e-01, -8.11250975e-01, -7.27142023e-01,  9.64876493e+00,\n        5.64186324e+00, -2.22728206e+00,  1.32808256e-02, -9.60905067e+00,\n        9.42144096e+00, -1.21946518e+01, -2.21878576e+00, -3.77018716e+00,\n        2.35739166e-01, -1.13202128e+01, -9.00374437e+00, -3.09372275e+00,\n       -2.18029121e+00,  7.04210003e+00, -4.12563112e+00,  2.58233488e+00,\n        1.16578817e+01, -1.59430241e+01, -1.53668953e+00,  9.21879710e+00,\n       -1.11346500e+01, -1.20131585e+01,  5.94139652e+00, -3.27022797e+00,\n       -1.46466366e+00, -1.78386785e+00, -1.06650333e+01, -9.04542721e+00,\n       -8.52586244e+00,  5.52166280e+00,  1.94115122e+01,  4.64389603e+00,\n        5.13636914e+00,  1.11424801e+01, -4.18629084e+00,  9.23822150e+00,\n       -2.00433998e+00, -5.73784795e+00, -8.79928414e+00, -3.01766235e+00,\n        6.47256326e+00,  3.14419234e+00, -1.16146865e+01, -1.04800787e+01,\n        3.17924308e+00,  5.51687322e+00,  1.04913214e+01, -2.79741703e-01,\n        2.56767141e+01, -1.35620430e+01, -9.59492302e+00,  1.23241275e+01,\n       -5.26436946e-01, -3.14823093e+00, -4.00286104e+00, -1.48618576e+01,\n        4.85988487e+00, -1.37972086e+01, -1.04715966e+01, -7.13893940e+00,\n        4.35483376e+00, -2.10610822e+01, -1.03231108e+01, -1.62132451e+01,\n        2.85187037e+01, -8.25697744e+00,  4.33723229e+00,  1.32763889e+00,\n       -1.61919484e+01, -5.07924036e+00,  6.62243327e+00, -9.72863991e+00,\n        2.71962223e+01, -5.97710822e+00,  1.54580795e+01, -5.46739064e+00,\n       -1.08611574e+01, -1.56520706e+01, -1.40476317e+01,  1.06067589e+01,\n       -3.46141736e+00, -6.07673046e+00,  5.33471760e-01,  8.10276105e+00,\n       -1.31994569e+01, -1.00936968e+00,  6.13944222e+00, -9.72765699e+00,\n        1.61342793e+01,  1.02634369e+01, -5.03038014e+00, -7.50604837e+00,\n        2.63992605e+00,  6.98470602e+00, -1.89567885e+01,  7.91910813e+00])\n\n\n\nnote: 출제의도: np.sum with axis\n\n(14) (13)의 결과로 나온 배열의 표준편차를 구하라.\n(풀이)\n\na.sum(axis=0).std()\n\n9.944992000065781\n\n\n\nnote: 출제의도: np.sum with axis, np.std\n\n(15) a의 원소중 a>0 을 만족하는 원소의 평균을 구하여라.\n(풀이)\n\na[a>0].mean()\n\n0.7879030416692301\n\n\n\nnote: 출제의도: bool을 이용한 인덱싱\n\n(16) a의 원소중 a>3을 만족하는 원소의 수를 count하라.\n(풀이)\n\nnp.sum(a>3)\n\n17\n\n\n\nnote: 출제의도: bool의 sum\n\n\n(17)-(18)\n아래와 같은 배열 a를 고려하자.\n\nnp.random.seed(43052)\na=np.random.binomial(1,0.2,size=(10000,))\na\n\narray([1, 0, 1, ..., 1, 1, 0])\n\n\n(17) 0에서 1로 바뀌는 부분을 count하라.\n(풀이)\n\nnp.sum(np.diff(a)==1)\n\n1617\n\n\n\nnote: 출제의도: np.diff 응용\n\n(18) 1에서 0으로 바뀌는 부분을 count하라.\n(풀이)\n\nnp.sum(np.diff(a)==-1)\n\n1618\n\n\n\nnote: 출제의도: np.diff 응용\n\n[예시] 아래의 배열에서 0에서 1로 부분은 모두 세 군데이고, 1에서 0으로 바뀌는 부분은 모두 두 군데 이다.\n0 0 0 1 0 1 0 0 0 1 1 1 \n\n(19)-(25)\n(19) \\(i=1,2,\\dots,1000\\)에 대하여 아래를 각각 구하라.\n\\[x_i= \\cos(t_i)+\\cos(3t_i)+\\cos(5t_i)\\]\n\\[y_i= \\sin(t_i)+\\sin(4t_i)\\]\n여기에서 \\(t_i=\\frac{2\\pi i }{1000}\\) 이다.\n(풀이)\n\ni=np.arange(1,1001)\nt=i*2*np.pi/1000\nx=np.cos(t)+np.cos(3*t)+np.cos(5*t) \ny=np.sin(t)+np.sin(4*t) \n\n\nnote: 출제의도: numpy를 이용한 수식표현\n\n(20) \\((x_i,y_i)\\)를 그려라.\n(풀이)\n\nplt.plot(x,y)\n\n\n\n\n\nnote: 출제의도: plt.plot\n\n(21) 아래와 같은 변환을 통하여 \\((w_i,z_i)\\)를 얻어라.\n\\[w_i= \\frac{1}{\\sqrt{2}}x_i - \\frac{1}{\\sqrt{2}}y_i\\]\n\\[z_i= \\frac{1}{\\sqrt{2}}x_i + \\frac{1}{\\sqrt{2}}y_i\\]\n\\((w_i,z_i)\\)를 시각화 하라.\n(풀이)\n\nw = 1/np.sqrt(2)*x -  1/np.sqrt(2)*y\nz = 1/np.sqrt(2)*x +  1/np.sqrt(2)*y\nplt.plot(w,z)\n\n\n\n\n\nnote: 출제의도: numpy를 이용한 연산, plt.plot\n\n(22) 아래와 같은 매트릭스를 만들어라.\n\\[{\\bf A}=\\begin{bmatrix}\nx_1 & y_1 \\\\\nx_2 & y_2 \\\\\n\\dots & \\dots \\\\\nx_n & y_n\n\\end{bmatrix}\\]\n(풀이)\n\nA=np.stack([x,y]).T\nA\n\narray([[ 2.99930917e+00,  3.14132394e-02],\n       [ 2.99723725e+00,  6.28103581e-02],\n       [ 2.99378587e+00,  9.41752452e-02],\n       ...,\n       [ 2.99723725e+00, -6.28103581e-02],\n       [ 2.99930917e+00, -3.14132394e-02],\n       [ 3.00000000e+00, -1.22464680e-15]])\n\n\n\nA=np.stack([x,y],axis=1)\nA\n\narray([[ 2.99930917e+00,  3.14132394e-02],\n       [ 2.99723725e+00,  6.28103581e-02],\n       [ 2.99378587e+00,  9.41752452e-02],\n       ...,\n       [ 2.99723725e+00, -6.28103581e-02],\n       [ 2.99930917e+00, -3.14132394e-02],\n       [ 3.00000000e+00, -1.22464680e-15]])\n\n\n\nnote: 출제의도: np.stack\n\n(23) \\({\\bf A} {\\bf B}\\)의 첫번째 열과 두번째 열을 시각화한 결과가 \\((w_i,z_i)\\)과 동일하도록 적당한 (2,2) 매트릭스 \\({\\bf B}\\)를 만들어라.\n(풀이)\n\nB= np.array([[1/np.sqrt(2), 1/np.sqrt(2)],[-1/np.sqrt(2), 1/np.sqrt(2)]])\n#B= np.array([[1, 1],[-1, 1]])/np.sqrt(2)\nplt.plot(A@B[:,0],A@B[:,1])\n\n\n\n\n\nnote: 출제의도: 행렬의 수식표현, 행렬의 곱\n\n(24) \\({\\bf A}{\\bf B}^2\\)의 첫번째 열과 두번째 열을 시각화 하라.\n(풀이)\n\nplt.plot((A@B@B)[:,0],(A@B@B)[:,1])\n\n\n\n\n\nnote: 출제의도: 행렬의 곱\n\n(25) \\(n=3,4,5,6,\\dots\\) 에 대하여 \\({\\bf A}{\\bf B}^n\\)을 반복적으로 그려보라. \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가? \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가?\n(풀이)\n\nplt.plot((A@B@B@B)[:,0],(A@B@B@B)[:,1]) ## n=3\n\n\n\n\n\nplt.plot((A@B@B@B@B)[:,0],(A@B@B@B@B)[:,1]) ## n=4\n\n\n\n\n\n(B@B)@(B@B)@(B@B)@(B@B)\n\narray([[1., 0.],\n       [0., 1.]])\n\n\n\n(B@B)@(B@B)@(B@B)@(B@B)@B\n\narray([[ 0.70710678,  0.70710678],\n       [-0.70710678,  0.70710678]])\n\n\n\n답: \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n=8\\) 이고 \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n=9\\) 이다.\n\n\nnote: 출제의도: 회전변환의 유추, 역행렬의 개념응용"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#기본-인덱싱",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#기본-인덱싱",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "기본 인덱싱",
    "text": "기본 인덱싱\n- 예제1: 기본인덱싱\n\na='asdf'\na[2]\n\n'd'\n\n\n\na[-1]\n\n'f'\n\n\n- 예제2: 슬라이싱\n\na='asdf'\na[1:3]\n\n'sd'\n\n\n\na[-2:]\n\n'df'\n\n\n- 예제3: 스트라이딩\n\na='asdfg'\na[::2]\n\n'adg'\n\n\n- 예제4: 불가능한것\n\na='asdf'\na[[1,2]] # 정수인덱스를 리스트화 시켜서 인덱싱하는 것은 불가능 \n\nTypeError: string indices must be integers\n\n\n\na='asdf'\na[[True,True,False,False]] \n\nTypeError: string indices must be integers"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#팬시-인덱싱",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#팬시-인덱싱",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "팬시 인덱싱",
    "text": "팬시 인덱싱\n- 예제1: 인덱스의 리스트 (혹은 ndarray)를 전달\n\na=np.arange(55,61)\na\n\narray([55, 56, 57, 58, 59, 60])\n\n\n\na[[1,2,-1]]\n\narray([56, 57, 60])\n\n\n\na[np.array([1,2,-1])]\n\narray([56, 57, 60])\n\n\n- 예제2: bool로 이루어진 리스트 (혹은 ndarray)를 전달\n\na=np.arange(55,61)\na\n\narray([55, 56, 57, 58, 59, 60])\n\n\n\na[[True,True,False,False,False,False]]\n\narray([55, 56])\n\n\n\na[np.array([True,True,False,False,False,False])]\n\narray([55, 56])\n\n\n\na[a<58]\n\narray([55, 56, 57])"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#차원자료형의-인덱싱",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#차원자료형의-인덱싱",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "2차원자료형의 인덱싱",
    "text": "2차원자료형의 인덱싱\n- 예제1\n\na = np.arange(4*3).reshape(4,3)\na\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11]])\n\n\n\na[0:2,1]\n\narray([1, 4])\n\n\n- 예제2: 차원을 유지하면서 인덱싱을 하고 싶으면?\n\na = np.arange(4*3).reshape(4,3)\na[0:2,[1]]\n\narray([[1],\n       [4]])"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#hash",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#hash",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "Hash",
    "text": "Hash\n- 예제1: (key,value)\n\nd={'att':65, 'rep':45, 'mid':30, 'fin':100}\nd\n\n{'att': 65, 'rep': 45, 'mid': 30, 'fin': 100}\n\n\n\nd['att'] # key를 넣으면 value가 리턴\n\n65\n\n\n- 예제2: numpy와 비교\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ntest_ndarray = np.array([key,att,rep,mid,fin],dtype=np.int64).T\ndel(att);del(rep);del(mid);del(fin);del(key)\n\n학번 ’202212460’에 해당하는 학생의 출석점수를 알고 싶다면?\n(풀이1)\n\ntest_dic['202212460']['att']\n\n55\n\n\n(풀이2)\n\ntest_ndarray[test_ndarray[:,0] == 202212460, 1] ## 이게 무슨코드야 도데체!\n\narray([55])\n\n\n(풀이2)가 (풀이1)에 비하여 불편한 점 - test_ndarray의 첫칼럼은 student id 이고 두번째 칼럼은 att라는 사실을 암기하고 있어야 한다. - student id가 아니고 만약에 학생이름을 써서 데이터를 정리한다면 모든 자료형은 문자형이 되어야 한다. - 작성한 코드의 가독성이 없다. (위치로 접근하기 때문)\n- 요약: hash 스타일로 정보를 추출하는 것이 유용할 때가 있다. 그리고 보통 hash 스타일로 정보를 뽑는 것이 유리하다. (사실 numpy는 정보추출을 위해 개발된 자료형이 아니라 행렬 및 벡터의 수학연산을 지원하기 위해 개발된 자료형이다)\n- 소망: 정보를 추출할때는 hash 스타일도 유용하다는 것은 이해함 \\(\\to\\) 하지만 나는 가끔 넘파이스타일로 정보를 뽑고 싶은걸? 그리고 딕셔너리 형태가 아니고 엑셀처럼(행렬처럼) 데이터를 보고 싶은걸? \\(\\to\\) pandas의 개발"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#엑셀처럼",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#엑셀처럼",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "엑셀처럼",
    "text": "엑셀처럼\n엑셀처럼 데이터를 테이블 형태로 정리하고 싶다!!\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,20)\nrep = np.random.choice(np.arange(5,21)*5,20)\nmid = np.random.choice(np.arange(0,21)*5,20)\nfin = np.random.choice(np.arange(0,21)*5,20)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),20,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(20)}\n\n\ntest_dic\n\n{'202212380': {'att': 65, 'rep': 55, 'mid': 50, 'fin': 40},\n '202212370': {'att': 95, 'rep': 100, 'mid': 50, 'fin': 80},\n '202212363': {'att': 65, 'rep': 90, 'mid': 60, 'fin': 30},\n '202212488': {'att': 55, 'rep': 80, 'mid': 75, 'fin': 80},\n '202212312': {'att': 80, 'rep': 30, 'mid': 30, 'fin': 100},\n '202212377': {'att': 75, 'rep': 40, 'mid': 100, 'fin': 15},\n '202212463': {'att': 65, 'rep': 45, 'mid': 45, 'fin': 90},\n '202212471': {'att': 60, 'rep': 60, 'mid': 25, 'fin': 0},\n '202212400': {'att': 95, 'rep': 65, 'mid': 20, 'fin': 10},\n '202212469': {'att': 90, 'rep': 80, 'mid': 80, 'fin': 20},\n '202212318': {'att': 55, 'rep': 75, 'mid': 35, 'fin': 25},\n '202212432': {'att': 95, 'rep': 95, 'mid': 45, 'fin': 0},\n '202212443': {'att': 95, 'rep': 55, 'mid': 15, 'fin': 35},\n '202212367': {'att': 50, 'rep': 80, 'mid': 40, 'fin': 30},\n '202212458': {'att': 50, 'rep': 55, 'mid': 15, 'fin': 85},\n '202212396': {'att': 95, 'rep': 30, 'mid': 30, 'fin': 95},\n '202212482': {'att': 50, 'rep': 50, 'mid': 45, 'fin': 10},\n '202212452': {'att': 65, 'rep': 55, 'mid': 15, 'fin': 45},\n '202212387': {'att': 70, 'rep': 70, 'mid': 40, 'fin': 35},\n '202212354': {'att': 90, 'rep': 90, 'mid': 80, 'fin': 90}}\n\n\n\n테이블형태로 보고 싶다.\n\n(방법1) – 행렬이기는 하지만 방법 2,3,4,5 에 비하여 우리가 원하는 만큼 가독성을 주는 형태는 아님..\n\ntest_ndarray = np.array([key,att,rep,mid,fin],dtype=np.int64).T\ntest_ndarray\n\narray([[202212380,        65,        55,        50,        40],\n       [202212370,        95,       100,        50,        80],\n       [202212363,        65,        90,        60,        30],\n       [202212488,        55,        80,        75,        80],\n       [202212312,        80,        30,        30,       100],\n       [202212377,        75,        40,       100,        15],\n       [202212463,        65,        45,        45,        90],\n       [202212471,        60,        60,        25,         0],\n       [202212400,        95,        65,        20,        10],\n       [202212469,        90,        80,        80,        20],\n       [202212318,        55,        75,        35,        25],\n       [202212432,        95,        95,        45,         0],\n       [202212443,        95,        55,        15,        35],\n       [202212367,        50,        80,        40,        30],\n       [202212458,        50,        55,        15,        85],\n       [202212396,        95,        30,        30,        95],\n       [202212482,        50,        50,        45,        10],\n       [202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n(방법2)\n\npd.DataFrame(test_dic).T\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n(방법3)\n\ntest_dic2 = {'att':{key[i]:att[i] for i in range(20)}, \n             'rep':{key[i]:rep[i] for i in range(20)},\n             'mid':{key[i]:mid[i] for i in range(20)},\n             'fin':{key[i]:fin[i] for i in range(20)}}\n\n\npd.DataFrame(test_dic2)\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n(방법4)\n\ndf = pd.DataFrame({'att':att, 'rep':rep, 'mid':mid, 'fin':fin},index=key)\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n(방법5)\n\ndf = pd.DataFrame({'att':att, 'rep':rep, 'mid':mid, 'fin':fin})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      55\n      50\n      40\n    \n    \n      1\n      95\n      100\n      50\n      80\n    \n    \n      2\n      65\n      90\n      60\n      30\n    \n    \n      3\n      55\n      80\n      75\n      80\n    \n    \n      4\n      80\n      30\n      30\n      100\n    \n    \n      5\n      75\n      40\n      100\n      15\n    \n    \n      6\n      65\n      45\n      45\n      90\n    \n    \n      7\n      60\n      60\n      25\n      0\n    \n    \n      8\n      95\n      65\n      20\n      10\n    \n    \n      9\n      90\n      80\n      80\n      20\n    \n    \n      10\n      55\n      75\n      35\n      25\n    \n    \n      11\n      95\n      95\n      45\n      0\n    \n    \n      12\n      95\n      55\n      15\n      35\n    \n    \n      13\n      50\n      80\n      40\n      30\n    \n    \n      14\n      50\n      55\n      15\n      85\n    \n    \n      15\n      95\n      30\n      30\n      95\n    \n    \n      16\n      50\n      50\n      45\n      10\n    \n    \n      17\n      65\n      55\n      15\n      45\n    \n    \n      18\n      70\n      70\n      40\n      35\n    \n    \n      19\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\ndf=df.set_index([key])\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#딕셔너리처럼",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#딕셔너리처럼",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "딕셔너리처럼",
    "text": "딕셔너리처럼\n해싱으로 원하는 정보를 뽑으면 좋겠다!!(마치 딕셔너리처럼)\n- 예제1: 출석점수를 출력\n\ntest_dic2['att']\n\n{'202212380': 65,\n '202212370': 95,\n '202212363': 65,\n '202212488': 55,\n '202212312': 80,\n '202212377': 75,\n '202212463': 65,\n '202212471': 60,\n '202212400': 95,\n '202212469': 90,\n '202212318': 55,\n '202212432': 95,\n '202212443': 95,\n '202212367': 50,\n '202212458': 50,\n '202212396': 95,\n '202212482': 50,\n '202212452': 65,\n '202212387': 70,\n '202212354': 90}\n\n\n\ndf['att']\n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 예제2: 학번 202212380’의 출석점수 출력\n\ntest_dic2['att']['202212380']\n\n65\n\n\n\ndf['att']['202212380']\n\n65"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#리스트or넘파이처럼",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#리스트or넘파이처럼",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "리스트(or넘파이)처럼",
    "text": "리스트(or넘파이)처럼\n인덱싱으로 정보를 뽑는 기능도 지원을 하면 좋겠다 (마치 리스트나 넘파이처럼)\n- 예제1: 첫번째 학생의 기말고사 성적을 출력하고 싶다.\n\ntest_ndarray[0,-1]\n\n40\n\n\n\ndf.iloc[0,-1]\n\n40\n\n\n\n벼락치기: df에서 iloc이라는 특수기능을 이용하면 넘파이 인덱싱처럼 원소출력이 가능하다.\n\n- 예제2: 홀수번째 학생의 점수를 뽑고 싶다.\n\ntest_ndarray[::2]\n\narray([[202212380,        65,        55,        50,        40],\n       [202212363,        65,        90,        60,        30],\n       [202212312,        80,        30,        30,       100],\n       [202212463,        65,        45,        45,        90],\n       [202212400,        95,        65,        20,        10],\n       [202212318,        55,        75,        35,        25],\n       [202212443,        95,        55,        15,        35],\n       [202212458,        50,        55,        15,        85],\n       [202212482,        50,        50,        45,        10],\n       [202212387,        70,        70,        40,        35]])\n\n\n\ndf.iloc[::2]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n  \n\n\n\n\n- 예제3: 맨 끝에서 3명의 점수를 출력하고 싶다.\n\ntest_ndarray[-3:]\n\narray([[202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n\ndf.iloc[-3:]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\ndf[-3:]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제4: 맨 끝에서 3명의 점수중 마지막 2개의 칼럼만 출력하고 싶다.\n\ntest_ndarray[-3:,-2:]\n\narray([[15, 45],\n       [40, 35],\n       [80, 90]])\n\n\n\ndf.iloc[-3:,-2:]\n\n\n\n\n\n  \n    \n      \n      mid\n      fin\n    \n  \n  \n    \n      202212452\n      15\n      45\n    \n    \n      202212387\n      40\n      35\n    \n    \n      202212354\n      80\n      90"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#다-되는거",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#다-되는거",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "다 되는거?",
    "text": "다 되는거?\n궁극: 해싱과 인덱싱을 모두 지원하는 아주 우수한 자료형을 만들고 싶음\n- 예제1: 중간고사 점수가 20점 이상이면서 동시에 출석점수가 60점미만인 학생들의 기말고사 점수를 출력\n(방법1) 데이터베이스 스타일\n\ndf.query(\"mid >= 20 and att <60\")\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n  \n\n\n\n\n\ndf.query(\"mid >= 20 and att <60\")['fin']\n\n202212488    80\n202212318    25\n202212367    30\n202212482    10\nName: fin, dtype: int64\n\n\n(방법2) 넘파이 스타일이라면?\n\ntest_ndarray\n\narray([[202212380,        65,        55,        50,        40],\n       [202212370,        95,       100,        50,        80],\n       [202212363,        65,        90,        60,        30],\n       [202212488,        55,        80,        75,        80],\n       [202212312,        80,        30,        30,       100],\n       [202212377,        75,        40,       100,        15],\n       [202212463,        65,        45,        45,        90],\n       [202212471,        60,        60,        25,         0],\n       [202212400,        95,        65,        20,        10],\n       [202212469,        90,        80,        80,        20],\n       [202212318,        55,        75,        35,        25],\n       [202212432,        95,        95,        45,         0],\n       [202212443,        95,        55,        15,        35],\n       [202212367,        50,        80,        40,        30],\n       [202212458,        50,        55,        15,        85],\n       [202212396,        95,        30,        30,        95],\n       [202212482,        50,        50,        45,        10],\n       [202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n\ntest_ndarray[:,3] >= 20  ## 중간고사가 20점이상\n\narray([ True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True, False,  True, False,  True,  True, False,\n        True,  True])\n\n\n\ntest_ndarray[:,1] < 60  ## 출석이 60미만\n\narray([False, False, False,  True, False, False, False, False, False,\n       False,  True, False, False,  True,  True, False,  True, False,\n       False, False])\n\n\n\n(test_ndarray[:,3] >= 20) & (test_ndarray[:,1] < 60)\n\narray([False, False, False,  True, False, False, False, False, False,\n       False,  True, False, False,  True, False, False,  True, False,\n       False, False])\n\n\n\nnote: test_ndarray[:,3] >= 20 & test_ndarray[:,1] < 60 와 같이 하면 에러가 난다. 조심하자!\n\n\ntest_ndarray[(test_ndarray[:,3] >= 20) & (test_ndarray[:,1] < 60),-1] # 이게 무슨코드야\n\narray([80, 25, 30, 10])\n\n\n\n구현난이도 어려움, 가독성 꽝\n\n- 예제2: ’중간고사점수<기말고사점수’인 학생들의 출석점수 평균을 구하자.\n\ndf.query('mid<fin')['att'].mean()\n\n76.66666666666667"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#데이터프레임-선언",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#데이터프레임-선언",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "데이터프레임 선언",
    "text": "데이터프레임 선언\n- 방법1: dictionary에서 만든다.\n\npd.DataFrame({'att':[30,40,50],'mid':[50,60,70]})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      50\n    \n    \n      1\n      40\n      60\n    \n    \n      2\n      50\n      70\n    \n  \n\n\n\n\n\npd.DataFrame({'att':(30,40,50),'mid':(50,60,70)})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      50\n    \n    \n      1\n      40\n      60\n    \n    \n      2\n      50\n      70\n    \n  \n\n\n\n\n\npd.DataFrame({'att':np.array([30,40,50]),'mid':np.array([50,60,70])})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      50\n    \n    \n      1\n      40\n      60\n    \n    \n      2\n      50\n      70\n    \n  \n\n\n\n\n- 방법: 2차원 ndarray에서 만든다.\n\nnp.arange(2*3).reshape(2,3)\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\npd.DataFrame(np.arange(2*3).reshape(2,3))\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#열의-이름-부여",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#열의-이름-부여",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "열의 이름 부여",
    "text": "열의 이름 부여\n- 방법1: 딕셔너리를 통하여 만들면 딕셔너리의 key가 자동으로 열의 이름이 된다.\n\npd.DataFrame({'att':np.array([30,40,50]),'mid':np.array([50,60,70])})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      50\n    \n    \n      1\n      40\n      60\n    \n    \n      2\n      50\n      70\n    \n  \n\n\n\n\n- 방법2: pd.DataFrame()의 옵션에 columns를 이용\n\npd.DataFrame(np.arange(2*3).reshape(2,3),columns=['X1','X2','X3'])\n\n\n\n\n\n  \n    \n      \n      X1\n      X2\n      X3\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n- 방법3: df.columns에 원하는 열이름을 덮어씀 (1)\n\ndf=pd.DataFrame(np.arange(2*3).reshape(2,3))\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.columns = ['X1','X2','X3']\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      X1\n      X2\n      X3\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.columns\n\nIndex(['X1', 'X2', 'X3'], dtype='object')\n\n\n- 방법4: df.columns에 원하는 열이름을 덮어씀 (2)\n\ndf=pd.DataFrame(np.arange(2*3).reshape(2,3))\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.columns = pd.Index(['X1','X2','X3'])\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      X1\n      X2\n      X3\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n방법4가 방법3의 방식보다 컴퓨터가 이해하기 좋다. (= 불필요한 에러를 방지할 수 있다)\n\ndf.columns, type(df.columns)\n\n(Index(['X1', 'X2', 'X3'], dtype='object'), pandas.core.indexes.base.Index)\n\n\n\n['X1','X2','X3'], type(['X1','X2','X3'])\n\n(['X1', 'X2', 'X3'], list)\n\n\n\npd.Index(['X1','X2','X3']), type(pd.Index(['X1','X2','X3']))\n\n(Index(['X1', 'X2', 'X3'], dtype='object'), pandas.core.indexes.base.Index)"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#행의-이름-부여",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#행의-이름-부여",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "행의 이름 부여",
    "text": "행의 이름 부여\n- 방법1: 중첩 dict이면 nested dic의 key가 알아서 행의 이름으로 된다.\n\npd.DataFrame({'att':{'guebin':30, 'iu':40, 'hynn':50} , 'mid':{'guebin':5, 'iu':45, 'hynn':90}})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n- 방법2: pd.DataFrame()의 index 옵션 이용\n\npd.DataFrame({'att':[30,40,50] , 'mid':[5,45,90]}, index=['guebin','iu','hynn'])\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n- 방법3: df.index에 덮어씌움\n\ndf=pd.DataFrame({'att':[30,40,50] , 'mid':[5,45,90]})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      5\n    \n    \n      1\n      40\n      45\n    \n    \n      2\n      50\n      90\n    \n  \n\n\n\n\n\ndf.index = pd.Index(['guebin','iu','hynn'])\n#df.index = ['guebin','iu','hynn'] <- 이것도 실행 되기는 된다.\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n- 방법4: df.set_index() 를 이용하여 덮어씌운다\n\ndf=pd.DataFrame({'att':[30,40,50] , 'mid':[5,45,90]})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      5\n    \n    \n      1\n      40\n      45\n    \n    \n      2\n      50\n      90\n    \n  \n\n\n\n\n\ndf.set_index(pd.Index(['guebin','iu','hynn']))\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n(주의) 아래는 에러가 난다.\n\ndf.set_index(['guebin','iu','hynn'])\n\nKeyError: \"None of ['guebin', 'iu', 'hynn'] are in the columns\"\n\n\n\ndf.set_index([['guebin','iu','hynn']]) # 꺽쇠를 한번 더 넣어주면 에러를 피할수 있다. \n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#자료형-len-shape-for문의-반복변수",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#자료형-len-shape-for문의-반복변수",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "자료형, len, shape, for문의 반복변수",
    "text": "자료형, len, shape, for문의 반복변수\n\ndf = pd.DataFrame({'att':[30,40,50],'mid':[5,45,90]})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      5\n    \n    \n      1\n      40\n      45\n    \n    \n      2\n      50\n      90\n    \n  \n\n\n\n\n- type\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n- len\n\nlen(df) # row의 갯수 \n\n3\n\n\n- shape\n\ndf.shape \n\n(3, 2)\n\n\n- for문의 반복변수\n\nfor k in df:\n    print(k) # 딕셔너리같죠\n\natt\nmid\n\n\n\nfor k in {'att':[30,40,50],'mid':[5,45,90]}: \n    print(k)\n\natt\nmid"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#pd.series",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#pd.series",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "pd.Series",
    "text": "pd.Series\n- 2차원 ndarray가 pd.DataFrame에 대응한다면 1차원 ndarray는 pd.Series에 대응한다.\n\na=pd.Series(np.random.randn(10))\na\n\n0    0.453758\n1   -0.716270\n2   -0.167750\n3    0.089546\n4    0.874006\n5    0.401627\n6    0.204911\n7    1.042722\n8   -0.352356\n9   -1.241658\ndtype: float64\n\n\n\ntype(a)\n\npandas.core.series.Series\n\n\n\nlen(a)\n\n10\n\n\n\na.shape\n\n(10,)\n\n\n\nfor value in a: \n    print(value)\n\n0.45375797778887145\n-0.7162702753778524\n-0.1677503294060748\n0.08954572073306402\n0.8740060519863648\n0.40162700372357163\n0.20491068603376858\n1.0427224662413124\n-0.3523562215445016\n-1.2416580554177619"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#첫번째-칼럼을-선택",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#첫번째-칼럼을-선택",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "첫번째 칼럼을 선택",
    "text": "첫번째 칼럼을 선택\n- 방법1\n\ndf.att\n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법2: dict스타일\n\ndf['att']\n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법3: dict스타일\n\ndf[['att']]\n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n\ndf.att 나 df[‘att’]는 series를 리턴하고 df[[‘att’]]는 dataframe을 리턴한다.\n\n- 방법4: ndarray스타일\n\ndf.iloc[:,0] \n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법5: ndarray스타일\n\ndf.iloc[:,[0]]\n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n\ndf.iloc[:,0]은 series를 리턴하고 df.iloc[:,[0]]은 dataframe을 리턴한다.\n\n- 방법6: ndarray 스타일과 dict 스타일의 혼합\n\ndf.loc[:,'att'] \n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법7: ndarray 스타일과 dict 스타일의 혼합\n\ndf.loc[:,['att']] \n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n\ndf.loc[:,‘att’]은 series를 리턴하고 df.loc[:,[‘att’]]은 dataframe을 리턴한다.\n\n- 방법7: nparray 스타일 + bool 인덱싱\n\ndf.iloc[:,[True,False,False,False]]\n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n- 방법8: ndarray와 dict의 홉합형 + bool 인덱싱\n\ndf.loc[:,[True,False,False,False]]\n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#여러개의-칼럼을-선택",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#여러개의-칼럼을-선택",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "여러개의 칼럼을 선택",
    "text": "여러개의 칼럼을 선택\n- 방법1: dict 스타일\n\ndf[['att','fin']]\n\n\n\n\n\n  \n    \n      \n      att\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      40\n    \n    \n      202212370\n      95\n      80\n    \n    \n      202212363\n      65\n      30\n    \n    \n      202212488\n      55\n      80\n    \n    \n      202212312\n      80\n      100\n    \n    \n      202212377\n      75\n      15\n    \n    \n      202212463\n      65\n      90\n    \n    \n      202212471\n      60\n      0\n    \n    \n      202212400\n      95\n      10\n    \n    \n      202212469\n      90\n      20\n    \n    \n      202212318\n      55\n      25\n    \n    \n      202212432\n      95\n      0\n    \n    \n      202212443\n      95\n      35\n    \n    \n      202212367\n      50\n      30\n    \n    \n      202212458\n      50\n      85\n    \n    \n      202212396\n      95\n      95\n    \n    \n      202212482\n      50\n      10\n    \n    \n      202212452\n      65\n      45\n    \n    \n      202212387\n      70\n      35\n    \n    \n      202212354\n      90\n      90\n    \n  \n\n\n\n\n- 방법2: ndarray 스타일 (정수리스트로 인덱싱, 슬라이싱, 스트라이딩)\n\ndf.iloc[:,[0,1]] # 정수의 리스트를 전달하여 컬럼추출\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      202212380\n      65\n      55\n    \n    \n      202212370\n      95\n      100\n    \n    \n      202212363\n      65\n      90\n    \n    \n      202212488\n      55\n      80\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      40\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      60\n    \n    \n      202212400\n      95\n      65\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      75\n    \n    \n      202212432\n      95\n      95\n    \n    \n      202212443\n      95\n      55\n    \n    \n      202212367\n      50\n      80\n    \n    \n      202212458\n      50\n      55\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      50\n    \n    \n      202212452\n      65\n      55\n    \n    \n      202212387\n      70\n      70\n    \n    \n      202212354\n      90\n      90\n    \n  \n\n\n\n\n\ndf.iloc[:,range(2)] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      202212380\n      65\n      55\n    \n    \n      202212370\n      95\n      100\n    \n    \n      202212363\n      65\n      90\n    \n    \n      202212488\n      55\n      80\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      40\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      60\n    \n    \n      202212400\n      95\n      65\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      75\n    \n    \n      202212432\n      95\n      95\n    \n    \n      202212443\n      95\n      55\n    \n    \n      202212367\n      50\n      80\n    \n    \n      202212458\n      50\n      55\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      50\n    \n    \n      202212452\n      65\n      55\n    \n    \n      202212387\n      70\n      70\n    \n    \n      202212354\n      90\n      90\n    \n  \n\n\n\n\n\ndf.iloc[:,:2]  # 슬라이싱 , 0,1,2에서 마지막 2는 제외되고 0,1에 해당하는 것만 추출\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      202212380\n      65\n      55\n    \n    \n      202212370\n      95\n      100\n    \n    \n      202212363\n      65\n      90\n    \n    \n      202212488\n      55\n      80\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      40\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      60\n    \n    \n      202212400\n      95\n      65\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      75\n    \n    \n      202212432\n      95\n      95\n    \n    \n      202212443\n      95\n      55\n    \n    \n      202212367\n      50\n      80\n    \n    \n      202212458\n      50\n      55\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      50\n    \n    \n      202212452\n      65\n      55\n    \n    \n      202212387\n      70\n      70\n    \n    \n      202212354\n      90\n      90\n    \n  \n\n\n\n\n\ndf.iloc[:,::2]  # 스트라이딩\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      50\n    \n    \n      202212370\n      95\n      50\n    \n    \n      202212363\n      65\n      60\n    \n    \n      202212488\n      55\n      75\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      100\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      25\n    \n    \n      202212400\n      95\n      20\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      35\n    \n    \n      202212432\n      95\n      45\n    \n    \n      202212443\n      95\n      15\n    \n    \n      202212367\n      50\n      40\n    \n    \n      202212458\n      50\n      15\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      45\n    \n    \n      202212452\n      65\n      15\n    \n    \n      202212387\n      70\n      40\n    \n    \n      202212354\n      90\n      80\n    \n  \n\n\n\n\n- 방법3: ndarray 와 dict의 혼합형\n\ndf.loc[:,['att','mid']] \n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      50\n    \n    \n      202212370\n      95\n      50\n    \n    \n      202212363\n      65\n      60\n    \n    \n      202212488\n      55\n      75\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      100\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      25\n    \n    \n      202212400\n      95\n      20\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      35\n    \n    \n      202212432\n      95\n      45\n    \n    \n      202212443\n      95\n      15\n    \n    \n      202212367\n      50\n      40\n    \n    \n      202212458\n      50\n      15\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      45\n    \n    \n      202212452\n      65\n      15\n    \n    \n      202212387\n      70\n      40\n    \n    \n      202212354\n      90\n      80\n    \n  \n\n\n\n\n\ndf.loc[:,'att':'mid']  # 마지막의 mid도 포함된다. \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n    \n    \n      202212370\n      95\n      100\n      50\n    \n    \n      202212363\n      65\n      90\n      60\n    \n    \n      202212488\n      55\n      80\n      75\n    \n    \n      202212312\n      80\n      30\n      30\n    \n    \n      202212377\n      75\n      40\n      100\n    \n    \n      202212463\n      65\n      45\n      45\n    \n    \n      202212471\n      60\n      60\n      25\n    \n    \n      202212400\n      95\n      65\n      20\n    \n    \n      202212469\n      90\n      80\n      80\n    \n    \n      202212318\n      55\n      75\n      35\n    \n    \n      202212432\n      95\n      95\n      45\n    \n    \n      202212443\n      95\n      55\n      15\n    \n    \n      202212367\n      50\n      80\n      40\n    \n    \n      202212458\n      50\n      55\n      15\n    \n    \n      202212396\n      95\n      30\n      30\n    \n    \n      202212482\n      50\n      50\n      45\n    \n    \n      202212452\n      65\n      55\n      15\n    \n    \n      202212387\n      70\n      70\n      40\n    \n    \n      202212354\n      90\n      90\n      80\n    \n  \n\n\n\n\n\ndf.loc[:,'rep':] \n\n\n\n\n\n  \n    \n      \n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      55\n      50\n      40\n    \n    \n      202212370\n      100\n      50\n      80\n    \n    \n      202212363\n      90\n      60\n      30\n    \n    \n      202212488\n      80\n      75\n      80\n    \n    \n      202212312\n      30\n      30\n      100\n    \n    \n      202212377\n      40\n      100\n      15\n    \n    \n      202212463\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      25\n      0\n    \n    \n      202212400\n      65\n      20\n      10\n    \n    \n      202212469\n      80\n      80\n      20\n    \n    \n      202212318\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      45\n      0\n    \n    \n      202212443\n      55\n      15\n      35\n    \n    \n      202212367\n      80\n      40\n      30\n    \n    \n      202212458\n      55\n      15\n      85\n    \n    \n      202212396\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      45\n      10\n    \n    \n      202212452\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 방법4: bool을 이용한 인덱싱\n\ndf.iloc[:,[True,False,True,False]]\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      50\n    \n    \n      202212370\n      95\n      50\n    \n    \n      202212363\n      65\n      60\n    \n    \n      202212488\n      55\n      75\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      100\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      25\n    \n    \n      202212400\n      95\n      20\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      35\n    \n    \n      202212432\n      95\n      45\n    \n    \n      202212443\n      95\n      15\n    \n    \n      202212367\n      50\n      40\n    \n    \n      202212458\n      50\n      15\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      45\n    \n    \n      202212452\n      65\n      15\n    \n    \n      202212387\n      70\n      40\n    \n    \n      202212354\n      90\n      80\n    \n  \n\n\n\n\n\ndf.loc[:,[True,False,True,False]]\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      50\n    \n    \n      202212370\n      95\n      50\n    \n    \n      202212363\n      65\n      60\n    \n    \n      202212488\n      55\n      75\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      100\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      25\n    \n    \n      202212400\n      95\n      20\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      35\n    \n    \n      202212432\n      95\n      45\n    \n    \n      202212443\n      95\n      15\n    \n    \n      202212367\n      50\n      40\n    \n    \n      202212458\n      50\n      15\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      45\n    \n    \n      202212452\n      65\n      15\n    \n    \n      202212387\n      70\n      40\n    \n    \n      202212354\n      90\n      80"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#첫번째-행을-선택",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#첫번째-행을-선택",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "첫번째 행을 선택",
    "text": "첫번째 행을 선택\n- 방법1\n\ndf.iloc[0]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법2\n\ndf.iloc[[0]]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n- 방법3\n\ndf.iloc[0,:]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법4\n\ndf.iloc[[0],:]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n- 방법5\n\ndf.loc['202212380']\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법6\n\ndf.loc[['202212380']]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n- 방법7\n\ndf.loc['202212380',:]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법8\n\ndf.loc[['202212380'],:]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n- 방법9\n\nlen(df)\n\n20\n\n\n\n_lst = [True]+[False]*19\n\n\ndf.iloc[_lst] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n\ndf.iloc[_lst,:] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n\ndf.loc[_lst] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n\ndf.loc[_lst,:] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#여러개의-행을-선택",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#여러개의-행을-선택",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "여러개의 행을 선택",
    "text": "여러개의 행을 선택\n- 방법1\n\ndf.iloc[[0,2]] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n  \n\n\n\n\n\ndf.iloc[[0,2],:] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n  \n\n\n\n\n- 방법2\n\ndf.loc[['202212380','202212363']] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n  \n\n\n\n\n\ndf.loc[['202212380','202212363'],:] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n  \n\n\n\n\n- 그 밖의 방법들\n\ndf.iloc[::3] # 스트라이딩\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n  \n\n\n\n\n\ndf.iloc[:5]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n  \n\n\n\n\n\ndf.loc[:'202212312']\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n  \n\n\n\n\n\ndf.loc[list(df.att<80),'rep':]\n\n\n\n\n\n  \n    \n      \n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      55\n      50\n      40\n    \n    \n      202212363\n      90\n      60\n      30\n    \n    \n      202212488\n      80\n      75\n      80\n    \n    \n      202212377\n      40\n      100\n      15\n    \n    \n      202212463\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      25\n      0\n    \n    \n      202212318\n      75\n      35\n      25\n    \n    \n      202212367\n      80\n      40\n      30\n    \n    \n      202212458\n      55\n      15\n      85\n    \n    \n      202212482\n      50\n      45\n      10\n    \n    \n      202212452\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      40\n      35\n    \n  \n\n\n\n\n\ndf.loc[df.att<80,'rep':]\n\n\n\n\n\n  \n    \n      \n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      55\n      50\n      40\n    \n    \n      202212363\n      90\n      60\n      30\n    \n    \n      202212488\n      80\n      75\n      80\n    \n    \n      202212377\n      40\n      100\n      15\n    \n    \n      202212463\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      25\n      0\n    \n    \n      202212318\n      75\n      35\n      25\n    \n    \n      202212367\n      80\n      40\n      30\n    \n    \n      202212458\n      55\n      15\n      85\n    \n    \n      202212482\n      50\n      45\n      10\n    \n    \n      202212452\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      40\n      35\n    \n  \n\n\n\n\n\ndf.iloc[list(df.att<80),1:]\n\n\n\n\n\n  \n    \n      \n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      55\n      50\n      40\n    \n    \n      202212363\n      90\n      60\n      30\n    \n    \n      202212488\n      80\n      75\n      80\n    \n    \n      202212377\n      40\n      100\n      15\n    \n    \n      202212463\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      25\n      0\n    \n    \n      202212318\n      75\n      35\n      25\n    \n    \n      202212367\n      80\n      40\n      30\n    \n    \n      202212458\n      55\n      15\n      85\n    \n    \n      202212482\n      50\n      45\n      10\n    \n    \n      202212452\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      40\n      35\n    \n  \n\n\n\n\n- 아래는 에러가 난다 주의!\n\ndf.iloc[df.att<80,1:]\n\nValueError: Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#query-star",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#query-star",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "query (\\(\\star\\))",
    "text": "query (\\(\\star\\))\n- 예제1\n\ndf.query('att==90 and mid>30')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제2\n\ndf.query('att<rep and mid<fin')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n  \n\n\n\n\n- 예제3\n\ndf.query('att < rep < 80')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n  \n\n\n\n\n- 예제4\n\ndf.query('50 < att <= 90 and mid < fin')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제5\n\ndf.query(' (mid+fin)/2 >=60')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제6\n\n_mean  = df.att.mean()\n_mean \n\n73.0\n\n\n\ndf.query('att >= 73')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\ndf.query('att >= @_mean')\n# df.query('att>= _mean')은 실행 안된다.\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제7\n\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\ndf.query(\"index <= '202212354' or index=='202212387'\")\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n사실 이 기능은 시계열자료에서 꽃핀다.\n- 예제8\n\npd.date_range('20211226',periods=10)\n\nDatetimeIndex(['2021-12-26', '2021-12-27', '2021-12-28', '2021-12-29',\n               '2021-12-30', '2021-12-31', '2022-01-01', '2022-01-02',\n               '2022-01-03', '2022-01-04'],\n              dtype='datetime64[ns]', freq='D')\n\n\n\n_df=pd.DataFrame(np.random.normal(size=(10,4)),columns=list('ABCD'),index=pd.date_range('20211226',periods=10))\n_df\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      2021-12-26\n      -0.367399\n      0.925727\n      -0.378494\n      -1.597765\n    \n    \n      2021-12-27\n      -0.016530\n      1.041946\n      1.511319\n      -0.970646\n    \n    \n      2021-12-28\n      -1.556636\n      1.629024\n      -0.965807\n      0.309184\n    \n    \n      2021-12-29\n      0.554734\n      0.712753\n      0.769650\n      0.277420\n    \n    \n      2021-12-30\n      -0.897457\n      0.110547\n      1.026816\n      0.294377\n    \n    \n      2021-12-31\n      0.904037\n      -0.809864\n      0.473510\n      -0.047875\n    \n    \n      2022-01-01\n      -0.850946\n      -0.915568\n      -1.549329\n      -0.040507\n    \n    \n      2022-01-02\n      0.054391\n      -0.732693\n      0.409205\n      -1.165549\n    \n    \n      2022-01-03\n      0.053472\n      0.800553\n      -0.040499\n      -0.447199\n    \n    \n      2022-01-04\n      -0.304462\n      1.257485\n      0.888741\n      0.615561\n    \n  \n\n\n\n\n\n_df.query(\" '2021-12-29' <=  index <= '2022-01-03' \")\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      2021-12-29\n      0.554734\n      0.712753\n      0.769650\n      0.277420\n    \n    \n      2021-12-30\n      -0.897457\n      0.110547\n      1.026816\n      0.294377\n    \n    \n      2021-12-31\n      0.904037\n      -0.809864\n      0.473510\n      -0.047875\n    \n    \n      2022-01-01\n      -0.850946\n      -0.915568\n      -1.549329\n      -0.040507\n    \n    \n      2022-01-02\n      0.054391\n      -0.732693\n      0.409205\n      -1.165549\n    \n    \n      2022-01-03\n      0.053472\n      0.800553\n      -0.040499\n      -0.447199\n    \n  \n\n\n\n\n\n_df.query(\" '2021-12-29' <=  index <= '2022-01-03' and A+B<C  \")\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      2021-12-30\n      -0.897457\n      0.110547\n      1.026816\n      0.294377\n    \n    \n      2021-12-31\n      0.904037\n      -0.809864\n      0.473510\n      -0.047875\n    \n    \n      2022-01-01\n      -0.850946\n      -0.915568\n      -1.549329\n      -0.040507\n    \n    \n      2022-01-02\n      0.054391\n      -0.732693\n      0.409205\n      -1.165549\n    \n  \n\n\n\n\n- query가 만능은 아니다.\n\ndf.columns = pd.Index(['att score', 'rep score', 'mid score', 'fin score'])\n\n\ndf.query(\" att score < 90 \")\n# df.loc[df['att score'] < 90,:] <-- 이렇게 구현하면 된다! (아니면 변수이름을 바꿔주는 코드를 짜든가)\n\nSyntaxError: invalid syntax (<unknown>, line 1)"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#전치",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#전치",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "전치",
    "text": "전치\n\nndarray = np.arange(2*3).reshape(2,3)\ndf = pd.DataFrame(ndarray)\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\nndarray.T\n\narray([[0, 3],\n       [1, 4],\n       [2, 5]])\n\n\n\ndf.T\n\n\n\n\n\n  \n    \n      \n      0\n      1\n    \n  \n  \n    \n      0\n      0\n      3\n    \n    \n      1\n      1\n      4\n    \n    \n      2\n      2\n      5"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#합",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#합",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "합",
    "text": "합\n\nndarray.sum(axis=0)\n\narray([3, 5, 7])\n\n\n\ndf.sum(axis=0)\n\n0    3\n1    5\n2    7\ndtype: int64\n\n\n\nndarray.sum(axis=1)\n\narray([ 3, 12])\n\n\n\ndf.sum(axis=1)\n\n0     3\n1    12\ndtype: int64"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#cumsum",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#cumsum",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "cumsum",
    "text": "cumsum\n\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\nndarray.cumsum(axis=0)\n\narray([[0, 1, 2],\n       [3, 5, 7]])\n\n\n\ndf.cumsum(axis=0)\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      5\n      7\n    \n  \n\n\n\n\n\nndarray.cumsum(axis=1)\n\narray([[ 0,  1,  3],\n       [ 3,  7, 12]])\n\n\n\ndf.cumsum(axis=1)\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      3\n    \n    \n      1\n      3\n      7\n      12"
  },
  {
    "objectID": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#형태변환",
    "href": "posts/Day1/03_Pandas/2023-01-30-Lesson8.html#형태변환",
    "title": "Lesson 08: pandas 짧게정리",
    "section": "형태변환",
    "text": "형태변환\n\nndarray.tolist()\n\n[[0, 1, 2], [3, 4, 5]]\n\n\n\ndf.to_dict()\n\n{0: {0: 0, 1: 3}, 1: {0: 1, 1: 4}, 2: {0: 2, 1: 5}}\n\n\n\ndf.to_numpy()\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\ndf.to_numpy().tolist()\n\n[[0, 1, 2], [3, 4, 5]]"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#차원-배열과-연립-1차-방정식",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#차원-배열과-연립-1차-방정식",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "2차원 배열과 연립 1차 방정식",
    "text": "2차원 배열과 연립 1차 방정식\n- 아래의 연립방정식 고려\n\\(\\begin{cases} y+z+w = 3 \\\\ x+z+w = 3 \\\\ x+y+w = 3 \\\\ x+y+z = 3 \\end{cases}\\)\n- 행렬표현?\n\\(\\begin{bmatrix} 0 & 1 & 1 & 1 \\\\ 1 & 0 & 1 & 1 \\\\ 1 & 1 & 0 & 1 \\\\ 1 & 1 & 1 & 0 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ z \\\\ w \\end{bmatrix} = \\begin{bmatrix} 3 \\\\ 3 \\\\ 3 \\\\ 3 \\end{bmatrix}\\)\n- 풀이\n\nA = np.array([[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]])\nA\n\narray([[0, 1, 1, 1],\n       [1, 0, 1, 1],\n       [1, 1, 0, 1],\n       [1, 1, 1, 0]])\n\n\n\nb= np.array([3,3,3,3]).reshape(4,1)\nb\n\narray([[3],\n       [3],\n       [3],\n       [3]])\n\n\n\nnp.linalg.inv(A) @ b \n\narray([[1.],\n       [1.],\n       [1.],\n       [1.]])\n\n\n- 다른풀이\nb를 아래와 같이 만들어도 된다.\n\nb=np.array([3,3,3,3])\nb\n\narray([3, 3, 3, 3])\n\n\n\nb.shape # b.shape은 길이가 1인 튜플로 나온다. \n\n(4,)\n\n\n\nnp.linalg.inv(A) @ b \n\narray([1., 1., 1., 1.])"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#의-유연성",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#의-유연성",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "@의 유연성",
    "text": "@의 유연성\n- 엄밀하게는 아래의 행렬곱이 가능하다. - (2,2) @ (2,1) => (2,1) - (1,2) @ (2,2) => (1,2)\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(2,1) \nA@b\n\narray([[ 5],\n       [11]])\n\n\n\nA.shape, b.shape, (A@b).shape\n\n((2, 2), (2, 1), (2, 1))\n\n\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(1,2) \nb@A \n\narray([[ 7, 10]])\n\n\n\nA.shape, b.shape, (b@A).shape\n\n((2, 2), (1, 2), (1, 2))\n\n\n- 당연히 아래는 성립안한다.\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(2,1) \nb@A\n\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 1)\n\n\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(1,2) \nA@b\n\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)\n\n\n- 아래는 어떨까? 계산가능할까? \\(\\to\\) 모두 계산가능! - (2,) @ (2,2) = (2,) - (2,2) @ (2,) = (2,)\n\nA = np.array([1,2,3,4]).reshape(2,2)\nb = np.array([1,2]) \nA@b\n\narray([ 5, 11])\n\n\n\nA.shape, b.shape, (A@b).shape \n\n((2, 2), (2,), (2,))\n\n\n\nb를 마치 (2,1)처럼 해석하여 행렬곱하고 결과는 다시 (2,) 로 만든것 같다.\n\n\nb@A\n\narray([ 7, 10])\n\n\n\nA.shape, b.shape, (b@A).shape \n\n((2, 2), (2,), (2,))\n\n\n\n이때는 \\(b\\)를 마치 (1,2)처럼 해석하여 행렬곱하고 결과는 다시 (2,)로 만든것 같다.\n\n- 아래는 어떠할까?\n\nb1 = np.array([1,2,3,4]) \nb2 = np.array([1,2,3,4]) \nb1@b2 \n\n30\n\n\n\nb1.shape, b2.shape, (b1@b2).shape \n\n((4,), (4,), ())\n\n\n\n(1,4) @ (4,1) = (1,1) 로 생각\n\n- 즉 위는 아래와 같이 해석하고 행렬곱한것과 결과가 같다.\n\nb1 = np.array([1,2,3,4]).reshape(1,4) \nb2 = np.array([1,2,3,4]).reshape(4,1) \nb1@b2 \n\narray([[30]])\n\n\n\nb1.shape, b2.shape, (b1@b2).shape \n\n((1, 4), (4, 1), (1, 1))\n\n\n- 때로는 (4,1) @ (1,4)와 같은 계산결과를 얻고 싶을 수 있는데 이때는 차원을 명시해야함\n\nb1 = np.array([1,2,3,4]).reshape(4,1) \nb2 = np.array([1,2,3,4]).reshape(1,4) \nb1@b2 \n\narray([[ 1,  2,  3,  4],\n       [ 2,  4,  6,  8],\n       [ 3,  6,  9, 12],\n       [ 4,  8, 12, 16]])"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#차원",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#차원",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "차원",
    "text": "차원\n- 넘파이배열의 차원은 .shape 으로 확인가능\n- 아래는 모두 미묘하게 다르다.\n\na=np.array(3.14) # 스칼라, 0d array \na, a.shape\n\n(array(3.14), ())\n\n\n\na=np.array([3.14]) # 벡터, 1d array \na, a.shape\n\n(array([3.14]), (1,))\n\n\n\na=np.array([[3.14]]) # 매트릭스, 2d array \na, a.shape\n\n(array([[3.14]]), (1, 1))\n\n\n\na=np.array([[[3.14]]]) # 텐서, 3d array \na, a.shape\n\n(array([[[3.14]]]), (1, 1, 1))"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#np.concatenate",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#np.concatenate",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "np.concatenate",
    "text": "np.concatenate\n- 기본예제\n\na=np.array([1,2]) \nb=-a\n\n\nnp.concatenate([a,b]) \n\narray([ 1,  2, -1, -2])\n\n\n- 응용\n\na=np.array([1,2])\nb=-a \nc=np.array([3,4,5])\n\n\nnp.concatenate([a,b,c])\n\narray([ 1,  2, -1, -2,  3,  4,  5])\n\n\n\n여기까진 딱히 칸캐터네이트의 메리트가 없어보임\n리스트였다면 a+b+c 하면 되는 기능이니까?\n\n- 2d array에 적용해보자.\n\na=np.arange(4).reshape(2,2) \nb=-a\n\n\nnp.concatenate([a,b]) \n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 0, -1],\n       [-2, -3]])\n\n\n- 옆으로 붙일려면?\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 0,  1,  0, -1],\n       [ 2,  3, -2, -3]])\n\n\n- 위의 코드에서 axis=1 이 뭐지? axis=0,2 등을 치면 결과가 어떻게 될까?\n\nnp.concatenate([a,b],axis=0)\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 0, -1],\n       [-2, -3]])\n\n\n\n이건 그냥 np.concatenate([a,b])와 같다.\nnp.concatenate([a,b])는 np.concatenate([a,b],axis=0)의 생략버전이군?\n\n\nnp.concatenate([a,b],axis=2)\n\nAxisError: axis 2 is out of bounds for array of dimension 2\n\n\n\n이런건 없다.\n\n- axis의 의미가 뭔지 궁금함. 좀 더 예제를 살펴보자.\n\na=np.array(range(2*3*4)).reshape(2,3,4)\na\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nb=-a\nb\n\narray([[[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=0) \n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=1) \n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=2) \n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\n이번에는 axis=2까지 된다?\n\n\nnp.concatenate([a,b],axis=3) \n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\naxis=3까지는 안된다?\n\n- 뭔가 나름의 방식으로 합쳐지는데 원리가 뭘까?\n(분석1) np.concatenate([a,b],axis=0)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=0).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\n첫번째차원이 바뀌었다 => 첫번째 축이 바뀌었다 => axis=0 (파이썬은 0부터 시작하니까!)\n\n(분석2) np.concatenate([a,b],axis=1)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\n두번째차원이 바뀌었다 => 두번째 축이 바뀌었다 => axis=1\n\n(분석3) np.concatenate([a,b],axis=2)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n\n세번째차원이 바뀌었다 => 세번째 축이 바뀌었다 => axis=2\n\n(분석4) np.concatenate([a,b],axis=3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=3).shape\n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\n네번째차원이 없다 => 네번째 축이 없다 => axis=3으로 하면 에러가 난다.\n\n(보너스1)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-1)\n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n\n마지막 차원이 바뀌었다 => 마지막 축이 바뀌었다 => axis = -1\n\n(보너스2)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-2)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\n마지막에서 2번째 차원이 바뀌었다 => 마지막에서 2번째 축이 바뀌었다 => axis = -2\n\n(보너스3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-3)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-3).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\n마지막에서 3번째 차원이 바뀌었다 => 마지막에서 3번째 축이 바뀌었다 => axis = -3\n\n(보너스3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-4)\n\nAxisError: axis -4 is out of bounds for array of dimension 3\n\n\n\n마지막에서 4번째 차원은 없다 => 마지막에서 4번째 축이 없다 => axis = -4는 에러가 난다.\n\n- 0차원은 축이 없으므로 concatenate를 쓸 수 없다.\n\na= np.array(1)\nb= np.array(-1) \n\n\na.shape, b.shape\n\n((), ())\n\n\n\nnp.concatenate([a,b])\n\nValueError: zero-dimensional arrays cannot be concatenated\n\n\n- 꼭 a,b가 같은 차원일 필요는 없다.\n\na=np.array(range(4)).reshape(2,2) \nb=np.array(range(2)).reshape(2,1)  \n\n\nnp.concatenate([a,b],axis=1)\n\narray([[0, 1, 0],\n       [2, 3, 1]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=1).shape\n\n((2, 2), (2, 1), (2, 3))"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#np.stack",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#np.stack",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "np.stack",
    "text": "np.stack\n- 혹시 아래가 가능할까?\n\n(3,) 결합 (3,) => (3,2)\n\n\na=np.array([1,2,3])\nb=-a\n\n\na,b\n\n(array([1, 2, 3]), array([-1, -2, -3]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\nAxisError: axis 1 is out of bounds for array of dimension 1\n\n\n\n불가능\n\n- 아래와 같이 하면 해결가능\n\na=np.array([1,2,3]).reshape(3,1) \nb=-a\n\n\na,b\n\n(array([[1],\n        [2],\n        [3]]),\n array([[-1],\n        [-2],\n        [-3]]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n\n분석: (3) (3) => (3,1) (3,1) => (3,1) concat (3,1)\n\n- 위의 과정을 줄여서 아래와 같이 할 수 있다.\n\na=np.array([1,2,3])\nb=-a\n\n\nnp.stack([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n- 아래도 가능\n\nnp.stack([a,b],axis=0)\n\narray([[ 1,  2,  3],\n       [-1, -2, -3]])\n\n\n- 분석해보고 외우자\n(분석1)\n\na=np.array([1,2,3])\nb=-a\n\n\na.shape, b.shape, np.stack([a,b],axis=0).shape\n\n((3,), (3,), (2, 3))\n\n\n\n\n\n=> 첫 위치에 축을 추가 (axis=0) => (1,3) (1,3) => (2,3)\n\n\n\n(분석2)\n\na=np.array([1,2,3])\nb=-a\n\n\na.shape, b.shape, np.stack([a,b],axis=1).shape\n\n((3,), (3,), (3, 2))\n\n\n\n\n\n=> 두 위치에 축을 추가 (axis=1) => (3,1) (3,1) => (3,2)\n\n\n\n- 고차원예제\n\na=np.arange(3*4*5).reshape(3,4,5) \nb=-a\n\n\na.shape, b.shape\n\n((3, 4, 5), (3, 4, 5))\n\n\n\nnp.stack([a,b],axis=0).shape # (3,4,5) => (1,3,4,5) // 첫 위치에 축이 추가되고 스택 \n\n(2, 3, 4, 5)\n\n\n\nnp.stack([a,b],axis=1).shape # (3,4,5) => (3,1,4,5) // 두번째 위치에 축이 추가되고 스택 \n\n(3, 2, 4, 5)\n\n\n\nnp.stack([a,b],axis=2).shape # (3,4,5) => (3,4,1,5) // 세번째 위치에 축이 추가되고 스택 \n\n(3, 4, 2, 5)\n\n\n\nnp.stack([a,b],axis=3).shape # (3,4,5) => (3,4,5,1) // 네번째 위치에 축이 추가되고 스택 \n\n(3, 4, 5, 2)\n\n\n\nnp.stack([a,b],axis=-1).shape # axis=-1 <=> axis=3 \n\n(3, 4, 5, 2)\n\n\n\nnp.stack([a,b],axis=-2).shape # axis=-2 <=> axis=2\n\n(3, 4, 2, 5)\n\n\nnp.concatenate 는 축의 총 갯수를 유지하면서 결합, np.stack은 축의 갯수를 하나 증가시키면서 결합"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#sum",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#sum",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "sum",
    "text": "sum\n- 1차원\n\na = np.array([1,2,3]) \na\n\narray([1, 2, 3])\n\n\n\na.sum()\n\n6\n\n\n\na.sum(axis=0)\n\n6\n\n\n- 2차원\n\na=np.array(range(6)).reshape(2,3)\na\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\na.sum() # 전체합\n\n15\n\n\n\na.sum(axis=0) \n\narray([3, 5, 7])\n\n\n\na.sum(axis=1) \n\narray([ 3, 12])\n\n\n- 2차원 결과 분석\n\na.shape, a.sum(axis=0).shape\n\n((2, 3), (3,))\n\n\n\n첫번째 축이 삭제됨 => axis=0\n\n\na.shape, a.sum(axis=1).shape\n\n((2, 3), (2,))\n\n\n\n두번째 축이 삭제됨 => axis=1\n\n- 연습\n\na=np.array(range(10)).reshape(5,2) \na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n(문제1) 1열의 합, 2열의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) => (2,) 로 나와야 한다. (그럼 첫번째 축이 삭제되어야 하네?)\n\na.sum(axis=0)\n\narray([20, 25])\n\n\n(문제2) 1행의 합, 2행의 합, … , 5행의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) => (5,)로 나와야 한다. (그럼 두번째 축이 삭제되어야 하네?)\n\na.sum(axis=1)\n\narray([ 1,  5,  9, 13, 17])\n\n\n(문제3) a의 모든원소의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) => () 로 나와야 한다. (첫번째축, 두번째축이 모두 삭제되어야 하네?)\n\na.sum(axis=(0,1))\n\n45\n\n\n\na.sum() # 즉 a.sum(axis=(0,1))이 디폴트값임 \n\n45"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#mean-std-max-min-prod",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#mean-std-max-min-prod",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "mean, std, max, min, prod",
    "text": "mean, std, max, min, prod\n- 모두 sum이랑 유사한 논리\n\na=np.array(range(10)).reshape(5,2)\na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n\na.mean(axis=0), a.std(axis=0), a.max(axis=0), a.min(axis=0), a.prod(axis=0)\n\n(array([4., 5.]),\n array([2.82842712, 2.82842712]),\n array([8, 9]),\n array([0, 1]),\n array([  0, 945]))\n\n\n\na.mean(axis=1), a.std(axis=1), a.max(axis=1), a.min(axis=1), a.prod(axis=1)\n\n(array([0.5, 2.5, 4.5, 6.5, 8.5]),\n array([0.5, 0.5, 0.5, 0.5, 0.5]),\n array([1, 3, 5, 7, 9]),\n array([0, 2, 4, 6, 8]),\n array([ 0,  6, 20, 42, 72]))\n\n\n- 참고로 std는 분포를 n으로 나눈다.\n\na=np.array([1,2,3,4])\na.std()\n\n1.118033988749895\n\n\n\nnp.sqrt(sum((a-a.mean())**2)/4)\n\n1.118033988749895\n\n\n- 분모를 n-1로 나눌려면?\n\na=np.array([1,2,3,4])\na.std(ddof=1)\n\n1.2909944487358056\n\n\n\nnp.sqrt(sum((a-a.mean())**2)/3)\n\n1.2909944487358056"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#argmax-argmin",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#argmax-argmin",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "argmax, argmin",
    "text": "argmax, argmin\n- 1차원\n\na= np.array([1,-2,3,10,4])\na\n\narray([ 1, -2,  3, 10,  4])\n\n\n\na.argmax() # 가장 큰 값이 위치한 원소의 인덱스를 리턴 \n\n3\n\n\n\na.argmin() # 가장 작은 값이 위치한 원소의 인덱스를 리턴 \n\n1\n\n\n- 2차원\n\nnp.random.seed(43052)\na=np.random.randn(4*5).reshape(4,5)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368,  0.23778744],\n       [ 0.35595116, -1.66307542, -1.38277318, -1.92684484, -1.4862163 ],\n       [ 0.00692519, -0.03488725, -0.34357323,  0.70895648, -1.55100608],\n       [ 1.34565583, -0.05654272, -0.83017342, -1.46395159, -0.35459593]])\n\n\n\na.argmin(), a.min()\n\n(8, -1.9268448358915802)\n\n\n\na.argmax(), a.max()\n\n(15, 1.3456558341738827)\n\n\n\na.argmin(axis=0), a.argmin(axis=1)\n\n(array([2, 1, 1, 1, 2]), array([4, 3, 4, 3]))\n\n\n\na.argmax(axis=0), a.argmax(axis=1)\n\n(array([3, 0, 0, 2, 0]), array([2, 0, 3, 0]))"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#cumsum-cumprod",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#cumsum-cumprod",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "cumsum, cumprod",
    "text": "cumsum, cumprod\n- 1차원\n\na=np.array([1,2,3,4])\na\n\narray([1, 2, 3, 4])\n\n\n\na.cumsum()\n\narray([ 1,  3,  6, 10])\n\n\n\na.cumprod()\n\narray([ 1,  2,  6, 24])\n\n\n- 2차원\n\na=np.array(range(3*4)).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\na.cumsum(axis=0), a.cumsum(axis=1)\n\n(array([[ 0,  1,  2,  3],\n        [ 4,  6,  8, 10],\n        [12, 15, 18, 21]]),\n array([[ 0,  1,  3,  6],\n        [ 4,  9, 15, 22],\n        [ 8, 17, 27, 38]]))\n\n\n\na.cumprod(axis=0), a.cumprod(axis=1)\n\n(array([[  0,   1,   2,   3],\n        [  0,   5,  12,  21],\n        [  0,  45, 120, 231]]),\n array([[   0,    0,    0,    0],\n        [   4,   20,  120,  840],\n        [   8,   72,  720, 7920]]))"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#diff",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#diff",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "diff",
    "text": "diff\n- 1차차분\n\na=np.array([1,2,4,6,7])\na\n\narray([1, 2, 4, 6, 7])\n\n\n\nnp.diff(a)\n\narray([1, 2, 2, 1])\n\n\n- 2차차분\n\nnp.diff(np.diff(a))\n\narray([ 1,  0, -1])\n\n\n- prepend, append\n\na=np.array([1,2,4,6,7])\na\n\narray([1, 2, 4, 6, 7])\n\n\n\nnp.diff(a,prepend=100)\n#np.diff(np.array([100]+a.tolist()) )\n\narray([-99,   1,   2,   2,   1])\n\n\n\n[1,2,4,6,7] -> [100,1,2,3,4,6] -> np.diff\n\n\nnp.diff(a,append=100)\n#np.diff(np.array(a.tolist()+[100]) )\n\narray([ 1,  2,  2,  1, 93])\n\n\n(예제) a=[1,2,4,6,7]의 앞에 1을 추가하여 차분하라.\n\nnp.diff(a,prepend=a[0])\n#np.diff(a,prepend=1)\n\narray([0, 1, 2, 2, 1])\n\n\n(예제) a=[1,2,4,6,7]의 뒤에 7을 추가하여 차분하라.\n\nnp.diff(a,append=a[-1])\n#np.diff(a,append=7)\n\narray([1, 2, 2, 1, 0])\n\n\n- 2차원 array의 차분\n\na=np.arange(24).reshape(4,6)\na\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\nnp.diff(a,axis=0) \n\narray([[6, 6, 6, 6, 6, 6],\n       [6, 6, 6, 6, 6, 6],\n       [6, 6, 6, 6, 6, 6]])\n\n\n\nnp.diff(a,axis=1) \n\narray([[1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1]])"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#plt.plot",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#plt.plot",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "plt.plot",
    "text": "plt.plot\n- 기본그림\n\nplt.plot([1,2,3],[3,4,5],'.')\n\n\n\n\n\nplt.plot(np.array([1,2,3]),np.array([3,4,5]),'.')\n\n\n\n\n- 예제들\n\nt=np.linspace(-6,6,100)\nx=np.sin(t)\ny=np.cos(t)\n\n\nplt.plot(t,x) \n\n\n\n\n\nplt.plot(t,y) \n\n\n\n\n\nplt.plot(t,x) \nplt.plot(t,y)\n\n\n\n\n\nplt.plot(t,x) \nplt.plot(t,y,'.')\n\n\n\n\n\nplt.plot(t,x) \nplt.plot(t,y,'--')"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#plt.hist",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson7.html#plt.hist",
    "title": "Lesson 07: numpy 공부 3단계 ~ 5단계",
    "section": "plt.hist",
    "text": "plt.hist\n\nX = np.random.randn(1000) \nY = np.random.rand(1000) \n\n\nplt.hist(X)\n\n(array([ 23.,  59., 134., 195., 233., 180., 111.,  45.,  14.,   6.]),\n array([-2.50630325, -1.93388828, -1.3614733 , -0.78905833, -0.21664336,\n         0.35577162,  0.92818659,  1.50060157,  2.07301654,  2.64543152,\n         3.21784649]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n\nplt.hist(Y)\n\n(array([107.,  95.,  79., 104., 117., 106., 101., 110.,  91.,  90.]),\n array([0.00168942, 0.10132944, 0.20096946, 0.30060948, 0.4002495 ,\n        0.49988951, 0.59952953, 0.69916955, 0.79880957, 0.89844958,\n        0.9980896 ]),\n <BarContainer object of 10 artists>)"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#선언",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#선언",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "선언",
    "text": "선언\n\na=np.array([1,2,3]) # list를 만들고 ndarray화 시킴 \nl=[1,2,3]\n\n\n기본연산 브로드캐스팅\n\na+1 ## [1,2,3] + 1 = [2,3,4]\n\narray([2, 3, 4])\n\n\n\nl+1\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n\na*2\n\narray([2, 4, 6])\n\n\n\nl*2\n\n[1, 2, 3, 1, 2, 3]\n\n\n\na/2\n\narray([0.5, 1. , 1.5])\n\n\n\nl/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n\na**2\n\narray([1, 4, 9])\n\n\n\nl**2\n\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n\n\n\na%2 # %2 = 2로 나눈 나머지를 리턴 a=[1,2,3] \n\narray([1, 0, 1])\n\n\n\nl%2\n\nTypeError: unsupported operand type(s) for %: 'list' and 'int'"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#기타수학연산지원",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#기타수학연산지원",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "기타수학연산지원",
    "text": "기타수학연산지원\n\nnp.sqrt(a), np.sqrt(l)\n\n(array([1.        , 1.41421356, 1.73205081]),\n array([1.        , 1.41421356, 1.73205081]))\n\n\n\nnp.log(a), np.log(l)\n\n(array([0.        , 0.69314718, 1.09861229]),\n array([0.        , 0.69314718, 1.09861229]))\n\n\n\nnp.exp(a), np.exp(l)\n\n(array([ 2.71828183,  7.3890561 , 20.08553692]),\n array([ 2.71828183,  7.3890561 , 20.08553692]))\n\n\n\nnp.sin(a), np.sin(l)\n\n(array([0.84147098, 0.90929743, 0.14112001]),\n array([0.84147098, 0.90929743, 0.14112001]))"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#인덱싱-1차원",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#인덱싱-1차원",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "인덱싱 1차원",
    "text": "인덱싱 1차원\n- 선언\n\nl=[11,22,33,44,55,66] \na=np.array(l) \n\n- 인덱스로 접근\n\nl[0],l[1],l[2],l[3],l[-2],l[-1]\n\n(11, 22, 33, 44, 55, 66)\n\n\n\na[0],a[1],a[2],a[3],a[-2],a[-1]\n\n(11, 22, 33, 44, 55, 66)\n\n\n- : 이용 (슬라이싱)\n\nl[2:4] # index 2에서 시작, index 4는 포함하지 않음 \n\n[33, 44]\n\n\n\na[2:4] \n\narray([33, 44])\n\n\n- 정수배열에 의한 인덱싱\n\na\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na[[0,2,4]] # index=0, index=2, index=4 에 해당하는 원소를 뽑고 싶다 \n\narray([11, 33, 55])\n\n\n\nl[[0,2,4]] # 리스트는 불가능 \n\nTypeError: list indices must be integers or slices, not list\n\n\n- 부울값에 의한 인덱싱\n\na\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na[[True,False,True,False,True,False]] \n\narray([11, 33, 55])\n\n\n응용하면?\n\na < 33 \n\narray([ True,  True, False, False, False, False])\n\n\n\na[a<33]\n\narray([11, 22])\n\n\n리스트는 불가능\n\nl<33 # 여기에서부터 불가능 \n\nTypeError: '<' not supported between instances of 'list' and 'int'\n\n\n\nl[[True,False,True,False,True,False]] # 이것도 불가능 \n\nTypeError: list indices must be integers or slices, not list"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#인덱싱-2차원",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#인덱싱-2차원",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "인덱싱 2차원",
    "text": "인덱싱 2차원\n- 중첩리스트와 2차원 np.array 선언\n\nA = [[1,2,3,4],[-1,-2,-3,-4],[5,6,7,8],[-5,-6,-7,-8]]\nA2 = np.array(A)\n\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA\n\n[[1, 2, 3, 4], [-1, -2, -3, -4], [5, 6, 7, 8], [-5, -6, -7, -8]]\n\n\n- A의 원소 인덱싱\n\nA[0][0] # (1,1)의 원소 \n\n1\n\n\n\nA[1][2] # (2,3)의 원소 \n\n-3\n\n\n\nA[-1][0] # (4,1)의 원소 \n\n-5\n\n\n- A2의 원소 인덱싱\n\nA2[0][0] # (1,1)의 원소 \n\n1\n\n\n\nA2[1][2] # (2,3)의 원소 \n\n-3\n\n\n\nA2[-1][0] # (4,1)의 원소 \n\n-5\n\n\n- A2에서만 되는 기술 (넘파이에서 제시하는 신기술, R에서는 기본적으로 쓰던것, 이중list는 불가능)\n\nA2[0,0] # (1,1)의 원소 \n\n1\n\n\n\nA2[1,2] # (2,3)의 원소 \n\n-3\n\n\n\nA2[-1,0] # (4,1)의 원소 \n\n-5\n\n\n- 정수배열에 의한 인덱싱 & 슬라이싱!\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA2[0,0:2] # 1행1열, 1행2열 \n\narray([1, 2])\n\n\n\nA2[0,:] # 1행 \n\narray([1, 2, 3, 4])\n\n\n\nA2[0] # 1행\n\narray([1, 2, 3, 4])\n\n\n\nA2[[0,2],:] # 1행, 3행 \n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[[0,2]] # 1행, 3행 \n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[:,0] # 1열 \n\narray([ 1, -1,  5, -5])\n\n\n\nA2[:,[0]] # 1열 \n\narray([[ 1],\n       [-1],\n       [ 5],\n       [-5]])\n\n\n\nA2[:,[0,2]] # 1열, 3열\n\narray([[ 1,  3],\n       [-1, -3],\n       [ 5,  7],\n       [-5, -7]])\n\n\n\nA2[0:2,[0,2]] # 1행~2행 //  1열,3열 \n\narray([[ 1,  3],\n       [-1, -3]])"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#차원-배열의-선언",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#차원-배열의-선언",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "1차원 배열의 선언",
    "text": "1차원 배열의 선언\n- 리스트나 튜플을 선언하고 형변환\n\nnp.array((1,2,3)) # 튜플->넘파이어레이 \n\narray([1, 2, 3])\n\n\n\nnp.array([1,2,3]) # 리스트 ->넘파이어레이 \n\narray([1, 2, 3])\n\n\n- range()를 이용해서 선언하고 형변환\n\nnp.array(range(10)) # range(10) -> 넘파이어레이 \n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n- np.zeros, np.ones\n\nnp.zeros(3) \n\narray([0., 0., 0.])\n\n\n\nnp.ones(4)\n\narray([1., 1., 1., 1.])\n\n\n- np.linspace\n\nnp.linspace(0,1,12) # 0에서 시작하고 1에서 끝남 (양끝점 모두 포함)\n\narray([0.        , 0.09090909, 0.18181818, 0.27272727, 0.36363636,\n       0.45454545, 0.54545455, 0.63636364, 0.72727273, 0.81818182,\n       0.90909091, 1.        ])\n\n\n\nlen(np.linspace(0,1,12)) # 길이는 12\n\n12\n\n\n- np.arange\n\nnp.arange(5) # np.array(range(5))\n\narray([0, 1, 2, 3, 4])\n\n\n\nnp.arange(1,6) # np.array(range(1,6))\n\narray([1, 2, 3, 4, 5])"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#reshape",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#reshape",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "reshape",
    "text": "reshape\n- reshape: ndarray의 특수한 기능\n\na=np.array([11,22,33,44,55,66])\na ## 길이가 6인 벡터 \n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na.reshape(2,3) ## (2,3) matrix 라고 생각해도 무방 \n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\nnote: reshape은 a자체를 변화시키는것은 아님\n\na # a는 그대로 있음 \n\narray([11, 22, 33, 44, 55, 66])\n\n\n\nb= a.reshape(2,3) # a를 reshape한 결과를 b에 저장 \nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\na # a는 여전히 그대로 있음\n\narray([11, 22, 33, 44, 55, 66])\n\n\n- 다시 b를 a처럼 바꾸고 싶다\n\nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\nb.reshape(6) # b는 (2,3) matrix , 그런데 이것을 길이가 6인 벡터로 만들고 싶다. \n\narray([11, 22, 33, 44, 55, 66])\n\n\n- reshape with -1\n\na=np.arange(24) # np.array(range(24))\na\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.reshape(2,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(3,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15],\n       [16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(4,-1)\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(5,-1)\n\nValueError: cannot reshape array of size 24 into shape (5,newaxis)\n\n\n\na.reshape(6,-1)\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23]])\n\n\n\na.reshape(7,-1)\n\nValueError: cannot reshape array of size 24 into shape (7,newaxis)\n\n\n\na.reshape(8,-1)\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14],\n       [15, 16, 17],\n       [18, 19, 20],\n       [21, 22, 23]])\n\n\n\na.reshape(12,-1)\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb= a.reshape(12,-1)\nb\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb.reshape(-1) # b를 다시 길이가 24인 벡터로!\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#차원-배열의-선언-1",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#차원-배열의-선언-1",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "2차원 배열의 선언",
    "text": "2차원 배열의 선언\n\nnp.zeros((3,3))\n\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\nnp.ones((3,3))\n\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n\n\n\nnp.eye(3)\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\n\nnp.diag([1,2,3,-1])\n\narray([[ 1,  0,  0,  0],\n       [ 0,  2,  0,  0],\n       [ 0,  0,  3,  0],\n       [ 0,  0,  0, -1]])"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#랜덤으로-배열-생성",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#랜덤으로-배열-생성",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "랜덤으로 배열 생성",
    "text": "랜덤으로 배열 생성\n\nnp.random.randn(10) # 표쥰정규분포에서 10개를 뽑음 \n\narray([ 0.27184979, -0.4540305 ,  0.24538219, -3.11389327,  1.06478234,\n        0.12051154,  0.01503231, -0.06744028,  2.30710253,  0.78840453])\n\n\n\nnp.random.rand(10) # 0~1사이에서 10개를 뽑음\n\narray([0.67729671, 0.19584606, 0.4564896 , 0.9308976 , 0.49080792,\n       0.03410752, 0.47480477, 0.44519947, 0.20608611, 0.85576604])\n\n\n\nnp.random.randn(4).reshape(2,2) # 표준정규분포에서 4개를 뽑고 (2,2) ndarray로 형태변환 \n\narray([[-0.97378852,  0.5250826 ],\n       [-0.97400213, -0.59600022]])\n\n\n\nnp.random.rand(4).reshape(2,2) # 0~1 4개를 뽑고 (2,2) ndarray로 형태변환 \n\narray([[0.03708309, 0.56122376],\n       [0.80934488, 0.65723348]])"
  },
  {
    "objectID": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#행렬관련기능",
    "href": "posts/Day1/02_Numpy/2023-01-30-Lesson6.html#행렬관련기능",
    "title": "Lesson 06: numpy 공부 1단계 ~ 2단계",
    "section": "행렬관련기능",
    "text": "행렬관련기능\n\nA=np.arange(4).reshape(2,2) \nA\n\narray([[0, 1],\n       [2, 3]])\n\n\n\nA.T # .T는 전치행렬을 구해줌 \n\narray([[0, 2],\n       [1, 3]])\n\n\n\nnp.linalg.inv(A) # np.linalg.inv는 역행렬을 구해주는 함수 \n\narray([[-1.5,  0.5],\n       [ 1. ,  0. ]])\n\n\n\nA @ np.linalg.inv(A) # @는 행렬곱을 수행 \n\narray([[1., 0.],\n       [0., 1.]])"
  },
  {
    "objectID": "3_2.html",
    "href": "3_2.html",
    "title": "Chap 8. 고차원 자료 시각화",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nFeb 1, 2023\n\n\nLesson 16: 고차원 자료의 시각화 (with plotnine)\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 17: 아이스크림을 많이 먹으면 걸리는 병\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 18: FIFA23 자료분석\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 19: 심슨의 역설\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "1_3.html",
    "href": "1_3.html",
    "title": "Chap 3. Pandas",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 30, 2023\n\n\nLesson 08: pandas 짧게정리\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "3_1.html",
    "href": "3_1.html",
    "title": "Chap 7. Data Wrangling",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nFeb 1, 2023\n\n\nLesson 14: groupby\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 15: tidydata\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬을 이용한 통계자료분석",
    "section": "",
    "text": "Day1\n\n2022-파이썬입문 3월7일 // 영상4~8\n2022-파이썬입문 3월14일 // 모든영상\n2022-파이썬입문 3월16일 // 모든영상\n2022-파이썬입문 3월21일 // 모든영상\n2022-파이썬입문 3월23일 // 모든영상\n2022-파이썬입문 4월6일 // 모든영상\n2022-파이썬입문 4월11일 // 모든영상\n2022-파이썬입문 5월6일 // 모든영상\n\nDay2\n\n2022-데이터시각화 06wk-1,2 // 모든영상\n2022-데이터시각화 07wk-1 // 영상1,2\n2022-데이터시각화 08wk-1,2 // 영상1,2\n\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 30, 2023\n\n\nLesson 01: 파이썬의 자료형 I (int, float, bool, str)\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 02: 파이썬의 자료형 II (list, tuple)\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 03: 파이썬 자료형 심화개념\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 04: 파이썬의 자료형 III (dict, set)\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 06: numpy 공부 1단계 ~ 2단계\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 07: numpy 공부 3단계 ~ 5단계\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 08: pandas 짧게정리\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 09: 데이터 조작 연습 (문제)\n\n\n최규빈\n\n\n\n\nJan 30, 2023\n\n\nLesson 09: 데이터 조작 연습 (풀이)\n\n\n최규빈\n\n\n\n\nJan 31, 2023\n\n\nLesson 10: 소스코드 관리, 모듈, 라이브러리\n\n\n최규빈\n\n\n\n\nJan 31, 2023\n\n\nLesson 11: lambda, map\n\n\n최규빈\n\n\n\n\nJan 31, 2023\n\n\nLesson 12: pandas + lambda, map\n\n\n최규빈\n\n\n\n\nJan 31, 2023\n\n\nLesson 13: 데이터 전처리\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 14: groupby\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 15: tidydata\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 16: 고차원 자료의 시각화 (with plotnine)\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 16: 고차원 자료의 시각화 (with plotnine)\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 17: 아이스크림을 많이 먹으면 걸리는 병\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 17: 아이스크림을 많이 먹으면 걸리는 병\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 18: FIFA23 자료분석\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 18: FIFA23 자료분석\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 19: 심슨의 역설\n\n\n최규빈\n\n\n\n\nFeb 1, 2023\n\n\nLesson 19: 심슨의 역설\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2_1.html",
    "href": "2_1.html",
    "title": "Chap 5. 모듈",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 31, 2023\n\n\nLesson 10: 소스코드 관리, 모듈, 라이브러리\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  }
]